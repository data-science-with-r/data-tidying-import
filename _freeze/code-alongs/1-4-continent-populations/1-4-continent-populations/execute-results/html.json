{
  "hash": "569cc55d43f2556882e914789c5a994d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Continent populations\nfig-asp: 0.4\nfig-width: 8\n---\n\n\n\n# Introduction\n\nOur ultimate goal in this application exercise is to create a bar plot of total populations of continents, where the input data are:\n\n1.  Countries and populations\n2.  Countries and continents\n\n## Packages\n\nWe will use the **tidyverse** and **scales** packages for data wrangling and visualization.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\n```\n:::\n\n\n\n## Data\n\n### Population\n\nThese data come from [The World Bank](https://databank.worldbank.org/reports.aspx?source=2&series=SP.POP.TOTL&country=#) and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation <- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n```\n:::\n\n\n\nLet's take a look at the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   <chr>       <chr>       <chr>        <chr>         <dbl>  <dbl>  <dbl>  <dbl>\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` <dbl>, `2005` <dbl>, `2006` <dbl>, `2007` <dbl>,\n#   `2008` <dbl>, `2009` <dbl>, `2010` <dbl>, `2011` <dbl>, `2012` <dbl>,\n#   `2013` <dbl>, `2014` <dbl>, `2015` <dbl>, `2016` <dbl>, `2017` <dbl>,\n#   `2018` <dbl>, `2019` <dbl>, `2020` <dbl>, `2021` <dbl>, `2022` <dbl>,\n#   `2023` <dbl>\n```\n\n\n:::\n:::\n\n\n\n### Continents\n\nThese data come from [Our World in Data](https://ourworldindata.org/grapher/continents-according-to-our-world-in-data).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinents <- read_csv(\"https://data-science-with-r.github.io/data/continents.csv\")\n```\n:::\n\n\n\nLet's take a look at the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinents\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 285 × 4\n   entity                code      year continent    \n   <chr>                 <chr>    <dbl> <chr>        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows\n```\n\n\n:::\n:::\n\n\n\n## Exercises\n\n-   For this analysis we'll focus on the latest available population numbers -- 2023. Modify the `population` data frame to only include 2023 population numbers. Then, rename the column containing 2023 population numbers as `population`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n-   Which variable(s) will we use to join the `population` and `continents` data frames?\n\nAdd response here.\n\n-   We want to create a new data frame that keeps all rows and columns from `population` and brings in the corresponding information from `continents`. Which join function should we use?\n\nAdd response here.\n\n-   Join the two data frames and name assign the joined data frame to a new data frame `population_continents`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n-   Take a look at the newly created `population_continent` data frame. There are some countries that were not in `continents`. First, identify which countries these are (they will have `NA` values for `continent`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n-   All of these countries are actually in the `continents` data frame, but under different names. So, let's clean that data first by updating the country names in the `population` data frame in a way they will match the `continents` data frame, and then joining them, using a `case_when()` statement in `mutate()`. At the end, check that all countries now have continent information.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n-   Which continent do you think has the highest population? Which do you think has the second highest? The lowest?\n\nAdd response here.\n\n-   Create a new data frame called `population_summary` that contains a row for each continent and a column for the total population for that continent, in descending order of population. Note that the function for calculating totals in R is `sum()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n-   Make a bar plot with total population on the y-axis and continent on the x-axis, where the height of each bar represents the total population in that continent.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n-   Recreate the following plot, which is commonly referred to as a **lollipop plot**. Hint: Start with the `point`s, then try adding the `segment`s, then add axis labels and `caption`, update the x scale.\n\n![](https://data-science-with-r.github.io/images/population-summary-lollipop-2023.png)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n-   What additional improvements would you like to make to this plot.\n\nAdd response here.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}