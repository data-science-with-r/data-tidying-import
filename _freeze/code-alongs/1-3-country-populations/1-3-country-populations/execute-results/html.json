{
  "hash": "6b2c8cbd72d13f15758249fb52c8f52b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Country populations over time\"\nfig-asp: 0.4\nfig-width: 8\n---\n\n\n\n\n# Introduction\n\n## Goal\n\nOur ultimate goal in this application exercise is to make the following data visualization.\n\n![](https://data-science-with-r.github.io/images/country-populations-years.png){fig-alt=\"Line plot of country populations for the United States, India, and China between 2000 and 2023.\" fig-align=\"center\"}\n\n## Packages\n\nWe will use the **tidyverse** and **scales** packages for data wrangling and visualization.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\n```\n:::\n\n\n\n\n## Data\n\nThese data come from [The World Bank](https://databank.worldbank.org/reports.aspx?source=2&series=SP.POP.TOTL&country=#) and reflect population counts for the years 2000 to 2023.\nThe populations given are mid-year estimates.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation <- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n```\n:::\n\n\n\n\nLet's take a look at the data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   <chr>       <chr>       <chr>        <chr>         <dbl>  <dbl>  <dbl>  <dbl>\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` <dbl>, `2005` <dbl>, `2006` <dbl>, `2007` <dbl>,\n#   `2008` <dbl>, `2009` <dbl>, `2010` <dbl>, `2011` <dbl>, `2012` <dbl>,\n#   `2013` <dbl>, `2014` <dbl>, `2015` <dbl>, `2016` <dbl>, `2017` <dbl>,\n#   `2018` <dbl>, `2019` <dbl>, `2020` <dbl>, `2021` <dbl>, `2022` <dbl>,\n#   `2023` <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n# Analysis\n\n## Tidying\n\n-   What are the aesthetic mappings in the plot shown above, i.e., what pieces of information do we need represented as columns (variables) in our data frame in order to be able to recreate this plot?\n\nAdd response here.\n\n-   Reshape the `population` data such that it can be used to recreate the plot above. Note: For now, you can keep all the countries in the dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n\n-   What is the type of the `year` variable? Why? What should it be?\n\nAdd response here.\n\n-   Start over with pivoting, and this time also make sure `year` is a numerical variable in the resulting data frame. Save the resulting data frame as `population_longer`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n\n## Visualization\n\n-   Now we start making our plot, but let's not get too fancy right away. Create a line plot of populations of the United States, India, and China over the years. Represent the data with points and lines.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n\n-   What aspects of the plot need to be updated to go from the draft you created above to the goal plot at the beginning of this application exercise.\n\nAdd response here.\n\n-   Use different shapes for each country's points.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n\n-   Update x-axis scale such that the years displayed go from 2000 to 2024 in increments of 4 years.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n\n-   Update the y-axis so it's scaled to millions and uses the same breaks as the goal plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n\n-   Update colors for each country using the following level / color assignments.\n    -   \"United States\" = \"#0A3161\"\n    -   \"India\" = \"#FF671F\"\n    -   \"China\" = \"#EE1C25\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n\n-   Update the plot labels (`title`, `subtitle`, `x`, `y`, and `caption`) and use `theme_minimal()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n\n-   Finally, move the legend to the top of the plot and remove its label.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n",
    "supporting": [
      "1-3-country-populations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}