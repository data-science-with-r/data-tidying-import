{
  "hash": "3fc376c0ec5033fea1651a4b038582e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Country populations over time (Notes)\nfig-asp: 0.4\nfig-width: 8\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Introduction\n\n## Goal\n\nOur ultimate goal in this application exercise is to make the following data visualization.\n\n![](https://data-science-with-r.github.io/images/country-populations-years.png){fig-alt=\"Line plot of country populations for the United States, India, and China between 2000 and 2023.\" fig-align=\"center\"}\n\n## Packages\n\nWe will use the **tidyverse** and **scales** packages for data wrangling and visualization.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\n```\n:::\n\n\n\n\n## Data\n\nThese data come from [The World Bank](https://databank.worldbank.org/reports.aspx?source=2&series=SP.POP.TOTL&country=#) and reflect population counts for the years 2000 to 2023.\nThe populations given are mid-year estimates.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation <- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n```\n:::\n\n\n\n\nLet's take a look at the data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   <chr>       <chr>       <chr>        <chr>         <dbl>  <dbl>  <dbl>  <dbl>\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` <dbl>, `2005` <dbl>, `2006` <dbl>, `2007` <dbl>,\n#   `2008` <dbl>, `2009` <dbl>, `2010` <dbl>, `2011` <dbl>, `2012` <dbl>,\n#   `2013` <dbl>, `2014` <dbl>, `2015` <dbl>, `2016` <dbl>, `2017` <dbl>,\n#   `2018` <dbl>, `2019` <dbl>, `2020` <dbl>, `2021` <dbl>, `2022` <dbl>,\n#   `2023` <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n# Analysis\n\n## Tidying\n\n-   What are the aesthetic mappings in the plot shown above, i.e., what pieces of information do we need represented as columns (variables) in our data frame in order to be able to recreate this plot?\n\nPopulation, year, and country should each be in their own columns.\n\n-   Reshape the `population` data such that it can be used to recreate the plot above. Note: For now, you can keep all the countries in the dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation |>\n  pivot_longer(\n    cols = `2000`:`2023`,\n    names_to = \"year\",\n    values_to = \"population\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,208 × 6\n   series_name       series_code country_name country_code year  population\n   <chr>             <chr>       <chr>        <chr>        <chr>      <dbl>\n 1 Population, total SP.POP.TOTL Afghanistan  AFG          2000    19542982\n 2 Population, total SP.POP.TOTL Afghanistan  AFG          2001    19688632\n 3 Population, total SP.POP.TOTL Afghanistan  AFG          2002    21000256\n 4 Population, total SP.POP.TOTL Afghanistan  AFG          2003    22645130\n 5 Population, total SP.POP.TOTL Afghanistan  AFG          2004    23553551\n 6 Population, total SP.POP.TOTL Afghanistan  AFG          2005    24411191\n 7 Population, total SP.POP.TOTL Afghanistan  AFG          2006    25442944\n 8 Population, total SP.POP.TOTL Afghanistan  AFG          2007    25903301\n 9 Population, total SP.POP.TOTL Afghanistan  AFG          2008    26427199\n10 Population, total SP.POP.TOTL Afghanistan  AFG          2009    27385307\n# ℹ 5,198 more rows\n```\n\n\n:::\n:::\n\n\n\n\n-   What is the type of the `year` variable? Why? What should it be?\n\nIt's a character (`chr`) variable since the information came from the columns of the original data frame and R cannot know that these character strings represent years.\nThe variable type should be numeric.\n\n-   Start over with pivoting, and this time also make sure `year` is a numerical variable in the resulting data frame. Save the resulting data frame as `population_longer`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_longer <- population |>\n  pivot_longer(\n    cols = `2000`:`2023`,\n    names_to = \"year\",\n    values_to = \"population\",\n    names_transform = as.numeric,\n  )\npopulation_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,208 × 6\n   series_name       series_code country_name country_code  year population\n   <chr>             <chr>       <chr>        <chr>        <dbl>      <dbl>\n 1 Population, total SP.POP.TOTL Afghanistan  AFG           2000   19542982\n 2 Population, total SP.POP.TOTL Afghanistan  AFG           2001   19688632\n 3 Population, total SP.POP.TOTL Afghanistan  AFG           2002   21000256\n 4 Population, total SP.POP.TOTL Afghanistan  AFG           2003   22645130\n 5 Population, total SP.POP.TOTL Afghanistan  AFG           2004   23553551\n 6 Population, total SP.POP.TOTL Afghanistan  AFG           2005   24411191\n 7 Population, total SP.POP.TOTL Afghanistan  AFG           2006   25442944\n 8 Population, total SP.POP.TOTL Afghanistan  AFG           2007   25903301\n 9 Population, total SP.POP.TOTL Afghanistan  AFG           2008   26427199\n10 Population, total SP.POP.TOTL Afghanistan  AFG           2009   27385307\n# ℹ 5,198 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Visualization\n\n-   Now we start making our plot, but let's not get too fancy right away. Create a line plot of populations of the United States, India, and China over the years. Represent the data with points and lines.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_longer |>\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |>\n  ggplot(aes(x = year, y = population, color = country_name)) +\n  geom_point() +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](1-3-country-populations-notes_files/figure-html/line-plot-1.png){width=768}\n:::\n:::\n\n\n\n\n-   What aspects of the plot need to be updated to go from the draft you created above to the goal plot at the beginning of this application exercise.\n\nAdd ...\n\n-   Use different shapes for each country's points.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_longer |>\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |>\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](1-3-country-populations-notes_files/figure-html/shapes-1.png){width=768}\n:::\n:::\n\n\n\n\n-   Update x-axis scale such that the years displayed go from 2000 to 2024 in increments of 4 years.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_longer |>\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |>\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4))\n```\n\n::: {.cell-output-display}\n![](1-3-country-populations-notes_files/figure-html/x-axis-1.png){width=768}\n:::\n:::\n\n\n\n\n-   Update the y-axis so it's scaled to millions and uses the same breaks as the goal plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_longer |>\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |>\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(breaks = seq(250000000, 1250000000, 250000000), labels = label_number(scale = 1/1000000, suffix = \" mil\"))\n```\n\n::: {.cell-output-display}\n![](1-3-country-populations-notes_files/figure-html/y-axis-1.png){width=768}\n:::\n:::\n\n\n\n\n-   Update colors for each country using the following level / color assignments.\n    -   \"United States\" = \"#0A3161\"\n    -   \"India\" = \"#FF671F\"\n    -   \"China\" = \"#EE1C25\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_longer |>\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |>\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(breaks = seq(250000000, 1250000000, 250000000), labels = label_number(scale = 1/1000000, suffix = \" mil\")) +\n  scale_color_manual(\n    values = c(\n      \"United States\" = \"#0A3161\",\n      \"India\" = \"#FF671F\",\n      \"China\" = \"#EE1C25\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](1-3-country-populations-notes_files/figure-html/colors-1.png){width=768}\n:::\n:::\n\n\n\n\n-   Update the plot labels (`title`, `subtitle`, `x`, `y`, and `caption`) and use `theme_minimal()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_longer |>\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |>\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(breaks = seq(250000000, 1250000000, 250000000), labels = label_number(scale = 1/1000000, suffix = \" mil\")) +\n  scale_color_manual(\n    values = c(\n      \"United States\" = \"#0A3161\",\n      \"India\" = \"#FF671F\",\n      \"China\" = \"#EE1C25\"\n    )\n  ) +\n  labs(\n    x = \"Year\",\n    y = \"Population (in millions)\",\n    title = \"Country populations over the years\",\n    subtitle = \"2000 - 2023\",\n    caption = \"Data source: The World Bank\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](1-3-country-populations-notes_files/figure-html/labels-theme-1.png){width=768}\n:::\n:::\n\n\n\n\n-   Finally, move the legend to the top of the plot and remove its label.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_longer |>\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |>\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(breaks = seq(250000000, 1250000000, 250000000), labels = label_number(scale = 1/1000000, suffix = \" mil\")) +\n  scale_color_manual(\n    values = c(\n      \"United States\" = \"#0A3161\",\n      \"India\" = \"#FF671F\",\n      \"China\" = \"#EE1C25\"\n    )\n  ) +\n  labs(\n    x = \"Year\",\n    y = \"Population (in millions)\",\n    color = NULL,\n    shape = NULL,\n    title = \"Country populations over the years\",\n    subtitle = \"2000 - 2023\",\n    caption = \"Data source: The World Bank\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](1-3-country-populations-notes_files/figure-html/country-populations-years-1.png){width=768}\n:::\n:::\n",
    "supporting": [
      "1-3-country-populations-notes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}