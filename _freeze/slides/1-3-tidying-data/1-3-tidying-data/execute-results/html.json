{
  "hash": "d65d7dbb2b40b3e58c0fd4531c5a183b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidying data\"\nformat: revealjs\n---\n\n\n\n# Setup\n\n## Task, goal, and tools\n\n<br>\n\n::: hand\n{{< fa list-check >}} [have]{.hand-blue-medium} data organised in an unideal way for our analysis\n:::\n\n. . .\n\n::: hand\n{{< fa bullseye >}} [want]{.hand-pink-medium} to reorganize the data for our analysis\n:::\n\n. . .\n\n::: hand\n{{< fa screwdriver-wrench >}} [using]{.hand-yellow-medium} tools from the **tidyverse**\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n## Data: Grocery store sales\n\n\n\n\n\n\n\n::::::: columns\n:::: {.column width=\"35%\"}\n[have]{.hand-blue-medium}\n\n::: medium\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  customer_id item_1 item_2       item_3\n        <dbl> <chr>  <chr>        <chr> \n1           1 bread  milk         banana\n2           2 milk   toilet paper <NA>  \n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n:::: {.column .fragment width=\"35%\"}\n[want]{.hand-pink-medium}\n\n::: medium\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  customer_id item_no item        \n        <dbl> <chr>   <chr>       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper\n6           2 item_3  <NA>        \n```\n\n\n:::\n:::\n\n\n:::\n::::\n:::::::\n\n## Grammar of data tidying\n\n:::::: columns\n::: {.column width=\"30%\"}\n![](images/tidyr-part-of-tidyverse.png){fig-alt=\"tidyr is part of the tidyverse\"}\n:::\n\n:::: {.column width=\"40%\"}\nThe goal of **tidyr** is to help you tidy your data via\n\n::: incremental\n-   pivoting for going between wide and long data\n-   splitting and combining character columns\n-   nesting and unnesting columns\n-   clarifying how `NA`s should be treated\n:::\n::::\n::::::\n\n# Pivoting data\n\n## Pivoting\n\n::::: columns\n::: {.column width=\"40%\"}\nNot this...\n\n![](images/pivot.gif){width=\"500\"}\n:::\n\n::: {.column .fragment width=\"30%\"}\nbut this!\n\n![](images/tidyr-longer-wider.gif)\n:::\n:::::\n\n## Wider vs. longer {.smaller}\n\n::::: columns\n::: {.column width=\"35%\"}\n[wider]{.hand-blue-medium} - more columns\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  customer_id item_1 item_2       item_3\n        <dbl> <chr>  <chr>        <chr> \n1           1 bread  milk         banana\n2           2 milk   toilet paper <NA>  \n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"35%\"}\n[longer]{.hand-pink-medium} - more rows\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  customer_id item_no item        \n        <dbl> <chr>   <chr>       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper\n6           2 item_3  <NA>        \n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n# From wider to longer\n\n## `pivot_longer()`\n\n:::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_longer(\n  data,\n  cols, \n  names_to = \"name\", \n  values_to = \"value\"\n  )\n```\n:::\n\n\n:::\n::::\n\n## `pivot_longer()`\n\n:::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\npivot_longer(\n  data, # <1>\n  cols, \n  names_to = \"name\", \n  values_to = \"value\"\n  )\n```\n:::\n\n\n\n1.  `data` (as usual)\n:::\n::::\n\n## `pivot_longer()`\n\n:::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\npivot_longer(\n  data,   # <1>\n  cols,   # <2>\n  names_to = \"name\", \n  values_to = \"value\"\n  )\n```\n:::\n\n\n\n1.  `data` (as usual)\n2.  `cols`: Columns to pivot into longer format\n:::\n::::\n\n## `pivot_longer()`\n\n:::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npivot_longer(\n  data,   # <1>\n  cols,   # <2>\n  names_to = \"name\", # <3>\n  values_to = \"value\"\n  )\n```\n:::\n\n\n\n1.  `data` (as usual)\n2.  `cols`: Columns to pivot into longer format\n3.  `names_to`: Name of the column where column names of pivoted variables go (character string)\n:::\n::::\n\n## `pivot_longer()`\n\n:::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\npivot_longer(\n  data,   # <1>\n  cols,   # <2>\n  names_to = \"name\", # <3>\n  values_to = \"value\" # <4>\n  )\n```\n:::\n\n\n\n1.  `data` (as usual)\n2.  `cols`: Columns to pivot into longer format\n3.  `names_to`: Name of the column where column names of pivoted variables go (character string)\n4.  `values_to`: Name of the column where data in pivoted variables go (character string)\n:::\n::::\n\n## `pivot_longer()` in context\n\n:::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3|4|5\"}\ncustomers |>\n  pivot_longer(\n    cols = item_1:item_3, #<1>\n    names_to = \"item_no\", #<2>\n    values_to = \"item\"    #<3>\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  customer_id item_no item        \n        <dbl> <chr>   <chr>       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper\n6           2 item_3  <NA>        \n```\n\n\n:::\n:::\n\n\n\n1.  `cols` to pivot: `item_1` to `item_3`\n2.  Column `names_to` new column called `item_no`\n3.  `values_to` new column called `item`\n:::\n::::\n\n## Dealing with `NA`s\n\n:::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|6\"}\ncustomers |>\n  pivot_longer(\n    cols = item_1:item_3, #<1>\n    names_to = \"item_no\", #<2>\n    values_to = \"item\",   #<3>\n    values_drop_na = TRUE #<4>\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  customer_id item_no item        \n        <dbl> <chr>   <chr>       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper\n```\n\n\n:::\n:::\n\n\n\n1.  `cols` to pivot: `item_1` to `item_3`\n2.  Column `names_to` new column called `item_no`\n3.  `values_to` new column called `item`\n4.  Drop rows that contain only `NA`s in the `values_to` column\n:::\n::::\n\n## Customers $\\rightarrow$ purchases\n\n:::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npurchases <- customers |>\n  pivot_longer(\n    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\",\n    values_drop_na = TRUE\n  )\n\npurchases\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  customer_id item_no item        \n        <dbl> <chr>   <chr>       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper\n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n\n\n## Why pivot?\n\nMost likely, because the next step of your analysis needs it\n\n. . .\n\n:::::: medium\n::::: columns\n::: {.column width=\"35%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprices\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  item         price\n  <chr>        <dbl>\n1 avocado       0.5 \n2 banana        0.15\n3 bread         1   \n4 milk          0.8 \n5 toilet paper  3   \n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"35%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npurchases |>\n  left_join(prices)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(item)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  customer_id item_no item         price\n        <dbl> <chr>   <chr>        <dbl>\n1           1 item_1  bread         1   \n2           1 item_2  milk          0.8 \n3           1 item_3  banana        0.15\n4           2 item_1  milk          0.8 \n5           2 item_2  toilet paper  3   \n```\n\n\n:::\n:::\n\n\n:::\n:::::\n::::::\n\n# From longer to wider\n\n\n## Purchases $\\rightarrow$ customers\n\n:::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npurchases |>\n  pivot_wider(\n    names_from = item_no,\n    values_from = item\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  customer_id item_1 item_2       item_3\n        <dbl> <chr>  <chr>        <chr> \n1           1 bread  milk         banana\n2           2 milk   toilet paper <NA>  \n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n## `pivot_wider()`\n\n:::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,2,5\"}\npivot_wider(\n  data,   # <1>\n  names_from = name,\n  values_from = value\n  )\n```\n:::\n\n\n\n1.  `data` (as usual)\n:::\n::::\n\n## `pivot_wider()`\n\n:::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,3,5\"}\npivot_wider(\n  data,   # <1>\n  names_from = name, #<2>\n  values_from = value\n  )\n```\n:::\n\n\n\n1.  `data` (as usual)\n2.  `names_from`: Which column(s) in the long format contains the what should be column names in the wide format\n:::\n::::\n\n## `pivot_wider()`\n\n:::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,4,5\"}\npivot_wider(\n  data,   # <1>\n  names_from = name, # <2>\n  values_from = value # <3>\n  )\n```\n:::\n\n\n\n1.  `data` (as usual)\n2.  `names_from`: Which column(s) in the long format contains the what should be column names in the wide format\n3.  `values_from`: Which column(s) in the long format contains the what should be values in the new columns in the wide format\n:::\n::::\n\n## Wider <-> longer\n\n![](images/tidyr-longer-wider.gif)\n\n## Additional arguments {.smaller}\n\n:::: columns\n::: {.column width=\"35%\"}\n[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1,4-5,7-12,14-17\"}\npivot_longer(\n  data,\n  cols,\n  ...,\n  cols_vary = \"fastest\",\n  names_to = \"name\",\n  names_prefix = NULL,\n  names_sep = NULL,\n  names_pattern = NULL,\n  names_ptypes = NULL,\n  names_transform = NULL,\n  names_repair = \"check_unique\",\n  values_to = \"value\",\n  values_drop_na = FALSE,\n  values_ptypes = NULL,\n  values_transform = NULL\n)\n```\n:::\n\n\n:::\n\n::: {.column width=\"35%\"}\n[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1,3-5,7-13,15-18\"}\npivot_wider(\n  data,\n  ...,\n  id_cols = NULL,\n  id_expand = FALSE,\n  names_from = name,\n  names_prefix = \"\",\n  names_sep = \"_\",\n  names_glue = NULL,\n  names_sort = FALSE,\n  names_vary = \"fastest\",\n  names_expand = FALSE,\n  names_repair = \"check_unique\",\n  values_from = value,\n  values_fill = NULL,\n  values_fn = NULL,\n  unused_fn = NULL\n)\n```\n:::\n\n\n:::\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}