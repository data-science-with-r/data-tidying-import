{
  "hash": "b9f6e289cd93b4ed07b7d09c047c1e90",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Importing data\"\nformat: revealjs\n---\n\n\n\n\n# Reading rectangular data into R\n\n## Reading delimited files\n\n:::: {.columns}\n\n::: {.column width=\"35%\"}\n![](images/readr-part-of-tidyverse.png)\n:::\n\n::: {.column width=\"35%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n- `read_csv()` - comma delimited files\n- `read_csv2()` - semicolon separated files (common in countries where , is used as the decimal place)\n- `read_tsv()` - tab delimited files\n- `read_delim()` - reads in files with any delimiter\n- `read_fwf()` - fixed width files\n- ...\n:::\n\n::::\n\n## Reading Excel spreadsheets\n\n:::: {.columns}\n\n::: {.column width=\"35%\"}\n![](images/readxl.png)\n:::\n\n::: {.column width=\"35%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n:::\n\n\n\n\n- `read_excel()` - read xls or xlsx files\n- ...\n:::\n\n::::\n\n# Reading and writing CSV files\n\n## Reading data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel <- read_csv(file = \"data/nobel.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1000 Columns: 19\n── Column specification ────────────────────────────────────\nDelimiter: \",\"\nchr (17): first_name, last_name, born, died, born_countr...\ndbl  (2): id, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\n## Reading data {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,000 × 19\n      id first_name     last_name   born  died  born_country\n   <dbl> <chr>          <chr>       <chr> <chr> <chr>       \n 1   160 Jacobus H.     van 't Hoff 1852… 3/1/… the Netherl…\n 2   569 Sully          Prudhomme   1839… 9/7/… France      \n 3   293 Emil           von Behring 1854… 3/31… Prussia (no…\n 4   462 Henry          Dunant      1828… 10/3… Switzerland \n 5     1 Wilhelm Conrad Röntgen     1845… 2/10… Prussia (no…\n 6   463 Frédéric       Passy       1822… 6/12… France      \n 7   464 Élie           Ducommun    1833… 12/7… Switzerland \n 8   465 Albert         Gobat       1843… 3/16… Switzerland \n 9   294 Ronald         Ross        1857… 9/16… India       \n10   161 Emil           Fischer     1852… 7/15… Prussia (no…\n# ℹ 990 more rows\n# ℹ 13 more variables: born_country_code <chr>,\n#   born_city <chr>, died_country <chr>,\n#   died_country_code <chr>, died_city <chr>, gender <chr>,\n#   year <dbl>, category <chr>, overall_motivation <chr>,\n#   motivation <chr>, organization_name <chr>,\n#   organization_city <chr>, organization_country <chr>\n```\n\n\n:::\n:::\n\n\n\n\n## Writing data\n\nWrite a file:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1-6|8\"}\ndf <- tribble(\n  ~x, ~y,\n  1,  \"a\",\n  2,  \"b\",\n  3,  \"c\"\n)\n\nwrite_csv(df, file = \"data/df.csv\")\n```\n:::\n\n\n\n\n## Reading data back\n\nRead it back in to inspect:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"data/df.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 3 Columns: 2\n── Column specification ────────────────────────────────────\nDelimiter: \",\"\nchr (1): y\ndbl (1): x\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 b    \n3     3 c    \n```\n\n\n:::\n:::\n\n\n\n\n## Suppressing messages\n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| message: false\nread_csv(\"data/df.csv\")\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 b    \n3     3 c    \n```\n\n\n:::\n:::\n\n\n\n\n# Variable names\n\n## Data with bad names\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedibnb_bad_names <- read_csv(\"data/edibnb-bad-names.csv\")\nnames(edibnb_bad_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ID\"                   \"Price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"Number of bathrooms\"  \"Number of Bedrooms\"  \n [7] \"n beds\"               \"Review Scores Rating\"\n [9] \"Number of reviews\"    \"listing_url\"         \n```\n\n\n:::\n:::\n\n\n\n\n. . .\n\n... but R doesn't allow spaces in variable names\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  edibnb_bad_names, \n  aes(x = Number of bathrooms, y = Price)\n  ) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:18: unexpected symbol\n2:   edibnb_bad_names, \n3:   aes(x = Number of\n                    ^\n```\n\n\n:::\n:::\n\n\n\n\n## Option 1 - Quote column names\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  edibnb_bad_names, \n  aes(x = `Number of bathrooms`, y = Price)\n  ) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](2-3-importing-data_files/figure-revealjs/unnamed-chunk-10-1.png){width=60%}\n:::\n:::\n\n\n\n\n## Option 2 - Define column names\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|5|3-7\"}\nedibnb_col_names <- read_csv(\n  \"data/edibnb-bad-names.csv\",\n  col_names = c(\n    \"id\", \"price\", \"neighbourhood\", \"accommodates\", \n    \"bathroom\", \"bedroom\", \"bed\", \"review_scores_rating\", \n    \"n_reviews\", \"url\"\n  )\n)\n```\n:::\n\n\n\n\n. . .\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(edibnb_col_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"                   \"price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"bathroom\"             \"bedroom\"             \n [7] \"bed\"                  \"review_scores_rating\"\n [9] \"n_reviews\"            \"url\"                 \n```\n\n\n:::\n:::\n\n\n\n\n## Option 3 - Format column names to snake_case\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\n\nedibnb_clean_names <- read_csv(\"data/edibnb-bad-names.csv\") |>\n  janitor::clean_names()\n```\n:::\n\n\n\n\n. . .\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(edibnb_clean_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"                   \"price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"number_of_bathrooms\"  \"number_of_bedrooms\"  \n [7] \"n_beds\"               \"review_scores_rating\"\n [9] \"number_of_reviews\"    \"listing_url\"         \n```\n\n\n:::\n:::\n\n\n\n\n# Variable types\n\n## Variable types\n\n::: task\nWhich type is `x`? Why?\n:::\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n![](images/df-na.png)\n:::\n\n::: {.column width=\"40%\" .fragment}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"data/df-na.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  x     y              z     \n  <chr> <chr>          <chr> \n1 1     a              hi    \n2 <NA>  b              hello \n3 3     Not applicable 9999  \n4 4     d              ola   \n5 5     e              hola  \n6 .     f              whatup\n7 7     g              wassup\n8 8     h              sup   \n9 9     i              <NA>  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n## Option 1. Explicit NAs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\n  \"data/df-na.csv\", \n  na = c(\"\", \"NA\", \".\", \"9999\", \"Not applicable\")\n)\n```\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"40%\" .fragment}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n      x y     z     \n  <dbl> <chr> <chr> \n1     1 a     hi    \n2    NA b     hello \n3     3 <NA>  <NA>  \n4     4 d     ola   \n5     5 e     hola  \n6    NA f     whatup\n7     7 g     wassup\n8     8 h     sup   \n9     9 i     <NA>  \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"30%\"}\n![](images/df-na.png)\n:::\n\n::::\n\n## Option 2. Specify column types\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\n  \"data/df-na.csv\", \n  col_types = list(col_double(), col_character(), col_character())\n  )\n```\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"40%\" .fragment}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data\nframe for details, e.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n      x y              z     \n  <dbl> <chr>          <chr> \n1     1 a              hi    \n2    NA b              hello \n3     3 Not applicable 9999  \n4     4 d              ola   \n5     5 e              hola  \n6    NA f              whatup\n7     7 g              wassup\n8     8 h              sup   \n9     9 i              <NA>  \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"30%\"}\n![](images/df-na.png)\n:::\n\n::::\n\n## Column types for `read_csv()` {.smaller}\n\n**type function**  | **data type**\n------------------ | -------------\n`col_character()`  | character\n`col_date()`       | date\n`col_datetime()`   | POSIXct (date-time)\n`col_double()`     | double (numeric)\n`col_factor()`     | factor\n`col_guess()`      | let readr guess (default)\n`col_integer()`    | integer\n`col_logical()`    | logical\n`col_number()`     | numbers mixed with non-number characters\n`col_numeric()`    | double or integer\n`col_skip()`       | do not read\n`col_time()`       | time\n\n# Reading Excel spreadsheets\n\n## Reading data {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel <- read_excel(path = \"data/nobel.xlsx\")\n```\n:::\n\n\n\n\n. . .\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,000 × 19\n      id first_name     last_name  born  died               \n   <dbl> <chr>          <chr>      <chr> <dttm>             \n 1   160 Jacobus H.     van 't Ho… 1852… 1911-03-01 00:00:00\n 2   569 Sully          Prudhomme  1839… 1907-09-07 00:00:00\n 3   293 Emil           von Behri… 1854… 1917-03-31 00:00:00\n 4   462 Henry          Dunant     1828… 1910-10-30 00:00:00\n 5     1 Wilhelm Conrad Röntgen    1845… 1923-02-10 00:00:00\n 6   463 Frédéric       Passy      1822… 1912-06-12 00:00:00\n 7   464 Élie           Ducommun   1833… 1906-12-07 00:00:00\n 8   465 Albert         Gobat      1843… 1914-03-16 00:00:00\n 9   294 Ronald         Ross       1857… 1932-09-16 00:00:00\n10   161 Emil           Fischer    1852… 1919-07-15 00:00:00\n# ℹ 990 more rows\n# ℹ 14 more variables: born_country <chr>,\n#   born_country_code <chr>, born_city <chr>,\n#   died_country <chr>, died_country_code <chr>,\n#   died_city <chr>, gender <chr>, year <dbl>,\n#   category <chr>, overall_motivation <chr>,\n#   motivation <chr>, organization_name <chr>, …\n```\n\n\n:::\n:::\n\n\n\n\n## Spreadsheets with \"bad\" names\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedibnb_bad_names <- read_excel(\"data/edibnb-bad-names.xlsx\")\n\nnames(edibnb_bad_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ID\"                   \"Price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"Number of bathrooms\"  \"Number of Bedrooms\"  \n [7] \"n beds\"               \"Review Scores Rating\"\n [9] \"Number of reviews\"    \"listing_url\"         \n```\n\n\n:::\n:::\n\n\n\n\n## Option 1. Define column names\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3-6\"}\nedibnb_col_names <- read_excel(\n  \"data/edibnb-bad-names.xlsx\",\n  col_names = c(\n    \"id\", \"price\", \"neighbourhood\", \"accommodates\", \"bathroom\", \n    \"bedroom\", \"bed\", \"review_scores_rating\", \"n_reviews\", \"url\"\n  )\n)\n\nnames(edibnb_col_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"                   \"price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"bathroom\"             \"bedroom\"             \n [7] \"bed\"                  \"review_scores_rating\"\n [9] \"n_reviews\"            \"url\"                 \n```\n\n\n:::\n:::\n\n\n\n\n## Option 2. Format column names to snake_case\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedibnb_clean_names <- read_excel(\"data/edibnb-bad-names.xlsx\") |>\n  janitor::clean_names()\n\nnames(edibnb_clean_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"                   \"price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"number_of_bathrooms\"  \"number_of_bedrooms\"  \n [7] \"n_beds\"               \"review_scores_rating\"\n [9] \"number_of_reviews\"    \"listing_url\"         \n```\n\n\n:::\n:::\n\n\n\n\n## Spreadsheets with `NA`s\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_excel(\"data/df-na.xlsx\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  x     y              z     \n  <chr> <chr>          <chr> \n1 1     a              hi    \n2 NA    b              hello \n3 3     Not applicable 9999  \n4 4     d              ola   \n5 5     e              hola  \n6 .     f              whatup\n7 7     g              wassup\n8 8     h              sup   \n9 9     i              <NA>  \n```\n\n\n:::\n:::\n\n\n\n\n## Option 1. Explicit NAs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\nread_excel(\n  \"data/df-na.xlsx\", \n  na = c(\"\", \"NA\", \".\", \"9999\", \"Not applicable\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n      x y     z     \n  <dbl> <chr> <chr> \n1     1 a     hi    \n2    NA b     hello \n3     3 <NA>  <NA>  \n4     4 d     ola   \n5     5 e     hola  \n6    NA f     whatup\n7     7 g     wassup\n8     8 h     sup   \n9     9 i     <NA>  \n```\n\n\n:::\n:::\n\n\n\n\n## Option 2. Specify column types\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nread_excel(\n  \"data/df-na.xlsx\", \n  col_types = c(\"numeric\", \"text\", \"text\")\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Expecting numeric in A3 / R3C1: got 'NA'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Expecting numeric in A7 / R7C1: got '.'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n      x y              z     \n  <dbl> <chr>          <chr> \n1     1 a              hi    \n2    NA b              hello \n3     3 Not applicable 9999  \n4     4 d              ola   \n5     5 e              hola  \n6    NA f              whatup\n7     7 g              wassup\n8     8 h              sup   \n9     9 i              <NA>  \n```\n\n\n:::\n:::\n\n\n\n\n## Column types for `read_excel()` {.smaller}\n\n**type function**  | **data type**\n------------------ | -------------\n`\"skip\"`           | do not read\n`\"guess\"`          | let readxl guess (default)\n`\"logical\"`        | logical\n`\"numeric\"`        | numeric\n`\"date\"`           | POSIXct (date-time)\n`\"text\"`           | character\n`\"list\"`           | a list of length 1 vectors\n\n# Other types of data\n\n## Other types of data\n\n- **googlesheets4:** Google Sheets\n- **arrow:** parquet files\n- **DBI**, along with a database specific backend (e.g. RMySQL, RSQLite, RPostgreSQL etc): allows you to run SQL queries against a database and return a data frame\n- **rvest**: web scraping\n- **haven**: SPSS, Stata, and SAS files\n- **jsonline**: JSON\n- **xml2**: xml\n- **httr**: web APIs\n- **sparklyr**: data loaded into spark\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}