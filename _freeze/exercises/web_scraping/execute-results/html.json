{
  "hash": "61e0d3a42580eb453edd4c4353639b10",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Scraping Star Wars\"\ntoc: true\nwebr:\n  packages: ['tidyverse', 'scales', 'rvest', 'polite', 'curl']\nfilters:\n  - webr\n---\n\n\n## Star Wars\n\n\n::: {.cell}\n\n:::\n\n\n\nScraping data is defined as extracting data from one source to another. We are going to use the following [website](https://rvest.tidyverse.org/articles/starwars.html) to practice scraping data; taking data on the website and transporting it into a more workable format with R code.\n\n### Scraping titles\n\nPlease visit the [website](https://rvest.tidyverse.org/articles/starwars.html) and identify the movie titles. What are they?\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nThere are seven movie titles on this page. They include: -- The Phantom Menace\n\n-- Attack of the Clones\n\n-- Revenge of the Sith\n\n-- A New Hope\n\n-- The Empire Strikes Back\n\n-- Return of the Jedi\n\n-- The Force Awakens\n:::\n\nThe next step is to identify the html element that is associated with each title. To help us, we can use [Selector Gadget](https://selectorgadget.com/). Selector Gadget is an open source Chrome Extension that helps users find elements of an html page easier. This demonstration will use Selector Gadget. To install Selector Gadget, please go to the following [page](https://chromewebstore.google.com/detail/selectorgadget/mhjhnkcfbdhnjickkkdbjoemdmbfginb?hl=en&pli=1). When the Selector Gadget is installed, you should see ![](images/gadget.png) in your task bar.\n\n#### Start by reading a HTML page with read_html()\n\nFirst, we need to reference the website. We can do this by using `read_html()` from the rvest package. Run the following code below to do so.\n\n```{webr-r}\nstarwars <- read_html(\"https://rvest.tidyverse.org/articles/starwars.html\")\n```\n\n#### Find the element\n\nNext, we need to find the element that is associated with the titles of each Star Wars movie. Click the ![](images/gadget.png) icon and click on one of the titles.\n\n![](images/h2.png)\n\nIn the red outline, you will see the element `section`. Click on a different title. You will again see the element `section`. We can use this information to pull the titles from the website using the following code:\n\n```{webr-r}\nfilms <- starwars |>\n  html_elements(\"section\")\n\nfilms\n```\n\nNotice how seven nodes (titles) had the same element `section`. You can see the title of the movie, along with other data, in each row. Among this output, you can see that each data-id has an `h2` element. We also saw h2 when using the selector gadget on the title. Now, let's pull just the information associated with the `h2` element.\n```{webr-r}\n\ntitle <- films |> \n  html_element(\"h2\") |> \n  html_text2()\n\ntitle\n```\n\nAnother way to get title information is to take them directly from the `starwars` html using `html_elements(\"h2\")`. See the following code below.\n\n```{webr-r}\nstarwars |>\n  html_elements(\"h2\")\n```\n\nNotice that this has 8 nodes, instead of 7, as the data \"On this page\" does not have the element `section` tag. \n\n###\n\n\n\n\n## Asking Permission \n\nJust because you can use rvest tools to scrape data doesn't mean you should or have permission to do so. We will use the `bow()` function from the polite package in R to introduce the client to the host and ask for permission to scrape. Use the following code to ensure that we had permission to scrape Star Wars! Note that the input for `bow()` is a character URL. \n\n```{webr-r}\nhost <- \"https://rvest.tidyverse.org/articles/starwars.html\"\n\nbow(host)\n```\n\nIndeed, we had permission to scrape that website! \n\nLet's check out four more websites: \n\n-   https://espn.com \n-   https://x.com/home\n-   https://www.bettycrocker.com\n-   https://www.zillow.com\n\nSave each of these websites as a character, and use `bow()` to check for permission. What websites are you allowed to scrape? Which are you not allowed to scrape? \n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhost1 <- \"https://espn.com\"\nhost2 <- \"https://x.com/home\"\nhost3 <- \"https://www.bettycrocker.com\"\nhost4 <- \"https://www.zillow.com\"\n\nbow(host1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<polite session> https://espn.com\n    User-agent: polite R package\n    robots.txt: 114 rules are defined for 11 bots\n   Crawl delay: 5 sec\n  The path is not scrapable for this user-agent\n```\n\n\n:::\n\n```{.r .cell-code}\nbow(host2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<polite session> https://x.com/home\n    User-agent: polite R package\n    robots.txt: 24 rules are defined for 7 bots\n   Crawl delay: 5 sec\n  The path is not scrapable for this user-agent\n```\n\n\n:::\n\n```{.r .cell-code}\nbow(host3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<polite session> https://www.bettycrocker.com\n    User-agent: polite R package\n    robots.txt: 15 rules are defined for 1 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n```\n\n\n:::\n\n```{.r .cell-code}\nbow(host4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<polite session> https://www.zillow.com\n    User-agent: polite R package\n    robots.txt: 244 rules are defined for 8 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n```\n\n\n:::\n:::\n\n\nWe do not have permission to scrape espn.com or x.com. We do have permission to scrape bettycrocker.com and zillow.com.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}