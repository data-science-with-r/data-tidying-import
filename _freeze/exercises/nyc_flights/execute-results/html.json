{
  "hash": "b11bcb8c73e44404ea52c4d0b6508103",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"NYC flights + data wrangling\"\ntoc: true\nwebr:\n  packages: ['tidyverse', 'scales', 'nycflights13']\nfilters:\n  - webr\n---\n\n\n\n\n::: callout-important\nPlease reference the `webR-intro` programming exercise for information and instructions on how to interact with the programming exercise below.\n:::\n\n## Getting started\n\nIn this exercise, we will be exploring the `flights` data set, containing information about all flights that departed from NYC to destinations in the United States, Puerto Rico, and the American Virgin Island in 2013. A data key can be found below:\n\n::: {.callout-note collapse=\"true\"}\n## data key\n\n| Variable       | Description                                                            |\n|----------------|------------------------------------------------------------------------|\n| year           | year of departure                                                      |\n| month          | month of departure                                                     |\n| day            | day of departure                                                       |\n| dep_time       | departure time                                                         |\n| arr_time       | arrival time                                                           |\n| sched_dep_time | scheduled departure time                                               |\n| sched_arr_time | scheduled arrival time                                                 |\n| dep_delay      | departure delays in minutes. Negative times represent early departures in minutes |\n| arr_delay      | arrival delays in minutes. Negative times represent early arrivals in minutes     |\n| carrier        | two letter carrier abbreviation                                        |\n| tailnum        | plane tail number                                                      |\n| orgin          | origin                                                                 |\n| dest           | destination                                                            |\n| air_time       | amount of time spent in the air in minutes                             |\n| distance       | distance between airports in miles                                     |\n| hour           | the hour of time scheduled departure                                   |\n| minutes        | the minutes of time of scheduled departure                             |\n| time_hour      | scheduled date and hour of the flight as a POSIXct date.            |\n:::\n### Packages\n\nWe'll use: **tidyverse** for majority of the exploration. Section headers of this exercise refer to the function we will be practicing with. Each header is hyperlinked to their associated help file if you would like to further explore each function. \n\nThese data we are using are in the **nycflights13** package. These are ready to use for you in this programming exercise!\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Data wrangling \n\nData wrangling is the process of transforming or reshaping data into a form that is more suitable for analysis. In this exercise, we will practice with a variety of functions used to wrangle data. \n\nBefore we begin, use `glimpse` to report how many rows the `flights` data frame has. What does each row represent? \n\n```{webr-r}\n# add code here\n```\n\n<br>\n\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n\n\n:::\n:::\n\n\n\n\nThere are 336,776 rows in the `flights` data set. Each observation represents a **flight**.\n:::\n\n## [`select()`](https://dplyr.tidyverse.org/reference/select.html)\n\nThe function `select()` makes it easy to select variable(s) in your data set based on their name or position. \n\nUsing `select()`, make a data frame that only contains the variables `dep_delay` and `arr_delay`.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(dep_delay, arr_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 2\n   dep_delay arr_delay\n       <dbl>     <dbl>\n 1         2        11\n 2         4        20\n 3         2        33\n 4        -1       -18\n 5        -6       -25\n 6        -4        12\n 7        -5        19\n 8        -3       -14\n 9        -3        -8\n10        -2         8\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\nMake a data frame that keeps every variable except `dep_delay`.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(-dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 18\n    year month   day dep_time sched_dep_time arr_time sched_arr_time arr_delay\n   <int> <int> <int>    <int>          <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515      830            819        11\n 2  2013     1     1      533            529      850            830        20\n 3  2013     1     1      542            540      923            850        33\n 4  2013     1     1      544            545     1004           1022       -18\n 5  2013     1     1      554            600      812            837       -25\n 6  2013     1     1      554            558      740            728        12\n 7  2013     1     1      555            600      913            854        19\n 8  2013     1     1      557            600      709            723       -14\n 9  2013     1     1      557            600      838            846        -8\n10  2013     1     1      558            600      753            745         8\n# ℹ 336,766 more rows\n# ℹ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n:::\n\nMake a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.\n\n```{webr-r}\n# add code here\n```\n\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(year:dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515         2\n 2  2013     1     1      533            529         4\n 3  2013     1     1      542            540         2\n 4  2013     1     1      544            545        -1\n 5  2013     1     1      554            600        -6\n 6  2013     1     1      554            558        -4\n 7  2013     1     1      555            600        -5\n 8  2013     1     1      557            600        -3\n 9  2013     1     1      557            600        -3\n10  2013     1     1      558            600        -2\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\nUse the select helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `arr_` in the name.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(contains(\"arr_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 3\n   arr_time sched_arr_time arr_delay\n      <int>          <int>     <dbl>\n 1      830            819        11\n 2      850            830        20\n 3      923            850        33\n 4     1004           1022       -18\n 5      812            837       -25\n 6      740            728        12\n 7      913            854        19\n 8      709            723       -14\n 9      838            846        -8\n10      753            745         8\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## [`slice()`](https://dplyr.tidyverse.org/reference/slice.html)\n\nThe function [`slice()`](https://dplyr.tidyverse.org/reference/slice.html) lets you index rows by their name or (integer) locations. Other common uses of `slice()` include selecting and removing rows.\n\nDisplay the first five rows of the `flights` data frame.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n:::\n\nWe can use the function `n()`to reference the total number of rows in a data frame. Using this with slice, display the last two rows of the flights data frame.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  slice((n()-1):n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     9    30       NA           1159        NA       NA           1344\n2  2013     9    30       NA            840        NA       NA           1020\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)\n\nWe can use `arrange()` to order rows of a data frame by the values of selected columns.\n\nLet’s arrange the data by `dep_delay`, so the flights with the shortest departure delays will be at the top of the data frame.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013    12     7     2040           2123       -43       40           2352\n 2  2013     2     3     2022           2055       -33     2240           2338\n 3  2013    11    10     1408           1440       -32     1549           1559\n 4  2013     1    11     1900           1930       -30     2233           2243\n 5  2013     1    29     1703           1730       -27     1947           1957\n 6  2013     8     9      729            755       -26     1002            955\n 7  2013    10    23     1907           1932       -25     2143           2143\n 8  2013     3    30     2030           2055       -25     2213           2250\n 9  2013     3     2     1431           1455       -24     1601           1631\n10  2013     5     5      934            958       -24     1225           1309\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n:::\n\nWe can use the helper `desc()` to arrange the the data by descending departure delay. Do so below. \n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)\n\nThe function `filter()` is used to subset a data frame, retaining all rows that satisfy your conditions. \n\nFilter the data frame by selecting the rows where the destination airport is `RDU`.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(dest == \"RDU\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,163 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1240           1235         5     1415           1415\n 9  2013     1     1     1317           1325        -8     1454           1505\n10  2013     1     1     1449           1450        -1     1651           1640\n# ℹ 8,153 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n:::\n\nWe can also filter using more than one condition. Here we select all rows where the destination airport is RDU and the arrival delay is less than 0.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(dest == \"RDU\", arr_delay < 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,232 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1317           1325        -8     1454           1505\n 9  2013     1     1     1505           1510        -5     1654           1655\n10  2013     1     1     1800           1800         0     1945           1951\n# ℹ 4,222 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n:::\n\nDescribe what the code is doing in words.\n\n```{webr-r}\nflights |>\n  filter(\n    dest %in% c(\"RDU\", \"GSO\"),\n    arr_delay < 0 | dep_delay < 0\n    )\n```\n\n<br>\n\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\nWe are piping the flights data set into the function filter, where we want to keep all rows where destination has the value of RDU or GSO, and where arrival delay is less than 0 or departure delay is less than 0.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## more operators\n\n| operator      | definition                                               |\n|:--------------|:---------------------------------------------------------|\n| `<`           | is less than?                                            |\n| `<=`          | is less than or equal to?                                |\n| `>`           | is greater than?                                         |\n| `>=`          | is greater than or equal to?                             |\n| `==`          | is exactly equal to?                                     |\n| `!=`          | is not equal to?                                         |\n| `x & y`       | is x AND y?                                              |\n| `x \\| y`      | is x OR y?                                               |\n| `is.na(x)`    | is x NA?                                                 |\n| `!is.na(x)`   | is x not NA?                                             |\n| `x %in% y`    | is x in y?                                               |\n| `!(x %in% y)` | is x not in y?                                           |\n| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |\n:::\n\n## [`count()`](https://dplyr.tidyverse.org/reference/count.html)\n\nWe can use the function `count()` to create frequency tables of selected variables.\n\nCreate a frequency table of the destination locations for flights from New York.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 105 × 2\n   dest      n\n   <chr> <int>\n 1 ABQ     254\n 2 ACK     265\n 3 ALB     439\n 4 ANC       8\n 5 ATL   17215\n 6 AUS    2439\n 7 AVL     275\n 8 BDL     443\n 9 BGR     375\n10 BHM     297\n# ℹ 95 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\nIn which month was there the fewest number of flights? How many flights were there in that month?\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month) |>\n  filter(n == min(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  month     n\n  <int> <int>\n1     2 24951\n```\n\n\n:::\n:::\n\n\n\n:::\n\nOn which date (month + day) was there the largest number of flights? How many flights were there on that day?\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month, day) |>\n  filter(n == max(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  month   day     n\n  <int> <int> <int>\n1    11    27  1014\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)\n\nWe can use the function `mutate()` to create new columns or modify existing columns in your data set.\n\nConvert air_time (minutes in the air) to hours and then create a new variable, mph, the miles per hour of the flight\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(\n    hours = air_time / 60,\n    mph = distance / hours\n    ) |>\n  select(air_time, distance, hours, mph)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 4\n   air_time distance hours   mph\n      <dbl>    <dbl> <dbl> <dbl>\n 1      227     1400 3.78   370.\n 2      227     1416 3.78   374.\n 3      160     1089 2.67   408.\n 4      183     1576 3.05   517.\n 5      116      762 1.93   394.\n 6      150      719 2.5    288.\n 7      158     1065 2.63   404.\n 8       53      229 0.883  259.\n 9      140      944 2.33   405.\n10      138      733 2.3    319.\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\nCreate a new variable, `rdu_bound`, which indicates whether the flight is to RDU or not. Then, for each departure airport `(origin)`, calculate what proportion of flights originating from that airport are to RDU.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(rdu_bound = if_else(dest == \"RDU\", \"Yes\", \"No\")) |>\n  count(origin, rdu_bound) |>\n  group_by(origin) |>\n  mutate(prop = n / sum(n)) |>\n  filter(rdu_bound == \"Yes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n# Groups:   origin [3]\n  origin rdu_bound     n   prop\n  <chr>  <chr>     <int>  <dbl>\n1 EWR    Yes        1482 0.0123\n2 JFK    Yes        3100 0.0279\n3 LGA    Yes        3581 0.0342\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html) & [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html)\n\nWe can use the function `summarize()` to calculate summary statistics for a selected column. `summarize()` is often accompanied with `group_by()`, which converts a data frame into a grouped tbl where operations (like `summarize()`) are performed for each group.\n\nFind mean arrival delay for all flights.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  summarize(mean_dep_delay = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_dep_delay\n           <dbl>\n1             NA\n```\n\n\n:::\n:::\n\n\n\n:::\n\nFind mean arrival delay for for each month.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(month) |>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   month mean_arr_delay\n   <int>          <dbl>\n 1     1          6.13 \n 2     2          5.61 \n 3     3          5.81 \n 4     4         11.2  \n 5     5          3.52 \n 6     6         16.5  \n 7     7         16.7  \n 8     8          6.04 \n 9     9         -4.02 \n10    10         -0.167\n11    11          0.461\n12    12         14.9  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Additional Practice \n\nCreate a data frame that only includes the plane tail number (tailnum), carrier (carrier), and departure delay for the flight with the longest departure delay. What is the plane tail number (tailnum) for this flight?\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(tailnum, carrier, dep_delay) %>%\n  arrange(dep_delay) |>\n  slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  tailnum carrier dep_delay\n  <chr>   <chr>       <dbl>\n1 N592JB  B6            -43\n```\n\n\n:::\n:::\n\n\n\n:::\n\nOn which date (month + day) was there the largest number of flights? How many flights were there on that day?\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month, day) |>\n  filter(n == max(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  month   day     n\n  <int> <int> <int>\n1    11    27  1014\n```\n\n\n:::\n:::\n\n\n\n:::\n\nCreate a new variable to calculate the percentage of flights in each month. What percentage of flights take place in July?\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month) |>\n  mutate(perc = n / sum(n) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   month     n  perc\n   <int> <int> <dbl>\n 1     1 27004  8.02\n 2     2 24951  7.41\n 3     3 28834  8.56\n 4     4 28330  8.41\n 5     5 28796  8.55\n 6     6 28243  8.39\n 7     7 29425  8.74\n 8     8 29327  8.71\n 9     9 27574  8.19\n10    10 28889  8.58\n11    11 27268  8.10\n12    12 28135  8.35\n```\n\n\n:::\n:::\n\n\n\n:::\n\nWhat is the median departure delay for each airports around NYC (origin)? Which airport has the shortest median departure delay?\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(origin) |>\n  summarize(med_dep_delay = median(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  origin med_dep_delay\n  <chr>          <dbl>\n1 EWR               -1\n2 JFK               -1\n3 LGA               -3\n```\n\n\n:::\n:::\n\n\n\n:::\n\nCreate a new dataset that only contains flights that do not have a missing departure time. Include the columns `year`, `month`, `day`, `dep_time`, `dep_delay`, and `dep_delay_hours` (the departure delay in hours). Hint: Note you may need to use `mutate()` to make one or more of these variables.\n\n```{webr-r}\n\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(!is.na(dep_time)) |>\n  select(year, month, day, dep_time, dep_delay) |>\n  mutate(dep_delay_hours = dep_delay / 60)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 328,521 × 6\n    year month   day dep_time dep_delay dep_delay_hours\n   <int> <int> <int>    <int>     <dbl>           <dbl>\n 1  2013     1     1      517         2          0.0333\n 2  2013     1     1      533         4          0.0667\n 3  2013     1     1      542         2          0.0333\n 4  2013     1     1      544        -1         -0.0167\n 5  2013     1     1      554        -6         -0.1   \n 6  2013     1     1      554        -4         -0.0667\n 7  2013     1     1      555        -5         -0.0833\n 8  2013     1     1      557        -3         -0.05  \n 9  2013     1     1      557        -3         -0.05  \n10  2013     1     1      558        -2         -0.0333\n# ℹ 328,511 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n\n---\ntitle: \"\"\n---\n\n\n\n## Reflection questions \n\n- Why do you believe we are studying the content above? \n\n<br>\n\n\n```{=html}\n<textarea rows=\"8\" cols=\"50\">\n</textarea>\n```\n\n\n<br><br>\n\n- List three topics that you feel very confident about from the content above.\n\n<br>\n\n\n```{=html}\n<textarea rows=\"8\" cols=\"50\">\n</textarea>\n```\n\n\n<br><br>\n\n- List three topics that you feel could use more practice (or you are more curious about) from the content above.\n\n<br>\n\n\n```{=html}\n<textarea rows=\"8\" cols=\"50\">\n</textarea>\n```\n\n\n<br><br>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}