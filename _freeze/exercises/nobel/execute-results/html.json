{
  "hash": "55c3b90a98f26547882a6ca8a7715155",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Nobel Prize winners & sales data\"\nformat: \n  live-html:\n    toc: true\nengine: knitr\nwebr:\n  packages: \n    - tidyverse\n    - readxl\n  resources:\n    - https://raw.githubusercontent.com/data-science-with-r/data-tidying-import/main/exercises/data/nobel.csv\n    - https://raw.githubusercontent.com/data-science-with-r/data-tidying-import/main/exercises/data/sales.xlsx\n---\n\n\n\n<!-- begin: webr fodder -->\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| echo: false\n#| output: false\noptions(\"readr.edition\" = 1)\n```\n:::\n\n\n\n<!-- end: webr fodder -->\n\n## Packages\n\nWe will use the following two packages in this application exercise.\n\n-   **tidyverse**: For data import, wrangling, and visualization.\n-   **readxl:** For importing data from MS Excel.\n\nLet's first load the packages.\n\n\n\n::: {.cell}\n```{webr}\n#| label: load-packages\nlibrary(tidyverse)\nlibrary(readxl)\n```\n:::\n\n\n\n## Reading CSV files\n\nFor this programming exercise, we are going to work with a data on Nobel Prize winners from the years 1901 through 2018, called `nobel.csv`.\n\nLoad the dataset with `read_csv()` and save it as a data frame (a `tibble`) called `nobel`.\nHow many rows are there in `nobel` and what does each row represent?\nHow many columns are there in `nobel`?\n\n\n\n::: {.cell exercise='ex_1'}\n```{webr}\n#| exercise: ex_1\n___ <- ___(\"___\")\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 1\n\nRead in the data with `read_csv()` and pass the name of the data file, `\"nobel.csv\"` as the argument of this funtion.\n\n```r\n___ <- read_csv(\"nobel.csv\")\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 2\n\nAssign the result of `read_csv(\"nobel.csv\")` to `nobel`.\n\n```r\nnobel <- read_csv(\"nobel.csv\")\n```\n:::\n:::\n\n::: { .solution exercise=\"ex_1\"}\n::: { .callout-tip collapse=\"false\"}\n## Solution\n\n```r\nnobel <- read_csv(\"nobel.csv\")\n```\n\nThere are 935 rows and 26 columns in `nobel` data frame.\nEach row represents a Nobel prize winner.\n:::\n:::\n\nNow, read the data in again, but this time add the argument `show_col_types` to the `read_csv()` function and set it to `FALSE.\nThis will suppress the information on column specifications (what type each column is).\n\n\n\n::: {.cell exercise='ex_2'}\n```{webr}\n#| exercise: ex_2\nnobel <- read_csv(\"nobel.csv\", ___)\n```\n:::\n\n\n\n::: { .solution exercise=\"ex_2\"}\n::: { .callout-tip collapse=\"false\"}\n## Solution\n\n```r\nnobel <- read_csv(\"nobel.csv\", show_col_types = FALSE)\n```\n\nNotice that the column specification is no longer printed.\n:::\n:::\n\n## Variable types and classes\n\nWe are going to use the `nobel` dataset to explore how to change types of variables and what can go wrong along the way.\n\nUsing `glimpse()`, identify what type of variable `category` is in the `nobel` data frame.\nAdditionally, identify the values this variable takes.\n\n\n\n::: {.cell setup='true' exercise='ex_3'}\n```{webr}\n#| setup: true\n#| exercise: ex_3\nnobel <- read_csv(\"nobel.csv\")\n```\n:::\n\n::: {.cell exercise='ex_3'}\n```{webr}\n#| exercise: ex_3\n___\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_3\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 1\n\n```r\nglimpse(nobel)\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_3\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 2\n\n```r\nglimpse(nobel)\n\nnobel |>\n  distinct(category)\n```\n:::\n:::\n\n::: { .solution exercise=\"ex_3\"}\n::: { .callout-tip collapse=\"false\"}\n## Solution\n\n```r\nglimpse(nobel)\n\nnobel |>\n  distinct(category)\n```\n\n`category` is a character variable.\nThis variable takes on the following values: Physics, Chemistry, Peace, Medicine, Literature, and Economics.\n:::\n:::\n\nSuppose we want to convert the the levels of `category` into numeric values.\nRun the following code.\nWhat happens?\n\n\n\n::: {.cell setup='true' exercise='ex_4'}\n```{webr}\n#| setup: true\n#| exercise: ex_4\nnobel <- read_csv(\"nobel.csv\")\n```\n:::\n\n::: {.cell exercise='ex_4'}\n```{webr}\n#| exercise: ex_4\nnobel |>\n  mutate(category = as.numeric(category)) |>\n  select(category)\n```\n:::\n\n\n\n::: { .solution exercise=\"ex_4\"}\n::: { .callout-tip collapse=\"false\"}\n## Solution\n\nWhen trying to convert the values of `caegory` from characters into numbers, each value became an `NA`.\nAnd we got a warning that says `NAs introduced by coercion`.\n:::\n:::\n\nIt makes sense that R can't just represent character strings as numbers.\nInstead of converting a character variable to a numeric, we might consider converting it to a factor variable instead -- how R represents categorical data.\n\nConvert `category` to factor and save it in the `nobel` data frame.\nThen, report its levels.\n\n\n\n::: {.cell setup='true' exercise='ex_5'}\n```{webr}\n#| setup: true\n#| exercise: ex_5\nnobel <- read_csv(\"nobel.csv\")\n```\n:::\n\n::: {.cell exercise='ex_5'}\n```{webr}\n#| exercise: ex_5\n___\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_5\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 1\n\n```r\nnobel <- nobel |>\n  ___(___)\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_5\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 2\n\n```r\nnobel <- nobel |>\n  mutate(___ = as.factor(___))\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_5\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 3\n\n```r\nnobel <- nobel |>\n  mutate(category = as.factor(category))\n```\n:::\n:::\n\n::: { .solution exercise=\"ex_5\"}\n::: { .callout-tip collapse=\"false\"}\n## Solution\n\n```r\nnobel <- nobel |>\n  mutate(category = as.factor(category))\n  \nlevels(nobel$category)\n```\n\nThe levels are Physics, Chemistry, Peace, Medicine, Literature, and Economics.\n:::\n:::\n\n## Reading Excel files\n\nFor the remainder of this programming exercise, we are going read in data from an Excel file and then clean it up.\n\n![](images/sales-excel.png){fig-align=\"center\" width=\"801\"}\n\nFirst, read the data in with `read_excel` from the Excel file called `\"sales.xlsx\"` and print the data to screen.\nIs this a tidy data frame?\n\n\n\n::: {.cell exercise='ex_6'}\n```{webr}\n#| exercise: ex_6\n___\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_6\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 1\n\n```r\n___ <- read_excel(\"___\")\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_6\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 2\n\n```r\nsales <- read_excel(\"sales.xlsx\")\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_6\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 3\n\n```r\nsales <- read_excel(\"sales.xlsx\")\nsales\n```\n:::\n:::\n\n::: { .solution exercise=\"ex_6\"}\n::: { .callout-tip collapse=\"false\"}\n## Solution\n\n```r\nsales <- read_excel(\"sales.xlsx\")\nsales\n```\n\nNo, this is not a tidy data frame.\nThese data are read in with the text as a column name, and creates another column name called `...2`.\n:::\n:::\n\nSee the help file for `read_excel()` [here](https://www.rdocumentation.org/packages/readxl/versions/0.1.1/topics/read_excel).\nNotice that, in the current `sales` dataset, we want to skip 3 rows (the first row acts as a header for the column names).\nWe can do this using the `skip` argument.\nAt the same time, we can specify names for each column by giving the argument `col_names` a character vector.\nUse these arguments and add to the code below to skip 3 lines and name the columns `id` and `n`.\n\n\n\n::: {.cell exercise='ex_7'}\n```{webr}\n#| exercise: ex_7\n___\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_7\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 1\n\n```r\n___ <- read_excel(\n  \"sales.xlsx\",\n  ___,\n  ___\n)\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_7\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 2\n\n```r\n___ <- read_excel(\n  \"sales.xlsx\",\n  skip = 3,\n  ___\n)\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_7\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 3\n\n```r\n___ <- read_excel(\n  \"sales.xlsx\",\n  skip = 3,\n  col_names = c(\"id\", \"n\")\n)\n```\n:::\n:::\n\n::: { .solution exercise=\"ex_7\"}\n::: { .callout-tip collapse=\"false\"}\n## Solution\n\n```r\nsales <- read_excel(\n  \"sales.xlsx\",\n  skip = 3,\n  col_names = c(\"id\", \"n\")\n)\n\nsales\n```\n:::\n:::\n\n## Putting it all together\n\nManipulate the sales data such such that it looks like the following using functions you have learned from the `tidyverse` to transform data.\n\n![](images/sales-2.png){width=\"300\"}\n\n\n\n::: {.cell exercise='ex_8'}\n```{webr}\n#| exercise: ex_8\nread_excel(\n  \"sales.xlsx\", \n  skip = 3,\n  col_names = c(\"id\", \"n\")\n  ) |>\n  ___\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_8\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 1\n\n```r\nsales |>\n  mutate(\n    ___,\n    ___\n  ) |>\n  ___\n  ___\n  ___\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_8\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 2\n\n```r\nsales |>\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    ___\n  ) |>\n  ___\n  ___\n  ___\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_8\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 3\n\n```r\nsales |>\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    brand = if_else(is_brand_name, id, NA)\n  ) |>\n  ___\n  ___\n  ___\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_8\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 4\n\n```r\nsales |>\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    brand = if_else(is_brand_name, id, NA)\n  ) |>\n  fill(brand) |>\n  ___\n  ___\n```\n:::\n:::\n\n::: { .hint exercise=\"ex_8\"}\n::: { .callout-note collapse=\"false\"}\n## Hint 5\n\n```r\nsales |>\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    brand = if_else(is_brand_name, id, NA)\n  ) |>\n  fill(brand) |>\n  filter(!is_brand_name) |>\n  ___\n```\n:::\n:::\n\n::: { .solution exercise=\"ex_8\"}\n::: { .callout-tip collapse=\"false\"}\n## Solution\n\n```r\nsales |>\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    brand = if_else(is_brand_name, id, NA)\n  ) |>\n  fill(brand) |>\n  filter(!is_brand_name) |>\n  select(brand, id, n)\n\nsales\n```\n:::\n:::\n\n**Takeaway:** We should write code to manipulate data instead of opening Excel and editing the data in there because it leaves a transparent trail of any modifications done while manipulating the data.\nChanging data in Excel is neither reproducible nor reusable.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}