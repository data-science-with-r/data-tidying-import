---
title: "Importing data"
format: revealjs
---

# Reading rectangular data into R

## Reading delimited files

::: columns
::: {.column width="35%"}
![](images/readr-part-of-tidyverse.png)
:::

::: {.column width="35%"}
```{r}
#| message: false
library(tidyverse)
```

-   `read_csv()` - comma delimited files
-   `read_csv2()` - semicolon separated files (common in countries where , is used as the decimal place)
-   `read_tsv()` - tab delimited files
-   `read_delim()` - reads in files with any delimiter
-   `read_fwf()` - fixed width files
-   ...
:::
:::

## Reading Excel spreadsheets

::: columns
::: {.column width="35%"}
![](images/readxl.png)
:::

::: {.column width="35%"}
```{r}
#| message: false
library(readxl)
```

-   `read_excel()` - read xls or xlsx files
-   ...
:::
:::

# Reading and writing CSV files

## Reading data

```{r}
nobel <- read_csv(file = "data/nobel.csv")
```

## Reading data {.smaller}

```{r}
nobel
```

## Writing data

Write a file:

```{r}
#| cache: true
#| code-line-numbers: "|1-6|8"
df <- tribble(
  ~x, ~y,
  1,  "a",
  2,  "b",
  3,  "c"
)

write_csv(df, file = "data/df.csv")
```

## Reading data back

Read it back in to inspect:

```{r}
read_csv("data/df.csv")
```

## Suppressing messages

```{r}
#| echo: fenced
#| message: false
read_csv("data/df.csv")
```

# Variable names

## Data with bad names

```{r}
#| message: false
edibnb_bad_names <- read_csv("data/edibnb-bad-names.csv")
names(edibnb_bad_names)
```

. . .

...
but R doesn't allow spaces in variable names

```{r}
#| error: true
ggplot(
  edibnb_bad_names, 
  aes(x = Number of bathrooms, y = Price)
  ) +
  geom_point()
```

## Option 1 - Quote column names

```{r}
#| fig-width: 7
#| out-width: 60%
#| warning: false
ggplot(
  edibnb_bad_names, 
  aes(x = `Number of bathrooms`, y = Price)
  ) +
  geom_point()
```

## Option 2 - Define column names

```{r}
#| message: false
#| code-line-numbers: "|5|3-7"
edibnb_col_names <- read_csv(
  "data/edibnb-bad-names.csv",
  col_names = c(
    "id", "price", "neighbourhood", "accommodates", 
    "bathroom", "bedroom", "bed", "review_scores_rating", 
    "n_reviews", "url"
  )
)
```

. . .

```{r}
names(edibnb_col_names)
```

## Option 3 - Format column names to snake_case

```{r}
#| warning: false
library(janitor)

edibnb_clean_names <- read_csv("data/edibnb-bad-names.csv") |>
  janitor::clean_names()
```

. . .

```{r}
names(edibnb_clean_names)
```

# Variable types

## Variable types

::: task
Which type is `x`?
Why?
:::

::: columns
::: {.column width="30%"}
![](images/df-na.png)
:::

::: {.column .fragment width="40%"}
```{r}
#| message: false
read_csv("data/df-na.csv")
```
:::
:::

## Option 1. Explicit `NA`s

```{r}
#| label: explicit-nas
#| output: false
read_csv(
  "data/df-na.csv", 
  na = c("", "NA", ".", "9999", "Not applicable")
)
```

::: columns
::: {.column .fragment width="40%"}
```{r}
#| ref-label: explicit-nas
#| echo: false
#| message: false
```
:::

::: {.column width="30%"}
![](images/df-na.png)
:::
:::

## Option 2. Specify column types

```{r}
#| label: specify-col-types
#| output: false
read_csv(
  "data/df-na.csv", 
  col_types = list(col_double(), col_character(), col_character())
  )
```

::: columns
::: {.column .fragment width="40%"}
```{r}
#| ref-label: specify-col-types
#| echo: false
#| message: false
```
:::

::: {.column width="30%"}
![](images/df-na.png)
:::
:::

## Column types for `read_csv()` {.smaller}

| **type function** | **data type**                            |
|-------------------|------------------------------------------|
| `col_character()` | character                                |
| `col_date()`      | date                                     |
| `col_datetime()`  | POSIXct (date-time)                      |
| `col_double()`    | double (numeric)                         |
| `col_factor()`    | factor                                   |
| `col_guess()`     | let readr guess (default)                |
| `col_integer()`   | integer                                  |
| `col_logical()`   | logical                                  |
| `col_number()`    | numbers mixed with non-number characters |
| `col_numeric()`   | double or integer                        |
| `col_skip()`      | do not read                              |
| `col_time()`      | time                                     |

# Reading Excel spreadsheets

## Reading data {.smaller}

```{r}
nobel <- read_excel(path = "data/nobel.xlsx")
```

. . .

```{r}
nobel
```

## Spreadsheets with "bad" names

```{r}
edibnb_bad_names <- read_excel("data/edibnb-bad-names.xlsx")

names(edibnb_bad_names)
```

## Option 1. Define column names

```{r}
#| code-line-numbers: "|3-6"
edibnb_col_names <- read_excel(
  "data/edibnb-bad-names.xlsx",
  col_names = c(
    "id", "price", "neighbourhood", "accommodates", "bathroom", 
    "bedroom", "bed", "review_scores_rating", "n_reviews", "url"
  )
)

names(edibnb_col_names)
```

## Option 2. Format column names to snake_case

```{r}
#| warning: false
edibnb_clean_names <- read_excel("data/edibnb-bad-names.xlsx") |>
  janitor::clean_names()

names(edibnb_clean_names)
```

## Spreadsheets with `NA`s

```{r}
read_excel("data/df-na.xlsx")
```

## Option 1. Explicit `NA`s

```{r}
#| code-line-numbers: "|3"
read_excel(
  "data/df-na.xlsx", 
  na = c("", "NA", ".", "9999", "Not applicable")
)
```

## Option 2. Specify column types

```{r}
#| code-line-numbers: "3"
read_excel(
  "data/df-na.xlsx", 
  col_types = c("numeric", "text", "text")
  )
```

## Column types for `read_excel()` {.smaller}

| **type function** | **data type**              |
|-------------------|----------------------------|
| `"skip"`          | do not read                |
| `"guess"`         | let readxl guess (default) |
| `"logical"`       | logical                    |
| `"numeric"`       | numeric                    |
| `"date"`          | POSIXct (date-time)        |
| `"text"`          | character                  |
| `"list"`          | a list of length 1 vectors |

# Other types of data

## Other types of data

-   **googlesheets4:** Google Sheets
-   **arrow:** parquet files
-   **DBI**, along with a database specific backend (e.g. RMySQL, RSQLite, RPostgreSQL etc): allows you to run SQL queries against a database and return a data frame
-   **rvest**: web scraping
-   **haven**: SPSS, Stata, and SAS files
-   **jsonline**: JSON
-   **xml2**: xml
-   **httr**: web APIs
-   **sparklyr**: data loaded into spark
