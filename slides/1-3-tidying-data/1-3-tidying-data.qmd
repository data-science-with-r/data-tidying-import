---
title: "Tidying data"
format: revealjs
---

# Setup

## Task, goal, and tools

<br>

::: hand
{{< fa list-check >}} [have]{.hand-blue-medium} data organised in an unideal way for our analysis
:::

. . .

::: hand
{{< fa bullseye >}} [want]{.hand-pink-medium} to reorganize the data for our analysis
:::

. . .

::: hand
{{< fa screwdriver-wrench >}} [using]{.hand-yellow-medium} tools from the **tidyverse**
:::

```{r}
#| message: false
library(tidyverse)
```

## Data: Grocery store sales

```{r}
#| include: false
customers <- read_csv("data/customers.csv")
prices <- read_csv("data/prices.csv")
```

::::::: columns
:::: {.column width="35%"}
[have]{.hand-blue-medium}

::: medium
```{r}
#| echo: false
customers
```
:::
::::

:::: {.column .fragment width="35%"}
[want]{.hand-pink-medium}

::: medium
```{r}
#| echo: false
customers |>
  pivot_longer(
  cols = item_1:item_3, 
  names_to = "item_no", 
  values_to = "item"
)
```
:::
::::
:::::::

## Grammar of data tidying

:::::: columns
::: {.column width="30%"}
![](images/tidyr-part-of-tidyverse.png){fig-alt="tidyr is part of the tidyverse"}
:::

:::: {.column width="40%"}
The goal of **tidyr** is to help you tidy your data via

::: incremental
-   pivoting for going between wide and long data
-   splitting and combining character columns
-   nesting and unnesting columns
-   clarifying how `NA`s should be treated
:::
::::
::::::

# Pivoting data

## Pivoting

::::: columns
::: {.column width="40%"}
Not this...

![](images/pivot.gif){width="500"}
:::

::: {.column .fragment width="30%"}
but this!

![](images/tidyr-longer-wider.gif)
:::
:::::

## Wider vs. longer {.smaller}

::::: columns
::: {.column width="35%"}
[wider]{.hand-blue-medium} - more columns

```{r}
#| echo: false
customers
```
:::

::: {.column .fragment width="35%"}
[longer]{.hand-pink-medium} - more rows

```{r}
#| echo: false
customers |>
  pivot_longer(
  cols = item_1:item_3, 
  names_to = "item_no", 
  values_to = "item"
)
```
:::
:::::

# From wider to longer

## `pivot_longer()`

:::: columns
::: {.column width="60%"}
```{r}
#| eval: false
pivot_longer(
  data,
  cols, 
  names_to = "name", 
  values_to = "value"
  )
```
:::
::::

## `pivot_longer()`

:::: columns
::: {.column width="60%"}
```{r}
#| eval: false
#| code-line-numbers: "2"
pivot_longer(
  data, # <1>
  cols, 
  names_to = "name", 
  values_to = "value"
  )
```

1.  `data` (as usual)
:::
::::

## `pivot_longer()`

:::: columns
::: {.column width="60%"}
```{r}
#| eval: false
#| code-line-numbers: "3"
pivot_longer(
  data,   # <1>
  cols,   # <2>
  names_to = "name", 
  values_to = "value"
  )
```

1.  `data` (as usual)
2.  `cols`: Columns to pivot into longer format
:::
::::

## `pivot_longer()`

:::: columns
::: {.column width="60%"}
```{r}
#| eval: false
#| code-line-numbers: "4"
pivot_longer(
  data,   # <1>
  cols,   # <2>
  names_to = "name", # <3>
  values_to = "value"
  )
```

1.  `data` (as usual)
2.  `cols`: Columns to pivot into longer format
3.  `names_to`: Name of the column where column names of pivoted variables go (character string)
:::
::::

## `pivot_longer()`

:::: columns
::: {.column width="60%"}
```{r}
#| eval: false
#| code-line-numbers: "5"
pivot_longer(
  data,   # <1>
  cols,   # <2>
  names_to = "name", # <3>
  values_to = "value" # <4>
  )
```

1.  `data` (as usual)
2.  `cols`: Columns to pivot into longer format
3.  `names_to`: Name of the column where column names of pivoted variables go (character string)
4.  `values_to`: Name of the column where data in pivoted variables go (character string)
:::
::::

## `pivot_longer()` in context

:::: columns
::: {.column width="60%"}
```{r}
customers |>
  pivot_longer(
    cols = item_1:item_3,
    names_to = "item_no",
    values_to = "item"
  )
```
:::
::::

## `pivot_longer()` in context

:::: columns
::: {.column width="60%"}
```{r}
#| code-line-numbers: "3"
#| eval: false
customers |>
  pivot_longer(
    cols = item_1:item_3, #<1>
    names_to = "item_no",
    values_to = "item"
  )
```

1.  `cols` to pivot: `item_1` to `item_3`
:::
::::

## `pivot_longer()` in context

:::: columns
::: {.column width="60%"}
```{r}
#| code-line-numbers: "4"
#| eval: false
customers |>
  pivot_longer(
    cols = item_1:item_3, #<1>
    names_to = "item_no", #<2>
    values_to = "item"
  )
```

1.  `cols` to pivot: `item_1` to `item_3`
2.  Column `names_to` new column called `item_no`
:::
::::

## `pivot_longer()` in context

:::: columns
::: {.column width="60%"}
```{r}
#| code-line-numbers: "5"
#| eval: false
customers |>
  pivot_longer(
    cols = item_1:item_3, #<1>
    names_to = "item_no", #<2>
    values_to = "item"    #<3>
  )
```

1.  `cols` to pivot: `item_1` to `item_3`
2.  Column `names_to` new column called `item_no`
3.  `values_to` new column called `item`
:::
::::

## `pivot_longer()` in context

:::: columns
::: {.column width="60%"}
```{r}
customers |>
  pivot_longer(
    cols = item_1:item_3,
    names_to = "item_no",
    values_to = "item"
  )
```
:::
::::

## Dealing with `NA`s

:::: columns
::: {.column width="60%"}
```{r}
#| code-line-numbers: "|6"
customers |>
  pivot_longer(
    cols = item_1:item_3, #<1>
    names_to = "item_no", #<2>
    values_to = "item",   #<3>
    values_drop_na = TRUE #<4>
  )
```

1.  `cols` to pivot: `item_1` to `item_3`
2.  Column `names_to` new column called `item_no`
3.  `values_to` new column called `item`
4.  Drop rows that contain only `NA`s in the `values_to` column
:::
::::

## From customers to purchases

:::: columns
::: {.column width="50%"}
```{r}
purchases <- customers |>
  pivot_longer(
    cols = item_1:item_3,
    names_to = "item_no",
    values_to = "item",
    values_drop_na = TRUE
  )

purchases
```
:::
::::



## Why pivot?

Most likely, because the next step of your analysis needs it

. . .

:::::: medium
::::: columns
::: {.column width="35%"}
```{r}
prices
```
:::

::: {.column .fragment width="35%"}
```{r}
purchases |>
  left_join(prices)
```
:::
:::::
::::::

# From longer to wider

## From purchases to customers

:::: columns
::: {.column width="50%"}
```{r}
purchases |>
  pivot_wider(
    names_from = item_no,
    values_from = item
  )
```
:::
::::

## `pivot_wider()`

:::: columns
::: {.column width="60%"}
```{r}
#| eval: false
#| code-line-numbers: "1,2,5"
pivot_wider(
  data,   # <1>
  names_from = name,
  values_from = value
  )
```

1.  `data` (as usual)
:::
::::

## `pivot_wider()`

:::: columns
::: {.column width="60%"}
```{r}
#| eval: false
#| code-line-numbers: "1,3,5"
pivot_wider(
  data,   # <1>
  names_from = name, #<2>
  values_from = value
  )
```

1.  `data` (as usual)
2.  `names_from`: Which column(s) in the long format contains the what should be column names in the wide format
:::
::::

## `pivot_wider()`

:::: columns
::: {.column width="60%"}
```{r}
#| eval: false
#| code-line-numbers: "1,4,5"
pivot_wider(
  data,   # <1>
  names_from = name, # <2>
  values_from = value # <3>
  )
```

1.  `data` (as usual)
2.  `names_from`: Which column(s) in the long format contains the what should be column names in the wide format
3.  `values_from`: Which column(s) in the long format contains the what should be values in the new columns in the wide format
:::
::::

## Wider <-> longer

![](images/tidyr-longer-wider.gif)

## Additional arguments {.smaller}

:::: columns
::: {.column width="35%"}
[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html)
```{r}
#| eval: false
#| code-line-numbers: "|1,4-5,7-12,14-17"
pivot_longer(
  data,
  cols,
  ...,
  cols_vary = "fastest",
  names_to = "name",
  names_prefix = NULL,
  names_sep = NULL,
  names_pattern = NULL,
  names_ptypes = NULL,
  names_transform = NULL,
  names_repair = "check_unique",
  values_to = "value",
  values_drop_na = FALSE,
  values_ptypes = NULL,
  values_transform = NULL
)
```
:::

::: {.column width="35%"}
[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html)
```{r}
#| eval: false
#| code-line-numbers: "|1,3-5,7-13,15-18"
pivot_wider(
  data,
  ...,
  id_cols = NULL,
  id_expand = FALSE,
  names_from = name,
  names_prefix = "",
  names_sep = "_",
  names_glue = NULL,
  names_sort = FALSE,
  names_vary = "fastest",
  names_expand = FALSE,
  names_repair = "check_unique",
  values_from = value,
  values_fill = NULL,
  values_fn = NULL,
  unused_fn = NULL
)
```
:::
::::
