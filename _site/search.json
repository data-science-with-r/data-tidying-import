[
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html",
    "title": "Country populations over time",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization.\n\n\n\n\n\n\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nThese data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html#goal",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html#goal",
    "title": "Country populations over time",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization."
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html#packages",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html#packages",
    "title": "Country populations over time",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html#data",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html#data",
    "title": "Country populations over time",
    "section": "",
    "text": "These data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html#tidying",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html#tidying",
    "title": "Country populations over time",
    "section": "Tidying",
    "text": "Tidying\n\nWhat are the aesthetic mappings in the plot shown above, i.e., what pieces of information do we need represented as columns (variables) in our data frame in order to be able to recreate this plot?\n\nAdd response here.\n\nReshape the population data such that it can be used to recreate the plot above. Note: For now, you can keep all the countries in the dataset.\n\n\n# add code here\n\n\nWhat is the type of the year variable? Why? What should it be?\n\nAdd response here.\n\nStart over with pivoting, and this time also make sure year is a numerical variable in the resulting data frame. Save the resulting data frame as population_longer.\n\n\n# add code here"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html#visualization",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html#visualization",
    "title": "Country populations over time",
    "section": "Visualization",
    "text": "Visualization\n\nNow we start making our plot, but let’s not get too fancy right away. Create a line plot of populations of the United States, India, and China over the years. Represent the data with points and lines.\n\n\n# add code here\n\n\nWhat aspects of the plot need to be updated to go from the draft you created above to the goal plot at the beginning of this application exercise.\n\nAdd response here.\n\nUse different shapes for each country’s points.\n\n\n# add code here\n\n\nUpdate x-axis scale such that the years displayed go from 2000 to 2024 in increments of 4 years.\n\n\n# add code here\n\n\nUpdate the y-axis so it’s scaled to millions and uses the same breaks as the goal plot.\n\n\n# add code here\n\n\nUpdate colors for each country using the following level / color assignments.\n\n“United States” = “#0A3161”\n“India” = “#FF671F”\n“China” = “#EE1C25”\n\n\n\n# add code here\n\n\nUpdate the plot labels (title, subtitle, x, y, and caption) and use theme_minimal().\n\n\n# add code here\n\n\nFinally, move the legend to the top of the plot and remove its label.\n\n\n# add code here"
  },
  {
    "objectID": "code-alongs/2-1-thats-my-type/2-1-thats-my-type-complete.html",
    "href": "code-alongs/2-1-thats-my-type/2-1-thats-my-type-complete.html",
    "title": "That’s my type (Complete)",
    "section": "",
    "text": "In the following exercises, first guess what type the vector will be coerced to, then check your intuition with the typeof() function.\n\nc(1, 1L, \"C\")\n\n\nc(1, 1L, \"C\")\n\n[1] \"1\" \"1\" \"C\"\n\n\n\n1\n\n[1] 1\n\n1L\n\n[1] 1\n\n\"C\"\n\n[1] \"C\"\n\n\nGuess: ___\n\ntypeof(c(1, 1L, \"C\"))\n\n[1] \"character\"\n\n\n\nc(1L / 0, \"A\")\n\n\nc(1L / 0, \"A\")\n\n[1] \"Inf\" \"A\"  \n\n\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(0)\n\n[1] \"double\"\n\ntypeof(1L/0)\n\n[1] \"double\"\n\ntypeof(\"A\")\n\n[1] \"character\"\n\n\nGuess: ___\n\ntypeof(c(1L / 0, \"A\"))\n\n[1] \"character\"\n\n\n\nc(1:3, 5)\n\n\nc(1:3, 5)\n\n[1] 1 2 3 5\n\n\n\ntypeof(1:3)\n\n[1] \"integer\"\n\ntypeof(5)\n\n[1] \"double\"\n\n\nGuess: ___\n\ntypeof(c(1:3, 5))\n\n[1] \"double\"\n\n\n\nc(3, \"3+\")\n\n\nc(3, \"3+\")\n\n[1] \"3\"  \"3+\"\n\n\n\ntypeof(3)\n\n[1] \"double\"\n\ntypeof(\"3+\")\n\n[1] \"character\"\n\n\nGuess: ___\n\ntypeof(c(3, \"3+\"))\n\n[1] \"character\"\n\n\n\nc(NA, TRUE)\n\n\nc(NA, TRUE)\n\n[1]   NA TRUE\n\n\n\ntypeof(NA)\n\n[1] \"logical\"\n\ntypeof(TRUE)\n\n[1] \"logical\"\n\n\nGuess: ___\n\ntypeof(c(NA, TRUE))\n\n[1] \"logical\""
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations.html",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations.html",
    "title": "Continent populations",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to create a bar plot of total populations of continents, where the input data are:\n\nCountries and populations\nCountries and continents\n\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\n\n\nThese data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;\n\n\n\n\n\nThese data come from Our World in Data.\n\ncontinents &lt;- read_csv(\"https://data-science-with-r.github.io/data/continents.csv\")\n\nLet’s take a look at the data.\n\ncontinents\n\n# A tibble: 285 × 4\n   entity                code      year continent    \n   &lt;chr&gt;                 &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#packages",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#packages",
    "title": "Continent populations",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#data",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#data",
    "title": "Continent populations",
    "section": "",
    "text": "These data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;\n\n\n\n\n\nThese data come from Our World in Data.\n\ncontinents &lt;- read_csv(\"https://data-science-with-r.github.io/data/continents.csv\")\n\nLet’s take a look at the data.\n\ncontinents\n\n# A tibble: 285 × 4\n   entity                code      year continent    \n   &lt;chr&gt;                 &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#data-prep",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#data-prep",
    "title": "Continent populations",
    "section": "Data prep",
    "text": "Data prep\n\nFor this analysis we’ll focus on the latest available population numbers – 2023. Modify the population data frame to only include 2023 population numbers. Then, rename the column containing 2023 population numbers as population.\n\n\n# add code here\n\n\nWhich variable(s) will we use to join the population and continents data frames?\n\nAdd response here.\n\nWe want to create a new data frame that keeps all rows and columns from population and brings in the corresponding information from continents. Which join function should we use?\n\nAdd response here.\n\nJoin the two data frames and name assign the joined data frame to a new data frame population_continents.\n\n\n# add code here\n\n\nTake a look at the newly created population_continent data frame. There are some countries that were not in continents. First, identify which countries these are (they will have NA values for continent).\n\n\n# add code here\n\n\nAll of these countries are actually in the continents data frame, but under different names. So, let’s clean that data first by updating the country names in the population data frame in a way they will match the continents data frame, and then joining them, using a case_when() statement in mutate(). At the end, check that all countries now have continent information.\n\n\n# add code here\n\n\nWhich continent do you think has the highest population? Which do you think has the second highest? The lowest?\n\nAdd response here.\n\nCreate a new data frame called population_summary that contains a row for each continent and a column for the total population for that continent, in descending order of population. Note that the function for calculating totals in R is sum().\n\n\n# add code here"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#visualization",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#visualization",
    "title": "Continent populations",
    "section": "Visualization",
    "text": "Visualization\n\nMake a bar plot with total population on the y-axis and continent on the x-axis, where the height of each bar represents the total population in that continent.\n\n\n# add code here\n\n\nRecreate the following plot, which is commonly referred to as a lollipop plot. Hint: Start with the points, then try adding the segments, then add axis labels and caption, update the x scale.\n\n\n\n# add code here\n\n\nWhat additional improvements would you like to make to this plot.\n\nAdd response here."
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html",
    "title": "Halving CO2 emissions",
    "section": "",
    "text": "Visitors to Gapminder.org are welcomed with a question about common misconceptions. Here is one of them.\n\nOnce you make your selection, you are directed to a page that explains the right answer and shows a visualization of the distribution of responses from various countries.\n\nOur goal is to create a version of this visualization.\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nThe data we’re going to use is in a CSV file called co2-emissions.csv at https://data-science-with-r.github.io/data/co2-emissions.csv.\n\nco2_emissions &lt;- read_csv(\"https://data-science-with-r.github.io/data/co2-emissions.csv\")\n\nRows: 8 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): Very wrong, Wrong, Correct\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAnd let’s take a look at the data.\n\nco2_emissions\n\n# A tibble: 8 × 4\n  country        `Very wrong` Wrong Correct\n  &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Türkiye                  61    23      16\n2 Columbia                 64    16      20\n3 Sweden                   36    35      29\n4 Germany                  26    41      33\n5 United Kingdom           29    37      34\n6 United States            31    32      37\n7 Kenya                    46     8      46\n8 Pakistan                 37    13      50"
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html#packages",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html#packages",
    "title": "Halving CO2 emissions",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html#data",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html#data",
    "title": "Halving CO2 emissions",
    "section": "",
    "text": "The data we’re going to use is in a CSV file called co2-emissions.csv at https://data-science-with-r.github.io/data/co2-emissions.csv.\n\nco2_emissions &lt;- read_csv(\"https://data-science-with-r.github.io/data/co2-emissions.csv\")\n\nRows: 8 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): Very wrong, Wrong, Correct\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAnd let’s take a look at the data.\n\nco2_emissions\n\n# A tibble: 8 × 4\n  country        `Very wrong` Wrong Correct\n  &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Türkiye                  61    23      16\n2 Columbia                 64    16      20\n3 Sweden                   36    35      29\n4 Germany                  26    41      33\n5 United Kingdom           29    37      34\n6 United States            31    32      37\n7 Kenya                    46     8      46\n8 Pakistan                 37    13      50"
  },
  {
    "objectID": "exercises/nyc_flights.html",
    "href": "exercises/nyc_flights.html",
    "title": "Data tidying and importing",
    "section": "",
    "text": "Important\n\n\n\nPlease reference the webR-intro programming exercise for information and instructions on how to interact with the programming exercise below."
  },
  {
    "objectID": "exercises/nyc_flights.html#getting-started",
    "href": "exercises/nyc_flights.html#getting-started",
    "title": "Data tidying and importing",
    "section": "Getting started",
    "text": "Getting started\nIn this exercise, we will be exploring the flights data set, containing information about all flights that departed from NYC to destinations in the United States, Puerto Rico, and the American Virgin Island in 2013. A data key can be found below:\n\n\n\n\n\n\ndata key\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nyear\nyear of departure\n\n\nmonth\nmonth of departure\n\n\nday\nday of departure\n\n\ndep_time\ndeparture time\n\n\narr_time\narrival time\n\n\nsched_dep_time\nscheduled departure time\n\n\nsched_arr_time\nscheduled arrival time\n\n\ndep_delay\ndeparture delays in minutes. Negative times represent early departures in minutes\n\n\narr_delay\narrival delays in minutes. Negative times represent early arrivals in minutes\n\n\ncarrier\ntwo letter carrier abbreviation\n\n\ntailnum\nplane tail number\n\n\norgin\norigin\n\n\ndest\ndestination\n\n\nair_time\namount of time spent in the air in minutes\n\n\ndistance\ndistance between airports in miles\n\n\nhour\nthe hour of time scheduled departure\n\n\nminutes\nthe minutes of time of scheduled departure\n\n\ntime_hour\nscheduled date and hour of the flight as a POSIXct date.\n\n\n\n\n\n\n\nPackages\nWe’ll use: tidyverse for majority of the exploration. Section headers of this exercise refer to the function we will be practicing with. Each header is hyperlinked to their associated help file if you would like to further explore each function.\nThese data we are using are in the nycflights13 package. These are ready to use for you in this programming exercise!"
  },
  {
    "objectID": "exercises/nyc_flights.html#data-wrangling",
    "href": "exercises/nyc_flights.html#data-wrangling",
    "title": "Data tidying and importing",
    "section": "Data wrangling",
    "text": "Data wrangling\nData wrangling is the process of transforming or reshaping data into a form that is more suitable for analysis. In this exercise, we will practice with a variety of functions used to wrangle data.\nBefore we begin, use glimpse to report how many rows the flights data frame has. What does each row represent?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\nThere are 336,776 rows in the flights data set. Each observation represents a flight."
  },
  {
    "objectID": "exercises/nyc_flights.html#select",
    "href": "exercises/nyc_flights.html#select",
    "title": "Data tidying and importing",
    "section": "select()",
    "text": "select()\nThe function select() makes it easy to select variable(s) in your data set based on their name or position.\nUsing select(), make a data frame that only contains the variables dep_delay and arr_delay.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  select(dep_delay, arr_delay)\n\n# A tibble: 336,776 × 2\n   dep_delay arr_delay\n       &lt;dbl&gt;     &lt;dbl&gt;\n 1         2        11\n 2         4        20\n 3         2        33\n 4        -1       -18\n 5        -6       -25\n 6        -4        12\n 7        -5        19\n 8        -3       -14\n 9        -3        -8\n10        -2         8\n# ℹ 336,766 more rows\n\n\n\n\n\nMake a data frame that keeps every variable except dep_delay.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  select(-dep_delay)\n\n# A tibble: 336,776 × 18\n    year month   day dep_time sched_dep_time arr_time sched_arr_time arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;\n 1  2013     1     1      517            515      830            819        11\n 2  2013     1     1      533            529      850            830        20\n 3  2013     1     1      542            540      923            850        33\n 4  2013     1     1      544            545     1004           1022       -18\n 5  2013     1     1      554            600      812            837       -25\n 6  2013     1     1      554            558      740            728        12\n 7  2013     1     1      555            600      913            854        19\n 8  2013     1     1      557            600      709            723       -14\n 9  2013     1     1      557            600      838            846        -8\n10  2013     1     1      558            600      753            745         8\n# ℹ 336,766 more rows\n# ℹ 10 more variables: carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,\n#   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,\n#   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\nMake a data frame that includes all variables between year through dep_delay (inclusive). These are all variables that provide information about the departure of each flight.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  select(year:dep_delay)\n\n# A tibble: 336,776 × 6\n    year month   day dep_time sched_dep_time dep_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;\n 1  2013     1     1      517            515         2\n 2  2013     1     1      533            529         4\n 3  2013     1     1      542            540         2\n 4  2013     1     1      544            545        -1\n 5  2013     1     1      554            600        -6\n 6  2013     1     1      554            558        -4\n 7  2013     1     1      555            600        -5\n 8  2013     1     1      557            600        -3\n 9  2013     1     1      557            600        -3\n10  2013     1     1      558            600        -2\n# ℹ 336,766 more rows\n\n\n\n\n\nUse the select helper contains() to make a data frame that includes the variables associated with the arrival, i.e., contains the string arr_ in the name.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  select(contains(\"arr_\"))\n\n# A tibble: 336,776 × 3\n   arr_time sched_arr_time arr_delay\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;\n 1      830            819        11\n 2      850            830        20\n 3      923            850        33\n 4     1004           1022       -18\n 5      812            837       -25\n 6      740            728        12\n 7      913            854        19\n 8      709            723       -14\n 9      838            846        -8\n10      753            745         8\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "exercises/nyc_flights.html#slice",
    "href": "exercises/nyc_flights.html#slice",
    "title": "Data tidying and importing",
    "section": "slice()",
    "text": "slice()\nThe function slice() lets you index rows by their name or (integer) locations. Other common uses of slice() include selecting and removing rows.\nDisplay the first five rows of the flights data frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  slice(1:5)\n\n# A tibble: 5 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\nWe can use the function n()to reference the total number of rows in a data frame. Using this with slice, display the last two rows of the flights data frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  slice((n()-1):n())\n\n# A tibble: 2 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     9    30       NA           1159        NA       NA           1344\n2  2013     9    30       NA            840        NA       NA           1020\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "exercises/nyc_flights.html#arrange",
    "href": "exercises/nyc_flights.html#arrange",
    "title": "Data tidying and importing",
    "section": "arrange()",
    "text": "arrange()\nWe can use arrange() to order rows of a data frame by the values of selected columns.\nLet’s arrange the data by dep_delay, so the flights with the shortest departure delays will be at the top of the data frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  arrange(dep_delay)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013    12     7     2040           2123       -43       40           2352\n 2  2013     2     3     2022           2055       -33     2240           2338\n 3  2013    11    10     1408           1440       -32     1549           1559\n 4  2013     1    11     1900           1930       -30     2233           2243\n 5  2013     1    29     1703           1730       -27     1947           1957\n 6  2013     8     9      729            755       -26     1002            955\n 7  2013    10    23     1907           1932       -25     2143           2143\n 8  2013     3    30     2030           2055       -25     2213           2250\n 9  2013     3     2     1431           1455       -24     1601           1631\n10  2013     5     5      934            958       -24     1225           1309\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\nWe can use the helper desc() to arrange the the data by descending departure delay. Do so below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "exercises/nyc_flights.html#filter",
    "href": "exercises/nyc_flights.html#filter",
    "title": "Data tidying and importing",
    "section": "filter()",
    "text": "filter()\nThe function filter() is used to subset a data frame, retaining all rows that satisfy your conditions.\nFilter the data frame by selecting the rows where the destination airport is RDU.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  filter(dest == \"RDU\")\n\n# A tibble: 8,163 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1240           1235         5     1415           1415\n 9  2013     1     1     1317           1325        -8     1454           1505\n10  2013     1     1     1449           1450        -1     1651           1640\n# ℹ 8,153 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\nWe can also filter using more than one condition. Here we select all rows where the destination airport is RDU and the arrival delay is less than 0.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  filter(dest == \"RDU\", arr_delay &lt; 0)\n\n# A tibble: 4,232 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1317           1325        -8     1454           1505\n 9  2013     1     1     1505           1510        -5     1654           1655\n10  2013     1     1     1800           1800         0     1945           1951\n# ℹ 4,222 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\nDescribe what the code is doing in words.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe are piping the flights data set into the function filter, where we want to keep all rows where destination has the value of RDU or GSO, and where arrival delay is less than 0 or departure delay is less than 0.\n\n\n\n\n\n\n\n\n\nmore operators\n\n\n\n\n\n\n\n\n\n\n\n\noperator\ndefinition\n\n\n\n\n&lt;\nis less than?\n\n\n&lt;=\nis less than or equal to?\n\n\n&gt;\nis greater than?\n\n\n&gt;=\nis greater than or equal to?\n\n\n==\nis exactly equal to?\n\n\n!=\nis not equal to?\n\n\nx & y\nis x AND y?\n\n\nx \\| y\nis x OR y?\n\n\nis.na(x)\nis x NA?\n\n\n!is.na(x)\nis x not NA?\n\n\nx %in% y\nis x in y?\n\n\n!(x %in% y)\nis x not in y?\n\n\n!x\nis not x? (only makes sense if x is TRUE or FALSE)"
  },
  {
    "objectID": "exercises/nyc_flights.html#count",
    "href": "exercises/nyc_flights.html#count",
    "title": "Data tidying and importing",
    "section": "count()",
    "text": "count()\nWe can use the function count() to create frequency tables of selected variables.\nCreate a frequency table of the destination locations for flights from New York.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  count(dest)\n\n# A tibble: 105 × 2\n   dest      n\n   &lt;chr&gt; &lt;int&gt;\n 1 ABQ     254\n 2 ACK     265\n 3 ALB     439\n 4 ANC       8\n 5 ATL   17215\n 6 AUS    2439\n 7 AVL     275\n 8 BDL     443\n 9 BGR     375\n10 BHM     297\n# ℹ 95 more rows\n\n\n\n\n\nIn which month was there the fewest number of flights? How many flights were there in that month?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  count(month) |&gt;\n  filter(n == min(n))\n\n# A tibble: 1 × 2\n  month     n\n  &lt;int&gt; &lt;int&gt;\n1     2 24951\n\n\n\n\n\nOn which date (month + day) was there the largest number of flights? How many flights were there on that day?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  count(month, day) |&gt;\n  filter(n == max(n))\n\n# A tibble: 1 × 3\n  month   day     n\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1    11    27  1014"
  },
  {
    "objectID": "exercises/nyc_flights.html#mutate",
    "href": "exercises/nyc_flights.html#mutate",
    "title": "Data tidying and importing",
    "section": "mutate()",
    "text": "mutate()\nWe can use the function mutate() to create new columns or modify existing columns in your data set.\nConvert air_time (minutes in the air) to hours and then create a new variable, mph, the miles per hour of the flight\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  mutate(\n    hours = air_time / 60,\n    mph = distance / hours\n    ) |&gt;\n  select(air_time, distance, hours, mph)\n\n# A tibble: 336,776 × 4\n   air_time distance hours   mph\n      &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1      227     1400 3.78   370.\n 2      227     1416 3.78   374.\n 3      160     1089 2.67   408.\n 4      183     1576 3.05   517.\n 5      116      762 1.93   394.\n 6      150      719 2.5    288.\n 7      158     1065 2.63   404.\n 8       53      229 0.883  259.\n 9      140      944 2.33   405.\n10      138      733 2.3    319.\n# ℹ 336,766 more rows\n\n\n\n\n\nCreate a new variable, rdu_bound, which indicates whether the flight is to RDU or not. Then, for each departure airport (origin), calculate what proportion of flights originating from that airport are to RDU.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  mutate(rdu_bound = if_else(dest == \"RDU\", \"Yes\", \"No\")) |&gt;\n  count(origin, rdu_bound) |&gt;\n  group_by(origin) |&gt;\n  mutate(prop = n / sum(n)) |&gt;\n  filter(rdu_bound == \"Yes\")\n\n# A tibble: 3 × 4\n# Groups:   origin [3]\n  origin rdu_bound     n   prop\n  &lt;chr&gt;  &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n1 EWR    Yes        1482 0.0123\n2 JFK    Yes        3100 0.0279\n3 LGA    Yes        3581 0.0342"
  },
  {
    "objectID": "exercises/nyc_flights.html#summarize-group_by",
    "href": "exercises/nyc_flights.html#summarize-group_by",
    "title": "Data tidying and importing",
    "section": "summarize() & group_by()",
    "text": "summarize() & group_by()\nWe can use the function summarize() to calculate summary statistics for a selected column. summarize() is often accompanied with group_by(), which converts a data frame into a grouped tbl where operations (like summarize()) are performed for each group.\nFind mean arrival delay for all flights.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  summarize(mean_dep_delay = mean(dep_delay))\n\n# A tibble: 1 × 1\n  mean_dep_delay\n           &lt;dbl&gt;\n1             NA\n\n\n\n\n\nFind mean arrival delay for for each month.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  group_by(month) |&gt;\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE))\n\n# A tibble: 12 × 2\n   month mean_arr_delay\n   &lt;int&gt;          &lt;dbl&gt;\n 1     1          6.13 \n 2     2          5.61 \n 3     3          5.81 \n 4     4         11.2  \n 5     5          3.52 \n 6     6         16.5  \n 7     7         16.7  \n 8     8          6.04 \n 9     9         -4.02 \n10    10         -0.167\n11    11          0.461\n12    12         14.9"
  },
  {
    "objectID": "exercises/nyc_flights.html#additional-practice",
    "href": "exercises/nyc_flights.html#additional-practice",
    "title": "Data tidying and importing",
    "section": "Additional Practice",
    "text": "Additional Practice\nCreate a data frame that only includes the plane tail number (tailnum), carrier (carrier), and departure delay for the flight with the longest departure delay. What is the plane tail number (tailnum) for this flight?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  select(tailnum, carrier, dep_delay) %&gt;%\n  arrange(dep_delay) |&gt;\n  slice(1)\n\n# A tibble: 1 × 3\n  tailnum carrier dep_delay\n  &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt;\n1 N592JB  B6            -43\n\n\n\n\n\nOn which date (month + day) was there the largest number of flights? How many flights were there on that day?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  count(month, day) |&gt;\n  filter(n == max(n))\n\n# A tibble: 1 × 3\n  month   day     n\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1    11    27  1014\n\n\n\n\n\nCreate a new variable to calculate the percentage of flights in each month. What percentage of flights take place in July?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  count(month) |&gt;\n  mutate(perc = n / sum(n) * 100)\n\n# A tibble: 12 × 3\n   month     n  perc\n   &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1     1 27004  8.02\n 2     2 24951  7.41\n 3     3 28834  8.56\n 4     4 28330  8.41\n 5     5 28796  8.55\n 6     6 28243  8.39\n 7     7 29425  8.74\n 8     8 29327  8.71\n 9     9 27574  8.19\n10    10 28889  8.58\n11    11 27268  8.10\n12    12 28135  8.35\n\n\n\n\n\nWhat is the median departure delay for each airports around NYC (origin)? Which airport has the shortest median departure delay?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  group_by(origin) |&gt;\n  summarize(med_dep_delay = median(dep_delay, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  origin med_dep_delay\n  &lt;chr&gt;          &lt;dbl&gt;\n1 EWR               -1\n2 JFK               -1\n3 LGA               -3\n\n\n\n\n\nCreate a new dataset that only contains flights that do not have a missing departure time. Include the columns year, month, day, dep_time, dep_delay, and dep_delay_hours (the departure delay in hours). Hint: Note you may need to use mutate() to make one or more of these variables.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights |&gt;\n  filter(!is.na(dep_time)) |&gt;\n  select(year, month, day, dep_time, dep_delay) |&gt;\n  mutate(dep_delay_hours = dep_delay / 60)\n\n# A tibble: 328,521 × 6\n    year month   day dep_time dep_delay dep_delay_hours\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;dbl&gt;           &lt;dbl&gt;\n 1  2013     1     1      517         2          0.0333\n 2  2013     1     1      533         4          0.0667\n 3  2013     1     1      542         2          0.0333\n 4  2013     1     1      544        -1         -0.0167\n 5  2013     1     1      554        -6         -0.1   \n 6  2013     1     1      554        -4         -0.0667\n 7  2013     1     1      555        -5         -0.0833\n 8  2013     1     1      557        -3         -0.05  \n 9  2013     1     1      557        -3         -0.05  \n10  2013     1     1      558        -2         -0.0333\n# ℹ 328,511 more rows"
  },
  {
    "objectID": "exercises/nyc_flights.html#reflection-questions",
    "href": "exercises/nyc_flights.html#reflection-questions",
    "title": "Data tidying and importing",
    "section": "Reflection questions",
    "text": "Reflection questions\n\nWhy do you believe we are studying the content above?\n\n\n\n\n\nList three topics that you feel very confident about from the content above.\n\n\n\n\n\nList three topics that you feel could use more practice (or you are more curious about) from the content above."
  },
  {
    "objectID": "exercises/noble.html",
    "href": "exercises/noble.html",
    "title": "Nobel Prize winners & sales data",
    "section": "",
    "text": "We will use the following two packages in this application exercise.\n\ntidyverse: For data import, wrangling, and visualization.\nreadxl: For importing data from Excel."
  },
  {
    "objectID": "exercises/noble.html#packages",
    "href": "exercises/noble.html#packages",
    "title": "Nobel Prize winners & sales data",
    "section": "",
    "text": "We will use the following two packages in this application exercise.\n\ntidyverse: For data import, wrangling, and visualization.\nreadxl: For importing data from Excel."
  },
  {
    "objectID": "exercises/noble.html#nobel-prize-winners",
    "href": "exercises/noble.html#nobel-prize-winners",
    "title": "Nobel Prize winners & sales data",
    "section": "Nobel Prize winners",
    "text": "Nobel Prize winners\nFor this exercise, we are going to work with a Nobel Prize winners dataset from the years 1901 through 2018. Please read in the following data below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBased on the tibble output, what are the number of rows and columns of the nobel dataset? What types of variables are you working with?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThere are 935 rows and 26 columns in nobel dataset.\nThere are 21 character variables, 3 dbl variables, and 2 date variables\n\n\n\nNow, rerun the code above to read in the dataset, but use the argument show_col_types = FALSE to suppress the given dataset information\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nnobel &lt;- read_csv(\"nobel.csv\", show_col_types = FALSE)\n\nNotice that there is no given message when running the code. This code simply loads the dataset."
  },
  {
    "objectID": "exercises/noble.html#type-coercion",
    "href": "exercises/noble.html#type-coercion",
    "title": "Nobel Prize winners & sales data",
    "section": "Type coercion",
    "text": "Type coercion\nWe are going to use the nobel dataset to explore type coercion. Using glimpse(), identify what type of variable gender is in this dataset. Additionally, identify the levels of this variable.\n\n# add response here\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nglimpse(nobel)\n\nRows: 935\nColumns: 26\n$ id                    &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 6, 8, 9, 10, 11, 12, 13, 14, 1…\n$ firstname             &lt;chr&gt; \"Wilhelm Conrad\", \"Hendrik A.\", \"Pieter\", \"Henri…\n$ surname               &lt;chr&gt; \"Röntgen\", \"Lorentz\", \"Zeeman\", \"Becquerel\", \"Cu…\n$ year                  &lt;dbl&gt; 1901, 1902, 1902, 1903, 1903, 1903, 1911, 1904, …\n$ category              &lt;chr&gt; \"Physics\", \"Physics\", \"Physics\", \"Physics\", \"Phy…\n$ affiliation           &lt;chr&gt; \"Munich University\", \"Leiden University\", \"Amste…\n$ city                  &lt;chr&gt; \"Munich\", \"Leiden\", \"Amsterdam\", \"Paris\", \"Paris…\n$ country               &lt;chr&gt; \"Germany\", \"Netherlands\", \"Netherlands\", \"France…\n$ born_date             &lt;date&gt; 1845-03-27, 1853-07-18, 1865-05-25, 1852-12-15,…\n$ died_date             &lt;date&gt; 1923-02-10, 1928-02-04, 1943-10-09, 1908-08-25,…\n$ gender                &lt;chr&gt; \"male\", \"male\", \"male\", \"male\", \"male\", \"female\"…\n$ born_city             &lt;chr&gt; \"Remscheid\", \"Arnhem\", \"Zonnemaire\", \"Paris\", \"P…\n$ born_country          &lt;chr&gt; \"Germany\", \"Netherlands\", \"Netherlands\", \"France…\n$ born_country_code     &lt;chr&gt; \"DE\", \"NL\", \"NL\", \"FR\", \"FR\", \"PL\", \"PL\", \"GB\", …\n$ died_city             &lt;chr&gt; \"Munich\", NA, \"Amsterdam\", NA, \"Paris\", \"Sallanc…\n$ died_country          &lt;chr&gt; \"Germany\", \"Netherlands\", \"Netherlands\", \"France…\n$ died_country_code     &lt;chr&gt; \"DE\", \"NL\", \"NL\", \"FR\", \"FR\", \"FR\", \"FR\", \"GB\", …\n$ overall_motivation    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ share                 &lt;dbl&gt; 1, 2, 2, 2, 4, 4, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, …\n$ motivation            &lt;chr&gt; \"\\\"in recognition of the extraordinary services …\n$ born_country_original &lt;chr&gt; \"Prussia (now Germany)\", \"the Netherlands\", \"the…\n$ born_city_original    &lt;chr&gt; \"Lennep (now Remscheid)\", \"Arnhem\", \"Zonnemaire\"…\n$ died_country_original &lt;chr&gt; \"Germany\", \"the Netherlands\", \"the Netherlands\",…\n$ died_city_original    &lt;chr&gt; \"Munich\", NA, \"Amsterdam\", NA, \"Paris\", \"Sallanc…\n$ city_original         &lt;chr&gt; \"Munich\", \"Leiden\", \"Amsterdam\", \"Paris\", \"Paris…\n$ country_original      &lt;chr&gt; \"Germany\", \"the Netherlands\", \"the Netherlands\",…\n\nnobel |&gt;\n  group_by(gender) |&gt;\n  count(gender)\n\n# A tibble: 3 × 2\n# Groups:   gender [3]\n  gender     n\n  &lt;chr&gt;  &lt;int&gt;\n1 female    52\n2 male     856\n3 org       27\n\n\ngender is a character variable. This variable has three different genders: male, female, and org.\n\n\n\nSuppose we want to turn the three listed genders into numeric values. Run the following code. What happened?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWhen trying to change male, female and org into numbers from characters, each value became an NA.\n\n\n\nIf we want the function as.numeric() to coerce these values into numbers, we need to change them to be a factor first. Run the following code, and compare the results. What values were assigned to which group? How do you think R determined this?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nR assigned male = 2; female = 1; and org = 3. These were assigned alpha-numerically.\n\n\n\nNote, that you can also avoid type coercion by manually setting values (see example code below).\n\nnobel |&gt;\n  mutate(gender_num = case_when(\n    gender == \"female\" ~ 1,\n    gender == \"male\" ~ 2,\n    gender == \"org\" ~ 3\n  )) |&gt;\n  select(gender, gender_num) |&gt;\n  unique()\n\n# A tibble: 3 × 2\n  gender gender_num\n  &lt;chr&gt;       &lt;dbl&gt;\n1 male            2\n2 female          1\n3 org             3\n\n\nSuppose you wanted to make this change to the nobel dataset, and export a new csv to your current working directory on your local installment. This can be accomplished using write_csv(). See the help file here."
  },
  {
    "objectID": "exercises/noble.html#sales",
    "href": "exercises/noble.html#sales",
    "title": "Nobel Prize winners & sales data",
    "section": "Sales",
    "text": "Sales\nFor the remaining part of this exercise, we are going to learn how to read in and clean up data that come from excel. The messy data that we are going to work with can be seen in below.\n\n\n\n\n\nWe are going to use read_excel() to read in a xlsx excel file. Read in the file and take a glimpse of these data. Why can we not work with these data in their current form?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThese data are not tidy. These data are read in with the text as a column name, and creates another column name called ...2.\n\n\n\nSee the help file for read_excel() here. Notice that, in the current sales dataset, we want to skip 3 rows (the first row acts as a header for the column names). We can do this using the skip argument. At the same time, we can specify names for each column by giving the argument col_names a character vector. Use these arguments and add to the code below to skip 3 lines and name the columns id and n.\nsales &lt;- read_excel(\n  \"sales.xlsx\", \n# add code here\n)\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nsales &lt;- read_excel(\n  \"sales.xlsx\",\n  skip = 3,\n  col_names = c(\"id\", \"n\")\n)\n\nsales"
  },
  {
    "objectID": "exercises/noble.html#putting-it-all-together",
    "href": "exercises/noble.html#putting-it-all-together",
    "title": "Nobel Prize winners & sales data",
    "section": "Putting it all together",
    "text": "Putting it all together\nManipulate the sales data such such that it looks like the following using functions you have learned from the tidyverse to transform data.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nsales |&gt;\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    brand = if_else(is_brand_name, id, NA)\n  ) |&gt;\n  fill(brand) |&gt;\n  filter(!is_brand_name) |&gt;\n  select(brand, id, n)\n\n# A tibble: 7 × 3\n  brand   id    n    \n  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;\n1 Brand 1 1234  8    \n2 Brand 1 8721  2    \n3 Brand 1 1822  3    \n4 Brand 2 3333  1    \n5 Brand 2 2156  3    \n6 Brand 2 3987  6    \n7 Brand 2 3216  5    \n\n\n\n\n\nTakeaway We should write code to manipulate data instead of opening Excel and editing the data in there because it allows us to re-use the data multiple times, and leaves a transparent trail of any modifications done while manipulating the data. Changing data in Excel is neither reproducible nor reusable."
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#data-classes-1",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#data-classes-1",
    "title": "Data classes",
    "section": "Data classes",
    "text": "Data classes\nWe talked about types so far, next we’ll introduce the concept of classes\n\n\nVectors are like Lego building blocks\nWe stick them together to build more complicated constructs, e.g. representations of data\n\nThe class attribute relates to the S3 class of an object which determines its behaviour\n\nYou don’t need to worry about what S3 classes really mean, but you can read more about it here if you’re curious\n\n\nExamples: factors, dates, and data frames"
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#factors",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#factors",
    "title": "Data classes",
    "section": "Factors",
    "text": "Factors\nR uses factors to handle categorical variables, variables that have a fixed and known set of possible values\n\nx &lt;- factor(c(\"BS\", \"MS\", \"PhD\", \"MS\"))\nx\n\n[1] BS  MS  PhD MS \nLevels: BS MS PhD\n\n\n\n\n\ntypeof(x)\n\n[1] \"integer\"\n\n\n\n\nclass(x)\n\n[1] \"factor\""
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#more-on-factors",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#more-on-factors",
    "title": "Data classes",
    "section": "More on factors",
    "text": "More on factors\nWe can think of factors like character (level labels) and an integer (level numbers) glued together\n\nglimpse(x)\n\n Factor w/ 3 levels \"BS\",\"MS\",\"PhD\": 1 2 3 2\n\nas.integer(x)\n\n[1] 1 2 3 2"
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#dates",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#dates",
    "title": "Data classes",
    "section": "Dates",
    "text": "Dates\n\ny &lt;- as.Date(\"2025-01-01\")\ny\n\n[1] \"2025-01-01\"\n\ntypeof(y)\n\n[1] \"double\"\n\nclass(y)\n\n[1] \"Date\""
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#more-on-dates",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#more-on-dates",
    "title": "Data classes",
    "section": "More on dates",
    "text": "More on dates\nWe can think of dates like an integer (the number of days since the origin, 1 Jan 1970) and an integer (the origin) glued together\n\nas.integer(y)\n\n[1] 20089\n\nas.integer(y) / 365 # roughly 55 yrs\n\n[1] 55.03836"
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#data-frames",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#data-frames",
    "title": "Data classes",
    "section": "Data frames",
    "text": "Data frames\nWe can think of data frames like like vectors of equal length glued together\n\ndf &lt;- data.frame(x = 1:2, y = 3:4)\ndf\n\n  x y\n1 1 3\n2 2 4\n\n\n\n\n\ntypeof(df)\n\n[1] \"list\"\n\n\n\n\nclass(df)\n\n[1] \"data.frame\""
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#lists",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#lists",
    "title": "Data classes",
    "section": "Lists",
    "text": "Lists\nLists are a generic vector container; vectors of any type can go in them\n\nl &lt;- list(\n  x = 1:4,\n  y = c(\"hi\", \"hello\", \"jello\"),\n  z = c(TRUE, FALSE)\n)\nl\n\n$x\n[1] 1 2 3 4\n\n$y\n[1] \"hi\"    \"hello\" \"jello\"\n\n$z\n[1]  TRUE FALSE"
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#lists-and-data-frames",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#lists-and-data-frames",
    "title": "Data classes",
    "section": "Lists and data frames",
    "text": "Lists and data frames\n\nA data frame is a special list containing vectors of equal length\nWhen we use the pull() function, we extract a vector from the data frame\n\n\ndf\n\n  x y\n1 1 3\n2 2 4\n\ndf |&gt;\n  pull(y)\n\n[1] 3 4"
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#read-data-in-as-character-strings",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#read-data-in-as-character-strings",
    "title": "Data classes",
    "section": "Read data in as character strings",
    "text": "Read data in as character strings\n\nhandedness &lt;- read_csv(\"data/handedness.csv\")\nglimpse(handedness)\n\nRows: 60\nColumns: 2\n$ name       &lt;chr&gt; \"Abdiel Camacho\", \"Abram Sanders\", \"Ady…\n$ preference &lt;chr&gt; \"left\", \"ambidextrous\", \"right\", \"right…"
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#but-coerce-when-plotting",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#but-coerce-when-plotting",
    "title": "Data classes",
    "section": "But coerce when plotting",
    "text": "But coerce when plotting\n\nggplot(handedness, mapping = aes(x = preference)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#use-forcats-to-manipulate-factors",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#use-forcats-to-manipulate-factors",
    "title": "Data classes",
    "section": "Use forcats to manipulate factors",
    "text": "Use forcats to manipulate factors\n\nhandedness |&gt;\n  mutate(preference = fct_infreq(preference)) |&gt;\n  ggplot(mapping = aes(x = preference)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/2-2-data-classes/2-2-data-classes.html#come-for-the-functionality",
    "href": "slides/2-2-data-classes/2-2-data-classes.html#come-for-the-functionality",
    "title": "Data classes",
    "section": "Come for the functionality",
    "text": "Come for the functionality\n\n\n… stay for the logo\n\n\n\n\nThe forcats package provides a suite of useful tools that solve common problems with factors\nFactors are useful when you have true categorical data and you want to override the ordering of character vectors to improve display\nThey are also useful in modeling scenarios"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#task-goal-and-tools",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#task-goal-and-tools",
    "title": "Joining data",
    "section": "Task, goal, and tools",
    "text": "Task, goal, and tools\n\n\n have multiple data frames\n\n\n\n want to join them together\n\n\n\n\n using tools from the tidyverse\n\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#data-women-in-science",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#data-women-in-science",
    "title": "Joining data",
    "section": "Data: Women in science",
    "text": "Data: Women in science\nInformation on 10 women in science who changed the world:\n\n\n\n\n\n\nname\n\n\n\nAda Lovelace\n\n\nMarie Curie\n\n\nJanaki Ammal\n\n\nChien-Shiung Wu\n\n\nKatherine Johnson\n\n\nRosalind Franklin\n\n\nVera Rubin\n\n\nGladys West\n\n\nFlossie Wong-Staal\n\n\nJennifer Doudna\n\n\n\n\n\n\n\n\nSource: Discover Magazine"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#input-1-professions",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#input-1-professions",
    "title": "Joining data",
    "section": "Input 1: professions\n",
    "text": "Input 1: professions\n\n\nprofessions\n\n# A tibble: 10 × 2\n   name               profession                        \n   &lt;chr&gt;              &lt;chr&gt;                             \n 1 Ada Lovelace       Mathematician                     \n 2 Marie Curie        Physicist and Chemist             \n 3 Janaki Ammal       Botanist                          \n 4 Chien-Shiung Wu    Physicist                         \n 5 Katherine Johnson  Mathematician                     \n 6 Rosalind Franklin  Chemist                           \n 7 Vera Rubin         Astronomer                        \n 8 Gladys West        Mathematician                     \n 9 Flossie Wong-Staal Virologist and Molecular Biologist\n10 Jennifer Doudna    Biochemist"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#input-2-dates",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#input-2-dates",
    "title": "Joining data",
    "section": "Input 2: dates\n",
    "text": "Input 2: dates\n\n\ndates\n\n# A tibble: 8 × 3\n  name               birth_year death_year\n  &lt;chr&gt;                   &lt;dbl&gt;      &lt;dbl&gt;\n1 Janaki Ammal             1897       1984\n2 Chien-Shiung Wu          1912       1997\n3 Katherine Johnson        1918       2020\n4 Rosalind Franklin        1920       1958\n5 Vera Rubin               1928       2016\n6 Gladys West              1930         NA\n7 Flossie Wong-Staal       1947       2020\n8 Jennifer Doudna          1964         NA"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#input-3-works",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#input-3-works",
    "title": "Joining data",
    "section": "Input 3: works\n",
    "text": "Input 3: works\n\n\nworks\n\n# A tibble: 9 × 2\n  name               known_for                              \n  &lt;chr&gt;              &lt;chr&gt;                                  \n1 Ada Lovelace       first computer algorithm               \n2 Marie Curie        theory of radioactivity,  discovery of…\n3 Janaki Ammal       hybrid species, biodiversity protection\n4 Chien-Shiung Wu    confim and refine theory of radioactiv…\n5 Katherine Johnson  calculations of orbital mechanics crit…\n6 Vera Rubin         existence of dark matter               \n7 Gladys West        mathematical modeling of the shape of …\n8 Flossie Wong-Staal first scientist to clone HIV and creat…\n9 Jennifer Doudna    one of the primary developers of CRISP…"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#desired-output",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#desired-output",
    "title": "Joining data",
    "section": "Desired output",
    "text": "Desired output\n\n\n# A tibble: 10 × 5\n   name           profession birth_year death_year known_for\n   &lt;chr&gt;          &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;    \n 1 Ada Lovelace   Mathemati…         NA         NA first co…\n 2 Marie Curie    Physicist…         NA         NA theory o…\n 3 Janaki Ammal   Botanist         1897       1984 hybrid s…\n 4 Chien-Shiung … Physicist        1912       1997 confim a…\n 5 Katherine Joh… Mathemati…       1918       2020 calculat…\n 6 Rosalind Fran… Chemist          1920       1958 &lt;NA&gt;     \n 7 Vera Rubin     Astronomer       1928       2016 existenc…\n 8 Gladys West    Mathemati…       1930         NA mathemat…\n 9 Flossie Wong-… Virologis…       1947       2020 first sc…\n10 Jennifer Doud… Biochemist       1964         NA one of t…"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#inputs-reminder",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#inputs-reminder",
    "title": "Joining data",
    "section": "Inputs, reminder",
    "text": "Inputs, reminder\n\nnames(professions)\n\n[1] \"name\"       \"profession\"\n\nnrow(professions)\n\n[1] 10\n\n\n\n\nnames(dates)\n\n[1] \"name\"       \"birth_year\" \"death_year\"\n\nnrow(dates)\n\n[1] 8\n\n\n\n\n\nnames(works)\n\n[1] \"name\"      \"known_for\"\n\nnrow(works)\n\n[1] 9"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#joining-data-frames-1",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#joining-data-frames-1",
    "title": "Joining data",
    "section": "Joining data frames",
    "text": "Joining data frames\n\nsomething_join(x, y)\n\n\n\nleft_join(): all rows from x\n\nright_join(): all rows from y\n\nfull_join(): all rows from both x and y\n\nsemi_join(): all rows from x where there are matching values in y, keeping just columns from x\n\ninner_join(): all rows from x where there are matching values in y, return all combination of multiple matches in the case of multiple matches\n\nanti_join(): return all rows from x where there are not matching values in y, never duplicate rows of x\n…"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#setup-1",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#setup-1",
    "title": "Joining data",
    "section": "Setup",
    "text": "Setup\nFor the next few slides…\n\n\n\nx &lt;- tibble(\n  id = c(1, 2, 3),\n  value_x = c(\"x1\", \"x2\", \"x3\")\n  )\n\nx\n\n# A tibble: 3 × 2\n     id value_x\n  &lt;dbl&gt; &lt;chr&gt;  \n1     1 x1     \n2     2 x2     \n3     3 x3     \n\n\n\n\ny &lt;- tibble(\n  id = c(1, 2, 4),\n  value_y = c(\"y1\", \"y2\", \"y4\")\n  )\n\ny\n\n# A tibble: 3 × 2\n     id value_y\n  &lt;dbl&gt; &lt;chr&gt;  \n1     1 y1     \n2     2 y2     \n3     4 y4"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#left_join",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#left_join",
    "title": "Joining data",
    "section": "left_join()",
    "text": "left_join()\n\n\n\nleft_join(x, y)\n\nJoining with `by = join_by(id)`\n\n\n# A tibble: 3 × 3\n     id value_x value_y\n  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      &lt;NA&gt;"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#left_join-1",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#left_join-1",
    "title": "Joining data",
    "section": "left_join()",
    "text": "left_join()\n\nprofessions |&gt;\n  left_join(dates)\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 10 × 4\n   name               profession       birth_year death_year\n   &lt;chr&gt;              &lt;chr&gt;                 &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ada Lovelace       Mathematician            NA         NA\n 2 Marie Curie        Physicist and C…         NA         NA\n 3 Janaki Ammal       Botanist               1897       1984\n 4 Chien-Shiung Wu    Physicist              1912       1997\n 5 Katherine Johnson  Mathematician          1918       2020\n 6 Rosalind Franklin  Chemist                1920       1958\n 7 Vera Rubin         Astronomer             1928       2016\n 8 Gladys West        Mathematician          1930         NA\n 9 Flossie Wong-Staal Virologist and …       1947       2020\n10 Jennifer Doudna    Biochemist             1964         NA"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#right_join",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#right_join",
    "title": "Joining data",
    "section": "right_join()",
    "text": "right_join()\n\n\n\nright_join(x, y)\n\nJoining with `by = join_by(id)`\n\n\n# A tibble: 3 × 3\n     id value_x value_y\n  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;  \n1     1 x1      y1     \n2     2 x2      y2     \n3     4 &lt;NA&gt;    y4"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#left_join-2",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#left_join-2",
    "title": "Joining data",
    "section": "left_join()",
    "text": "left_join()\n\nprofessions |&gt;\n  right_join(dates)\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 8 × 4\n  name               profession        birth_year death_year\n  &lt;chr&gt;              &lt;chr&gt;                  &lt;dbl&gt;      &lt;dbl&gt;\n1 Janaki Ammal       Botanist                1897       1984\n2 Chien-Shiung Wu    Physicist               1912       1997\n3 Katherine Johnson  Mathematician           1918       2020\n4 Rosalind Franklin  Chemist                 1920       1958\n5 Vera Rubin         Astronomer              1928       2016\n6 Gladys West        Mathematician           1930         NA\n7 Flossie Wong-Staal Virologist and M…       1947       2020\n8 Jennifer Doudna    Biochemist              1964         NA"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#full_join",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#full_join",
    "title": "Joining data",
    "section": "full_join()",
    "text": "full_join()\n\n\n\nfull_join(x, y)\n\nJoining with `by = join_by(id)`\n\n\n# A tibble: 4 × 3\n     id value_x value_y\n  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      &lt;NA&gt;   \n4     4 &lt;NA&gt;    y4"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#left_join-3",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#left_join-3",
    "title": "Joining data",
    "section": "left_join()",
    "text": "left_join()\n\nprofessions |&gt;\n  full_join(dates)\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 10 × 4\n   name               profession       birth_year death_year\n   &lt;chr&gt;              &lt;chr&gt;                 &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ada Lovelace       Mathematician            NA         NA\n 2 Marie Curie        Physicist and C…         NA         NA\n 3 Janaki Ammal       Botanist               1897       1984\n 4 Chien-Shiung Wu    Physicist              1912       1997\n 5 Katherine Johnson  Mathematician          1918       2020\n 6 Rosalind Franklin  Chemist                1920       1958\n 7 Vera Rubin         Astronomer             1928       2016\n 8 Gladys West        Mathematician          1930         NA\n 9 Flossie Wong-Staal Virologist and …       1947       2020\n10 Jennifer Doudna    Biochemist             1964         NA"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#inner_join",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#inner_join",
    "title": "Joining data",
    "section": "inner_join()",
    "text": "inner_join()\n\n\n\ninner_join(x, y)\n\nJoining with `by = join_by(id)`\n\n\n# A tibble: 2 × 3\n     id value_x value_y\n  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;  \n1     1 x1      y1     \n2     2 x2      y2"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#inner_join-1",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#inner_join-1",
    "title": "Joining data",
    "section": "inner_join()",
    "text": "inner_join()\n\nprofessions |&gt;\n  inner_join(dates)\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 8 × 4\n  name               profession        birth_year death_year\n  &lt;chr&gt;              &lt;chr&gt;                  &lt;dbl&gt;      &lt;dbl&gt;\n1 Janaki Ammal       Botanist                1897       1984\n2 Chien-Shiung Wu    Physicist               1912       1997\n3 Katherine Johnson  Mathematician           1918       2020\n4 Rosalind Franklin  Chemist                 1920       1958\n5 Vera Rubin         Astronomer              1928       2016\n6 Gladys West        Mathematician           1930         NA\n7 Flossie Wong-Staal Virologist and M…       1947       2020\n8 Jennifer Doudna    Biochemist              1964         NA"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#semi_join",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#semi_join",
    "title": "Joining data",
    "section": "semi_join()",
    "text": "semi_join()\n\n\n\nsemi_join(x, y)\n\nJoining with `by = join_by(id)`\n\n\n# A tibble: 2 × 2\n     id value_x\n  &lt;dbl&gt; &lt;chr&gt;  \n1     1 x1     \n2     2 x2"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#semi_join-1",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#semi_join-1",
    "title": "Joining data",
    "section": "semi_join()",
    "text": "semi_join()\n\nprofessions |&gt;\n  semi_join(dates)\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 8 × 2\n  name               profession                        \n  &lt;chr&gt;              &lt;chr&gt;                             \n1 Janaki Ammal       Botanist                          \n2 Chien-Shiung Wu    Physicist                         \n3 Katherine Johnson  Mathematician                     \n4 Rosalind Franklin  Chemist                           \n5 Vera Rubin         Astronomer                        \n6 Gladys West        Mathematician                     \n7 Flossie Wong-Staal Virologist and Molecular Biologist\n8 Jennifer Doudna    Biochemist"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#anti_join",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#anti_join",
    "title": "Joining data",
    "section": "anti_join()",
    "text": "anti_join()\n\n\n\nanti_join(x, y)\n\nJoining with `by = join_by(id)`\n\n\n# A tibble: 1 × 2\n     id value_x\n  &lt;dbl&gt; &lt;chr&gt;  \n1     3 x3"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#anti_join-1",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#anti_join-1",
    "title": "Joining data",
    "section": "anti_join()",
    "text": "anti_join()\n\nprofessions |&gt;\n  anti_join(dates)\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 2 × 2\n  name         profession           \n  &lt;chr&gt;        &lt;chr&gt;                \n1 Ada Lovelace Mathematician        \n2 Marie Curie  Physicist and Chemist"
  },
  {
    "objectID": "slides/1-4-joining-data/1-4-joining-data.html#putting-it-altogether",
    "href": "slides/1-4-joining-data/1-4-joining-data.html#putting-it-altogether",
    "title": "Joining data",
    "section": "Putting it altogether",
    "text": "Putting it altogether\n\nprofessions |&gt;\n  left_join(dates) |&gt;\n  left_join(works)\n\nJoining with `by = join_by(name)`\nJoining with `by = join_by(name)`\n\n\n# A tibble: 10 × 5\n   name           profession birth_year death_year known_for\n   &lt;chr&gt;          &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;    \n 1 Ada Lovelace   Mathemati…         NA         NA first co…\n 2 Marie Curie    Physicist…         NA         NA theory o…\n 3 Janaki Ammal   Botanist         1897       1984 hybrid s…\n 4 Chien-Shiung … Physicist        1912       1997 confim a…\n 5 Katherine Joh… Mathemati…       1918       2020 calculat…\n 6 Rosalind Fran… Chemist          1920       1958 &lt;NA&gt;     \n 7 Vera Rubin     Astronomer       1928       2016 existenc…\n 8 Gladys West    Mathemati…       1930         NA mathemat…\n 9 Flossie Wong-… Virologis…       1947       2020 first sc…\n10 Jennifer Doud… Biochemist       1964         NA one of t…"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#tidy-data",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#tidy-data",
    "title": "Tidy data",
    "section": "Tidy data",
    "text": "Tidy data\n\nHappy families are all alike; every unhappy family is unhappy in its own way.\nLeo Tolstoy\n\n\n\nCharacteristics of tidy data:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\n\nCharacteristics of untidy data:\n!@#$%^&*()"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy",
    "title": "Tidy data",
    "section": "What makes this data not tidy?",
    "text": "What makes this data not tidy?\n\n\n\nSource: Army Air Forces Statistical Digest, WW II"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy-1",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy-1",
    "title": "Tidy data",
    "section": "What makes this data not tidy?",
    "text": "What makes this data not tidy?\n\n\n\nSource: Gapminder, Estimated HIV prevalence among 15-49 year olds"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy-2",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy-2",
    "title": "Tidy data",
    "section": "What makes this data not tidy?",
    "text": "What makes this data not tidy?\n\n\n\nSource: US Census, Selected Economic Characteristics, ACS 2022"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#displaying-vs.-summarizing-data",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#displaying-vs.-summarizing-data",
    "title": "Tidy data",
    "section": "Displaying vs. summarizing data",
    "text": "Displaying vs. summarizing data\n\n\nDisplay\n\nstarwars |&gt;\n  select(name, height, gender)\n\n# A tibble: 87 × 3\n   name               height gender   \n   &lt;chr&gt;               &lt;int&gt; &lt;chr&gt;    \n 1 Luke Skywalker        172 masculine\n 2 C-3PO                 167 masculine\n 3 R2-D2                  96 masculine\n 4 Darth Vader           202 masculine\n 5 Leia Organa           150 feminine \n 6 Owen Lars             178 masculine\n 7 Beru Whitesun Lars    165 feminine \n 8 R5-D4                  97 masculine\n 9 Biggs Darklighter     183 masculine\n10 Obi-Wan Kenobi        182 masculine\n# ℹ 77 more rows\n\n\n\nSummarize\n\nstarwars |&gt;\n  group_by(gender) |&gt;\n  summarize(\n    n = n(),\n    avg_height = mean(height, na.rm = TRUE)\n  )\n\n# A tibble: 3 × 3\n  gender        n avg_height\n  &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;\n1 feminine     17       167.\n2 masculine    66       177.\n3 &lt;NA&gt;          4       175"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#example-cat-lovers",
    "href": "slides/2-1-data-types/2-1-data-types.html#example-cat-lovers",
    "title": "Data types",
    "section": "Example: Cat lovers",
    "text": "Example: Cat lovers\nA survey asked respondents their name and number of cats. The instructions said to enter the number of cats as a numerical value.\n\ncat_lovers &lt;- read_csv(\"data/cat-lovers.csv\")\ncat_lovers\n\n# A tibble: 60 × 2\n   name           number_of_cats\n   &lt;chr&gt;          &lt;chr&gt;         \n 1 Bernice Warren 0             \n 2 Woodrow Stone  0             \n 3 Willie Bass    1             \n 4 Tyrone Estrada 3             \n 5 Alex Daniels   3             \n 6 Jane Bates     2             \n 7 Latoya Simpson 1             \n 8 Darin Woods    1             \n 9 Agnes Cobb     0             \n10 Tabitha Grant  0             \n# ℹ 50 more rows"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#oh-why-wont-you-work",
    "href": "slides/2-1-data-types/2-1-data-types.html#oh-why-wont-you-work",
    "title": "Data types",
    "section": "Oh why won’t you work?!",
    "text": "Oh why won’t you work?!\n\ncat_lovers |&gt;\n  summarize(mean_cats = mean(number_of_cats))\n\nWarning: There was 1 warning in `summarize()`.\nℹ In argument: `mean_cats = mean(number_of_cats)`.\nCaused by warning in `mean.default()`:\n! argument is not numeric or logical: returning NA\n\n\n# A tibble: 1 × 1\n  mean_cats\n      &lt;dbl&gt;\n1        NA"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#lets-read-the-docs",
    "href": "slides/2-1-data-types/2-1-data-types.html#lets-read-the-docs",
    "title": "Data types",
    "section": "Let’s read the docs!",
    "text": "Let’s read the docs!\n\n?mean"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#oh-why-wont-you-still-work",
    "href": "slides/2-1-data-types/2-1-data-types.html#oh-why-wont-you-still-work",
    "title": "Data types",
    "section": "Oh why won’t you still work??!!",
    "text": "Oh why won’t you still work??!!\n\ncat_lovers |&gt;\n  summarize(mean_cats = mean(number_of_cats, na.rm = TRUE))\n\n\n\nWarning: There was 1 warning in `summarize()`.\nℹ In argument: `mean_cats = mean(number_of_cats, na.rm =\n  TRUE)`.\nCaused by warning in `mean.default()`:\n! argument is not numeric or logical: returning NA\n\n\n# A tibble: 1 × 1\n  mean_cats\n      &lt;dbl&gt;\n1        NA"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#take-a-breath-and-look-at-your-data",
    "href": "slides/2-1-data-types/2-1-data-types.html#take-a-breath-and-look-at-your-data",
    "title": "Data types",
    "section": "Take a breath and look at your data",
    "text": "Take a breath and look at your data\n\nWhat is the type of the number_of_cats variable?\n\n\nglimpse(cat_lovers)\n\nRows: 60\nColumns: 2\n$ name           &lt;chr&gt; \"Bernice Warren\", \"Woodrow Stone\", …\n$ number_of_cats &lt;chr&gt; \"0\", \"0\", \"1\", \"3\", \"3\", \"2\", \"1\", …"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look",
    "href": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look",
    "title": "Data types",
    "section": "Let’s take another look",
    "text": "Let’s take another look\n\n\n\n\n\n\nname\nnumber_of_cats\n\n\n\nBernice Warren\n0\n\n\nWoodrow Stone\n0\n\n\nWillie Bass\n1\n\n\nTyrone Estrada\n3\n\n\nAlex Daniels\n3\n\n\nJane Bates\n2\n\n\nLatoya Simpson\n1\n\n\nDarin Woods\n1\n\n\nAgnes Cobb\n0\n\n\nTabitha Grant\n0\n\n\nPerry Cross\n0\n\n\nWanda Silva\n0\n\n\nAlicia Sims\n1\n\n\nEmily Logan\n3\n\n\nWoodrow Elliott\n3\n\n\nBrent Copeland\n2\n\n\nPedro Carlson\n1\n\n\nPatsy Luna\n1\n\n\nBrett Robbins\n0\n\n\nOliver George\n0"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look-1",
    "href": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look-1",
    "title": "Data types",
    "section": "Let’s take another look",
    "text": "Let’s take another look\n\n\n\n\n\n\nname\nnumber_of_cats\n\n\n\nCalvin Perry\n1\n\n\nLora Gutierrez\n1\n\n\nCharlotte Sparks\n0\n\n\nEarl Mack\n0\n\n\nLeslie Wade\n4\n\n\nSantiago Barker\n0\n\n\nJose Bell\n0\n\n\nLynda Smith\n0\n\n\nBradford Marshall\n0\n\n\nIrving Miller\n0\n\n\nCaroline Simpson\n0\n\n\nFrances Welch\n0\n\n\nMelba Jenkins\n0\n\n\nVeronica Morales\n0\n\n\nJuanita Cunningham\n0\n\n\nMaurice Howard\n0\n\n\nTeri Pierce\n0\n\n\nPhil Franklin\n0\n\n\nJan Zimmerman\n0\n\n\nLeslie Price\n0"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look-2",
    "href": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look-2",
    "title": "Data types",
    "section": "Let’s take another look",
    "text": "Let’s take another look\n\n\n\n\n\n\nname\nnumber_of_cats\n\n\n\nBessie Patterson\n0\n\n\nEthel Wolfe\n0\n\n\nNaomi Wright\n1\n\n\nSadie Frank\n3\n\n\nLonnie Cannon\n3\n\n\nTony Garcia\n2\n\n\nDarla Newton\n1\n\n\nGinger Clark\n1.5 - honestly I think one of my cats is half human\n\n\nLionel Campbell\n0\n\n\nFlorence Klein\n0\n\n\nHarriet Leonard\n1\n\n\nTerrence Harrington\n0\n\n\nTravis Garner\n1\n\n\nDoug Bass\nthree\n\n\nPat Norris\n1\n\n\nDawn Young\n1\n\n\nShari Alvarez\n1\n\n\nTamara Robinson\n0\n\n\nMegan Morgan\n0\n\n\nKara Obrien\n2"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look-3",
    "href": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look-3",
    "title": "Data types",
    "section": "Let’s take another look",
    "text": "Let’s take another look\n\n\n\n\n\n\nname\nnumber_of_cats\n\n\n\nBessie Patterson\n0\n\n\nEthel Wolfe\n0\n\n\nNaomi Wright\n1\n\n\nSadie Frank\n3\n\n\nLonnie Cannon\n3\n\n\nTony Garcia\n2\n\n\nDarla Newton\n1\n\n\nGinger Clark\n1.5 - honestly I think one of my cats is half human\n\n\nLionel Campbell\n0\n\n\nFlorence Klein\n0\n\n\nHarriet Leonard\n1\n\n\nTerrence Harrington\n0\n\n\nTravis Garner\n1\n\n\nDoug Bass\nthree\n\n\nPat Norris\n1\n\n\nDawn Young\n1\n\n\nShari Alvarez\n1\n\n\nTamara Robinson\n0\n\n\nMegan Morgan\n0\n\n\nKara Obrien\n2"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look-4",
    "href": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look-4",
    "title": "Data types",
    "section": "Let’s take another look",
    "text": "Let’s take another look\n\n\n\n\n\n\nname\nnumber_of_cats\n\n\n\nBessie Patterson\n0\n\n\nEthel Wolfe\n0\n\n\nNaomi Wright\n1\n\n\nSadie Frank\n3\n\n\nLonnie Cannon\n3\n\n\nTony Garcia\n2\n\n\nDarla Newton\n1\n\n\nGinger Clark\n1.5 - honestly I think one of my cats is half human\n\n\nLionel Campbell\n0\n\n\nFlorence Klein\n0\n\n\nHarriet Leonard\n1\n\n\nTerrence Harrington\n0\n\n\nTravis Garner\n1\n\n\nDoug Bass\nthree\n\n\nPat Norris\n1\n\n\nDawn Young\n1\n\n\nShari Alvarez\n1\n\n\nTamara Robinson\n0\n\n\nMegan Morgan\n0\n\n\nKara Obrien\n2"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look-5",
    "href": "slides/2-1-data-types/2-1-data-types.html#lets-take-another-look-5",
    "title": "Data types",
    "section": "Let’s take another look",
    "text": "Let’s take another look\n\n\n\n\n\n\nname\nnumber_of_cats\n\n\n\nBessie Patterson\n0\n\n\nEthel Wolfe\n0\n\n\nNaomi Wright\n1\n\n\nSadie Frank\n3\n\n\nLonnie Cannon\n3\n\n\nTony Garcia\n2\n\n\nDarla Newton\n1\n\n\nGinger Clark\n1.5 - honestly I think one of my cats is half human\n\n\nLionel Campbell\n0\n\n\nFlorence Klein\n0\n\n\nHarriet Leonard\n1\n\n\nTerrence Harrington\n0\n\n\nTravis Garner\n1\n\n\nDoug Bass\nthree\n\n\nPat Norris\n1\n\n\nDawn Young\n1\n\n\nShari Alvarez\n1\n\n\nTamara Robinson\n0\n\n\nMegan Morgan\n0\n\n\nKara Obrien\n2"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#sometimes-you-might-need-to-babysit-your-respondents",
    "href": "slides/2-1-data-types/2-1-data-types.html#sometimes-you-might-need-to-babysit-your-respondents",
    "title": "Data types",
    "section": "Sometimes you might need to babysit your respondents",
    "text": "Sometimes you might need to babysit your respondents\n\ncat_lovers |&gt;\n  mutate(\n    number_of_cats = case_when(\n      name == \"Ginger Clark\" ~ 2,\n      name == \"Doug Bass\"    ~ 3,\n      .default = as.numeric(number_of_cats)\n      )\n    ) |&gt;\n  summarize(mean_cats = mean(number_of_cats))\n\n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `number_of_cats = case_when(...)`.\nCaused by warning in `vec_case_when()`:\n! NAs introduced by coercion\n\n\n# A tibble: 1 × 1\n  mean_cats\n      &lt;dbl&gt;\n1     0.833"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#always-you-need-to-respect-data-types",
    "href": "slides/2-1-data-types/2-1-data-types.html#always-you-need-to-respect-data-types",
    "title": "Data types",
    "section": "Always you need to respect data types",
    "text": "Always you need to respect data types\n\ncat_lovers |&gt;#| \n  mutate(\n    number_of_cats = case_when(\n      name == \"Ginger Clark\" ~ \"2\",\n      name == \"Doug Bass\"    ~ \"3\",\n      .default = number_of_cats\n      ),\n    number_of_cats = as.numeric(number_of_cats)\n    ) |&gt;\n  summarize(mean_cats = mean(number_of_cats))\n\n\n\n# A tibble: 1 × 1\n  mean_cats\n      &lt;dbl&gt;\n1     0.833"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#moral-of-the-story",
    "href": "slides/2-1-data-types/2-1-data-types.html#moral-of-the-story",
    "title": "Data types",
    "section": "Moral of the story",
    "text": "Moral of the story\n\nIf your data does not behave how you expect it to, type coercion upon reading in the data might be the reason.\nGo in and investigate your data, apply the fix, save your data, live happily ever after."
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#data-types-in-r",
    "href": "slides/2-1-data-types/2-1-data-types.html#data-types-in-r",
    "title": "Data types",
    "section": "Data types in R",
    "text": "Data types in R\n\nlogical\ndouble\ninteger\ncharacter\nand some more, but we won’t be focusing on those"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#logical-character",
    "href": "slides/2-1-data-types/2-1-data-types.html#logical-character",
    "title": "Data types",
    "section": "Logical & character",
    "text": "Logical & character\n\n\nlogical - boolean values TRUE and FALSE\n\n\ntypeof(TRUE)\n\n[1] \"logical\"\n\n\n\ncharacter - character strings\n\n\ntypeof(\"hello\")\n\n[1] \"character\""
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#double-integer",
    "href": "slides/2-1-data-types/2-1-data-types.html#double-integer",
    "title": "Data types",
    "section": "Double & integer",
    "text": "Double & integer\n\n\ndouble - floating point numerical values (default numerical type)\n\n\ntypeof(1.335)\n\n[1] \"double\"\n\ntypeof(7)\n\n[1] \"double\"\n\n\n\ninteger - integer numerical values (indicated with an L)\n\n\ntypeof(7L)\n\n[1] \"integer\"\n\ntypeof(1:3)\n\n[1] \"integer\""
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#concatenation",
    "href": "slides/2-1-data-types/2-1-data-types.html#concatenation",
    "title": "Data types",
    "section": "Concatenation",
    "text": "Concatenation\nVectors can be constructed using the c() function.\n\nc(1, 2, 3)\n\n[1] 1 2 3\n\n\n\n\nc(\"Hello\", \"World!\")\n\n[1] \"Hello\"  \"World!\"\n\n\n\n\n\nc(c(\"hi\", \"hello\"), c(\"bye\", \"jello\"))\n\n[1] \"hi\"    \"hello\" \"bye\"   \"jello\""
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#converting-between-types",
    "href": "slides/2-1-data-types/2-1-data-types.html#converting-between-types",
    "title": "Data types",
    "section": "Converting between types",
    "text": "Converting between types\n\nwith intention…\n\n\n\n\nx &lt;- 1:3\nx\n\n[1] 1 2 3\n\ntypeof(x)\n\n[1] \"integer\"\n\n\n\n\ny &lt;- as.character(x)\ny\n\n[1] \"1\" \"2\" \"3\"\n\ntypeof(y)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#converting-between-types-1",
    "href": "slides/2-1-data-types/2-1-data-types.html#converting-between-types-1",
    "title": "Data types",
    "section": "Converting between types",
    "text": "Converting between types\n\nwith intention…\n\n\n\n\nx &lt;- c(TRUE, FALSE)\nx\n\n[1]  TRUE FALSE\n\ntypeof(x)\n\n[1] \"logical\"\n\n\n\n\ny &lt;- as.numeric(x)\ny\n\n[1] 1 0\n\ntypeof(y)\n\n[1] \"double\""
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#converting-between-types-2",
    "href": "slides/2-1-data-types/2-1-data-types.html#converting-between-types-2",
    "title": "Data types",
    "section": "Converting between types",
    "text": "Converting between types\n\nwithout intention…\n\n\nc(1, \"Hello\")\n\n[1] \"1\"     \"Hello\"\n\n\n\nR will happily convert between various types without complaint when different types of data are concatenated in a vector, and that’s not always a great thing!\n\n\n\nc(FALSE, 3L)\n\n[1] 0 3\n\n\n\n\n\nc(1.2, 3L)\n\n[1] 1.2 3.0\n\n\n\n\n\nc(2L, \"two\")\n\n[1] \"2\"   \"two\""
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#explicit-vs.-implicit-coercion",
    "href": "slides/2-1-data-types/2-1-data-types.html#explicit-vs.-implicit-coercion",
    "title": "Data types",
    "section": "Explicit vs. implicit coercion",
    "text": "Explicit vs. implicit coercion\nLet’s give formal names to what we’ve seen so far:\n\n\nExplicit coercion is when you call a function like as.logical(), as.numeric(), as.integer(), as.double(), or as.character()\nImplicit coercion happens when you use a vector in a specific context that expects a certain type of vector"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#special-values-1",
    "href": "slides/2-1-data-types/2-1-data-types.html#special-values-1",
    "title": "Data types",
    "section": "Special values",
    "text": "Special values\n\n\nNA: Not available\n\n\n\n\nNaN: Not a number\n\n\n0 / 0\n\n[1] NaN\n\n\n\n\n\n\nInf: Positive infinity\n\n\npi / 0\n\n[1] Inf\n\n\n\n\n\n\n-Inf: Negative infinity\n\n\n-1 * (pi / 0)\n\n[1] -Inf"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#nas-are-special-s",
    "href": "slides/2-1-data-types/2-1-data-types.html#nas-are-special-s",
    "title": "Data types",
    "section": "\nNAs are special ❄️s",
    "text": "NAs are special ❄️s\n\nx &lt;- c(1, 2, 3, 4, NA)\n\n\nmean(x)\n\n[1] NA\n\n\n\n\nmean(x, na.rm = TRUE)\n\n[1] 2.5\n\n\n\n\n\nsummary(x)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.00    1.75    2.50    2.50    3.25    4.00       1"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#nas-are-logical",
    "href": "slides/2-1-data-types/2-1-data-types.html#nas-are-logical",
    "title": "Data types",
    "section": "\nNAs are logical",
    "text": "NAs are logical\nR uses NA to represent missing values in its data structures.\n\ntypeof(NA)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#mental-model-for-nas",
    "href": "slides/2-1-data-types/2-1-data-types.html#mental-model-for-nas",
    "title": "Data types",
    "section": "Mental model for NAs",
    "text": "Mental model for NAs\n\nUnlike NaN, NAs are genuinely unknown values\nBut that doesn’t mean they can’t function in a logical way\nLet’s think about why NAs are logical…\n\n\n\nWhy do the following give different answers?\n\n\n\n\n# TRUE or NA\nTRUE | NA\n\n[1] TRUE\n\n\n\n\n# FALSE or NA\nFALSE | NA\n\n[1] NA"
  },
  {
    "objectID": "slides/2-1-data-types/2-1-data-types.html#mental-model-for-nas-1",
    "href": "slides/2-1-data-types/2-1-data-types.html#mental-model-for-nas-1",
    "title": "Data types",
    "section": "Mental model for NAs",
    "text": "Mental model for NAs\nNA is unknown, so it could be TRUE or FALSE\n\n\n\nTRUE | NA gives TRUE, because the answer is always TRUE whether the unknown NA is actually TRUE or FALSE\n\n\n\nTRUE | TRUE  # if NA was TRUE\n\n[1] TRUE\n\nTRUE | FALSE # if NA was FALSE\n\n[1] TRUE\n\n\n\n\n\n\nFALSE | NA gives FALSE, because the answer changes depending whether the unknown NA is actually TRUE or FALSE\n\n\n\nFALSE | TRUE  # if NA was TRUE\n\n[1] TRUE\n\nFALSE | FALSE # if NA was FALSE\n\n[1] FALSE\n\n\n\n\n\nThis may not make sense for mathematical operations, but it does make sense in the context of missing data"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": " Data tidying and importing",
    "section": "",
    "text": "Title\n\n\n\n\n\n\nTidy data\n\n\n\n\nTidying data\n\n\n\n\nJoining data\n\n\n\n\nData types\n\n\n\n\nData classes\n\n\n\n\nImporting data\n\n\n\n\nWeb scraping\n\n\n\n\nWeb scraping considerations\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": " Data tidying and importing",
    "section": "",
    "text": "Title\n\n\n\n\n\n\nTidy data\n\n\n\n\nTidying data\n\n\n\n\nJoining data\n\n\n\n\nData types\n\n\n\n\nData classes\n\n\n\n\nImporting data\n\n\n\n\nWeb scraping\n\n\n\n\nWeb scraping considerations\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#code-alongs",
    "href": "index.html#code-alongs",
    "title": " Data tidying and importing",
    "section": "Code alongs",
    "text": "Code alongs\n\n\n\n\n\nTitle\n\n\n\n\n\n\nCountry populations over time (Complete)\n\n\n\n\nCountry populations over time\n\n\n\n\nContinent populations (Complete)\n\n\n\n\nContinent populations\n\n\n\n\nThat’s my type (Complete)\n\n\n\n\nThat’s my type\n\n\n\n\nHalving CO2 emissions (Complete)\n\n\n\n\nHalving CO2 emissions\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#exercises",
    "href": "index.html#exercises",
    "title": " Data tidying and importing",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\nTitle\n\n\n\n\n\n\nNobel Prize winners & sales data\n\n\n\n\nNYC flights + data wrangling\n\n\n\n\nTidy Basketball\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "slides/3-2-web-scraping-considerations/3-2-web-scraping-considerations.html#can-you-vs-should-you",
    "href": "slides/3-2-web-scraping-considerations/3-2-web-scraping-considerations.html#can-you-vs-should-you",
    "title": "Web scraping considerations",
    "section": "“Can you?” vs “Should you?”",
    "text": "“Can you?” vs “Should you?”\n\n\n\n\n\n\n\nSource: Brian Resnick, Researchers just released profile data on 70,000 OkCupid users without permission, Vox."
  },
  {
    "objectID": "slides/3-2-web-scraping-considerations/3-2-web-scraping-considerations.html#can-you-vs-should-you-1",
    "href": "slides/3-2-web-scraping-considerations/3-2-web-scraping-considerations.html#can-you-vs-should-you-1",
    "title": "Web scraping considerations",
    "section": "“Can you?” vs “Should you?”",
    "text": "“Can you?” vs “Should you?”"
  },
  {
    "objectID": "slides/3-2-web-scraping-considerations/3-2-web-scraping-considerations.html#unreliable-formatting",
    "href": "slides/3-2-web-scraping-considerations/3-2-web-scraping-considerations.html#unreliable-formatting",
    "title": "Web scraping considerations",
    "section": "Unreliable formatting",
    "text": "Unreliable formatting\n\n\n\n\n\n\n\nalumni.duke.edu/news/notable-alumni"
  },
  {
    "objectID": "slides/3-2-web-scraping-considerations/3-2-web-scraping-considerations.html#data-broken-into-many-pages",
    "href": "slides/3-2-web-scraping-considerations/3-2-web-scraping-considerations.html#data-broken-into-many-pages",
    "title": "Web scraping considerations",
    "section": "Data broken into many pages",
    "text": "Data broken into many pages"
  },
  {
    "objectID": "slides/3-2-web-scraping-considerations/3-2-web-scraping-considerations.html#a-new-r-workflow",
    "href": "slides/3-2-web-scraping-considerations/3-2-web-scraping-considerations.html#a-new-r-workflow",
    "title": "Web scraping considerations",
    "section": "A new R workflow",
    "text": "A new R workflow\n\n\nWhen working in a Quarto document, your analysis is re-run each time you render\nIf web scraping in a Quarto document, you’d be re-scraping the data each time you knit, which is undesirable (and not nice)!\nAn alternative workflow:\n\nUse an R script to save your code\nSaving interim data scraped using the code in the script as CSV or RDS files\nUse the saved data in your analysis in your Quarto document"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#task-goal-and-tools",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#task-goal-and-tools",
    "title": "Tidying data",
    "section": "Task, goal, and tools",
    "text": "Task, goal, and tools\n\n\n have data organised in an unideal way for our analysis\n\n\n\n want to reorganize the data for our analysis\n\n\n\n\n using tools from the tidyverse\n\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#data-grocery-store-sales",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#data-grocery-store-sales",
    "title": "Tidying data",
    "section": "Data: Grocery store sales",
    "text": "Data: Grocery store sales\n\n\nhave\n\n\n\n# A tibble: 2 × 4\n  customer_id item_1 item_2       item_3\n        &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt; \n1           1 bread  milk         banana\n2           2 milk   toilet paper &lt;NA&gt;  \n\n\n\n\nwant\n\n\n\n# A tibble: 6 × 3\n  customer_id item_no item        \n        &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper\n6           2 item_3  &lt;NA&gt;"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#grammar-of-data-tidying",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#grammar-of-data-tidying",
    "title": "Tidying data",
    "section": "Grammar of data tidying",
    "text": "Grammar of data tidying\n\n\n\n\nThe goal of tidyr is to help you tidy your data via\n\n\npivoting for going between wide and long data\nsplitting and combining character columns\nnesting and unnesting columns\nclarifying how NAs should be treated"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivoting",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivoting",
    "title": "Tidying data",
    "section": "Pivoting",
    "text": "Pivoting\n\n\nNot this…\n\n\nbut this!"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#wider-vs.-longer",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#wider-vs.-longer",
    "title": "Tidying data",
    "section": "Wider vs. longer",
    "text": "Wider vs. longer\n\n\nwider - more columns\n\n\n# A tibble: 2 × 4\n  customer_id item_1 item_2       item_3\n        &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt; \n1           1 bread  milk         banana\n2           2 milk   toilet paper &lt;NA&gt;  \n\n\n\nlonger - more rows\n\n\n# A tibble: 6 × 3\n  customer_id item_no item        \n        &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper\n6           2 item_3  &lt;NA&gt;"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer",
    "title": "Tidying data",
    "section": "pivot_longer()",
    "text": "pivot_longer()\n\n\n\npivot_longer(\n  data,\n  cols, \n  names_to = \"name\", \n  values_to = \"value\"\n  )"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-1",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-1",
    "title": "Tidying data",
    "section": "pivot_longer()",
    "text": "pivot_longer()\n\n\n\npivot_longer(\n1  data,\n  cols, \n  names_to = \"name\", \n  values_to = \"value\"\n  )\n\n\n1\n\ndata (as usual)"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-2",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-2",
    "title": "Tidying data",
    "section": "pivot_longer()",
    "text": "pivot_longer()\n\n\n\npivot_longer(\n1  data,\n2  cols,\n  names_to = \"name\", \n  values_to = \"value\"\n  )\n\n\n1\n\ndata (as usual)\n\n2\n\ncols: Columns to pivot into longer format"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-3",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-3",
    "title": "Tidying data",
    "section": "pivot_longer()",
    "text": "pivot_longer()\n\n\n\npivot_longer(\n1  data,\n2  cols,\n3  names_to = \"name\",\n  values_to = \"value\"\n  )\n\n\n1\n\ndata (as usual)\n\n2\n\ncols: Columns to pivot into longer format\n\n3\n\nnames_to: Name of the column where column names of pivoted variables go (character string)"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-4",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-4",
    "title": "Tidying data",
    "section": "pivot_longer()",
    "text": "pivot_longer()\n\n\n\npivot_longer(\n1  data,\n2  cols,\n3  names_to = \"name\",\n4  values_to = \"value\"\n  )\n\n\n1\n\ndata (as usual)\n\n2\n\ncols: Columns to pivot into longer format\n\n3\n\nnames_to: Name of the column where column names of pivoted variables go (character string)\n\n4\n\nvalues_to: Name of the column where data in pivoted variables go (character string)"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-in-context",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-in-context",
    "title": "Tidying data",
    "section": "pivot_longer() in context",
    "text": "pivot_longer() in context\n\n\n\ncustomers |&gt;\n  pivot_longer(\n    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\"\n  )\n\n# A tibble: 6 × 3\n  customer_id item_no item        \n        &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper\n6           2 item_3  &lt;NA&gt;"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-in-context-1",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-in-context-1",
    "title": "Tidying data",
    "section": "pivot_longer() in context",
    "text": "pivot_longer() in context\n\n\n\ncustomers |&gt;\n  pivot_longer(\n1    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\"\n  )\n\n\n1\n\ncols to pivot: item_1 to item_3"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-in-context-2",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-in-context-2",
    "title": "Tidying data",
    "section": "pivot_longer() in context",
    "text": "pivot_longer() in context\n\n\n\ncustomers |&gt;\n  pivot_longer(\n1    cols = item_1:item_3,\n2    names_to = \"item_no\",\n    values_to = \"item\"\n  )\n\n\n1\n\ncols to pivot: item_1 to item_3\n\n2\n\nColumn names_to new column called item_no"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-in-context-3",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-in-context-3",
    "title": "Tidying data",
    "section": "pivot_longer() in context",
    "text": "pivot_longer() in context\n\n\n\ncustomers |&gt;\n  pivot_longer(\n1    cols = item_1:item_3,\n2    names_to = \"item_no\",\n3    values_to = \"item\"\n  )\n\n\n1\n\ncols to pivot: item_1 to item_3\n\n2\n\nColumn names_to new column called item_no\n\n3\n\nvalues_to new column called item"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-in-context-4",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_longer-in-context-4",
    "title": "Tidying data",
    "section": "pivot_longer() in context",
    "text": "pivot_longer() in context\n\n\n\ncustomers |&gt;\n  pivot_longer(\n    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\"\n  )\n\n# A tibble: 6 × 3\n  customer_id item_no item        \n        &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper\n6           2 item_3  &lt;NA&gt;"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#dealing-with-nas",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#dealing-with-nas",
    "title": "Tidying data",
    "section": "Dealing with NAs",
    "text": "Dealing with NAs\n\n\n\ncustomers |&gt;\n  pivot_longer(\n1    cols = item_1:item_3,\n2    names_to = \"item_no\",\n3    values_to = \"item\",\n4    values_drop_na = TRUE\n  )\n\n\n1\n\ncols to pivot: item_1 to item_3\n\n2\n\nColumn names_to new column called item_no\n\n3\n\nvalues_to new column called item\n\n4\n\nDrop rows that contain only NAs in the values_to column\n\n\n\n\n# A tibble: 5 × 3\n  customer_id item_no item        \n        &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#from-customers-to-purchases",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#from-customers-to-purchases",
    "title": "Tidying data",
    "section": "From customers to purchases",
    "text": "From customers to purchases\n\n\n\npurchases &lt;- customers |&gt;\n  pivot_longer(\n    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\",\n    values_drop_na = TRUE\n  )\n\npurchases\n\n# A tibble: 5 × 3\n  customer_id item_no item        \n        &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;       \n1           1 item_1  bread       \n2           1 item_2  milk        \n3           1 item_3  banana      \n4           2 item_1  milk        \n5           2 item_2  toilet paper"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#why-pivot",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#why-pivot",
    "title": "Tidying data",
    "section": "Why pivot?",
    "text": "Why pivot?\nMost likely, because the next step of your analysis needs it\n\n\n\n\n\nprices\n\n# A tibble: 5 × 2\n  item         price\n  &lt;chr&gt;        &lt;dbl&gt;\n1 avocado       0.5 \n2 banana        0.15\n3 bread         1   \n4 milk          0.8 \n5 toilet paper  3   \n\n\n\n\npurchases |&gt;\n  left_join(prices)\n\nJoining with `by = join_by(item)`\n\n\n# A tibble: 5 × 4\n  customer_id item_no item         price\n        &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt;\n1           1 item_1  bread         1   \n2           1 item_2  milk          0.8 \n3           1 item_3  banana        0.15\n4           2 item_1  milk          0.8 \n5           2 item_2  toilet paper  3"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#from-purchases-to-customers",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#from-purchases-to-customers",
    "title": "Tidying data",
    "section": "From purchases to customers",
    "text": "From purchases to customers\n\n\n\npurchases |&gt;\n  pivot_wider(\n    names_from = item_no,\n    values_from = item\n  )\n\n# A tibble: 2 × 4\n  customer_id item_1 item_2       item_3\n        &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt; \n1           1 bread  milk         banana\n2           2 milk   toilet paper &lt;NA&gt;"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_wider",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_wider",
    "title": "Tidying data",
    "section": "pivot_wider()",
    "text": "pivot_wider()\n\n\n\npivot_wider(\n1  data,\n  names_from = name,\n  values_from = value\n  )\n\n\n1\n\ndata (as usual)"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_wider-1",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_wider-1",
    "title": "Tidying data",
    "section": "pivot_wider()",
    "text": "pivot_wider()\n\n\n\npivot_wider(\n1  data,\n2  names_from = name,\n  values_from = value\n  )\n\n\n1\n\ndata (as usual)\n\n2\n\nnames_from: Which column(s) in the long format contains what should be column names in the wide format"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_wider-2",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#pivot_wider-2",
    "title": "Tidying data",
    "section": "pivot_wider()",
    "text": "pivot_wider()\n\n\n\npivot_wider(\n1  data,\n2  names_from = name,\n3  values_from = value\n  )\n\n\n1\n\ndata (as usual)\n\n2\n\nnames_from: Which column(s) in the long format contains what should be column names in the wide format\n\n3\n\nvalues_from: Which column(s) in the long format contains what should be values in the new columns in the wide format"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#wider---longer",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#wider---longer",
    "title": "Tidying data",
    "section": "Wider <-> longer",
    "text": "Wider &lt;-&gt; longer"
  },
  {
    "objectID": "slides/1-3-tidying-data/1-3-tidying-data.html#additional-arguments",
    "href": "slides/1-3-tidying-data/1-3-tidying-data.html#additional-arguments",
    "title": "Tidying data",
    "section": "Additional arguments",
    "text": "Additional arguments\n\n\npivot_longer()\n\npivot_longer(\n  data,\n  cols,\n  ...,\n  cols_vary = \"fastest\",\n  names_to = \"name\",\n  names_prefix = NULL,\n  names_sep = NULL,\n  names_pattern = NULL,\n  names_ptypes = NULL,\n  names_transform = NULL,\n  names_repair = \"check_unique\",\n  values_to = \"value\",\n  values_drop_na = FALSE,\n  values_ptypes = NULL,\n  values_transform = NULL\n)\n\n\npivot_wider()\n\npivot_wider(\n  data,\n  ...,\n  id_cols = NULL,\n  id_expand = FALSE,\n  names_from = name,\n  names_prefix = \"\",\n  names_sep = \"_\",\n  names_glue = NULL,\n  names_sort = FALSE,\n  names_vary = \"fastest\",\n  names_expand = FALSE,\n  names_repair = \"check_unique\",\n  values_from = value,\n  values_fill = NULL,\n  values_fn = NULL,\n  unused_fn = NULL\n)"
  },
  {
    "objectID": "slides/3-1-web-scraping/3-1-web-scraping.html#scraping-the-web-what-why",
    "href": "slides/3-1-web-scraping/3-1-web-scraping.html#scraping-the-web-what-why",
    "title": "Web scraping",
    "section": "Scraping the web: what? why?",
    "text": "Scraping the web: what? why?\n\n\nIncreasing amount of data is available on the web\nThese data are provided in an unstructured format: you can always copy&paste, but it’s time-consuming and prone to errors\nWeb scraping is the process of extracting this information automatically and transform it into a structured dataset\nTwo different scenarios:\n\nScreen scraping: extract data from source code of website, with html parser (easy) or regular expression matching (less easy).\nWeb APIs (application programming interface): website offers a set of structured http requests that return JSON or XML files."
  },
  {
    "objectID": "slides/3-1-web-scraping/3-1-web-scraping.html#hypertext-markup-language",
    "href": "slides/3-1-web-scraping/3-1-web-scraping.html#hypertext-markup-language",
    "title": "Web scraping",
    "section": "Hypertext Markup Language",
    "text": "Hypertext Markup Language\n\n\nMost of the data on the web is still largely available as HTML\nIt is structured (hierarchical / tree based), but it’s often not available in a form useful for analysis (flat / tidy).\n\n\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;This is a title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p align=\"center\"&gt;Hello world!&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "slides/3-1-web-scraping/3-1-web-scraping.html#rvest",
    "href": "slides/3-1-web-scraping/3-1-web-scraping.html#rvest",
    "title": "Web scraping",
    "section": "rvest",
    "text": "rvest\n\n\n\nThe rvest package makes basic processing and manipulation of HTML data straight forward\nIt’s designed to work with pipelines built with |&gt;"
  },
  {
    "objectID": "slides/3-1-web-scraping/3-1-web-scraping.html#core-rvest-functions",
    "href": "slides/3-1-web-scraping/3-1-web-scraping.html#core-rvest-functions",
    "title": "Web scraping",
    "section": "Core rvest functions",
    "text": "Core rvest functions\n\nread_html(): Read HTML data from a url or character string\nhtml_element(): Select a specified HTML element\nhtml_elements(): Select specified HTML elements\nhtml_table(): Parse an HTML table into a data frame\nhtml_text(): Extract text from an HTML element\nhtml_name(): Extract the name of an HTML element\nhtml_attr(): Extract all HTML element attributes by name\nhtml_attr(): Extract a single HTML element attribute by name"
  },
  {
    "objectID": "slides/3-1-web-scraping/3-1-web-scraping.html#selectorgadget",
    "href": "slides/3-1-web-scraping/3-1-web-scraping.html#selectorgadget",
    "title": "Web scraping",
    "section": "SelectorGadget",
    "text": "SelectorGadget\n\n\n\n\nOpen source tool that facilitates discovery and selection of tags for elements on a page\nAdd to your browser as an extension, e.g., Chrome Extension\nFind out more on the SelectorGadget vignette"
  },
  {
    "objectID": "slides/3-1-web-scraping/3-1-web-scraping.html#using-the-selectorgadget",
    "href": "slides/3-1-web-scraping/3-1-web-scraping.html#using-the-selectorgadget",
    "title": "Web scraping",
    "section": "Using the SelectorGadget",
    "text": "Using the SelectorGadget"
  },
  {
    "objectID": "slides/3-1-web-scraping/3-1-web-scraping.html#using-the-selectorgadget-1",
    "href": "slides/3-1-web-scraping/3-1-web-scraping.html#using-the-selectorgadget-1",
    "title": "Web scraping",
    "section": "Using the SelectorGadget",
    "text": "Using the SelectorGadget\nThrough this process of selection and rejection, SelectorGadget facilitates discovering the appropriate CSS selector for your needs."
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#reading-delimited-files",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#reading-delimited-files",
    "title": "Importing data",
    "section": "Reading delimited files",
    "text": "Reading delimited files\n\n\n\n\n\nlibrary(tidyverse)\n\n\n\nread_csv() - comma delimited files\n\nread_csv2() - semicolon separated files (common in countries where , is used as the decimal place)\n\nread_tsv() - tab delimited files\n\nread_delim() - reads in files with any delimiter\n\nread_fwf() - fixed width files\n…"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#reading-excel-spreadsheets",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#reading-excel-spreadsheets",
    "title": "Importing data",
    "section": "Reading Excel spreadsheets",
    "text": "Reading Excel spreadsheets\n\n\n\n\n\nlibrary(readxl)\n\n\n\nread_excel() - read xls or xlsx files\n…"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#reading-data",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#reading-data",
    "title": "Importing data",
    "section": "Reading data",
    "text": "Reading data\n\nnobel &lt;- read_csv(file = \"data/nobel.csv\")\n\nRows: 1000 Columns: 19\n── Column specification ────────────────────────────────────\nDelimiter: \",\"\nchr (17): first_name, last_name, born, died, born_countr...\ndbl  (2): id, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#reading-data-1",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#reading-data-1",
    "title": "Importing data",
    "section": "Reading data",
    "text": "Reading data\n\nnobel\n\n# A tibble: 1,000 × 19\n      id first_name     last_name   born  died  born_country\n   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;       \n 1   160 Jacobus H.     van 't Hoff 1852… 3/1/… the Netherl…\n 2   569 Sully          Prudhomme   1839… 9/7/… France      \n 3   293 Emil           von Behring 1854… 3/31… Prussia (no…\n 4   462 Henry          Dunant      1828… 10/3… Switzerland \n 5     1 Wilhelm Conrad Röntgen     1845… 2/10… Prussia (no…\n 6   463 Frédéric       Passy       1822… 6/12… France      \n 7   464 Élie           Ducommun    1833… 12/7… Switzerland \n 8   465 Albert         Gobat       1843… 3/16… Switzerland \n 9   294 Ronald         Ross        1857… 9/16… India       \n10   161 Emil           Fischer     1852… 7/15… Prussia (no…\n# ℹ 990 more rows\n# ℹ 13 more variables: born_country_code &lt;chr&gt;,\n#   born_city &lt;chr&gt;, died_country &lt;chr&gt;,\n#   died_country_code &lt;chr&gt;, died_city &lt;chr&gt;, gender &lt;chr&gt;,\n#   year &lt;dbl&gt;, category &lt;chr&gt;, overall_motivation &lt;chr&gt;,\n#   motivation &lt;chr&gt;, organization_name &lt;chr&gt;,\n#   organization_city &lt;chr&gt;, organization_country &lt;chr&gt;"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#writing-data",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#writing-data",
    "title": "Importing data",
    "section": "Writing data",
    "text": "Writing data\nWrite a file:\n\ndf &lt;- tribble(\n  ~x, ~y,\n  1,  \"a\",\n  2,  \"b\",\n  3,  \"c\"\n)\n\nwrite_csv(df, file = \"data/df.csv\")"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#reading-data-back",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#reading-data-back",
    "title": "Importing data",
    "section": "Reading data back",
    "text": "Reading data back\nRead it back in to inspect:\n\nread_csv(\"data/df.csv\")\n\nRows: 3 Columns: 2\n── Column specification ────────────────────────────────────\nDelimiter: \",\"\nchr (1): y\ndbl (1): x\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 3 × 2\n      x y    \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 a    \n2     2 b    \n3     3 c"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#suppressing-messages",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#suppressing-messages",
    "title": "Importing data",
    "section": "Suppressing messages",
    "text": "Suppressing messages\n\n```{r}\n#| message: false\nread_csv(\"data/df.csv\")\n```\n\n# A tibble: 3 × 2\n      x y    \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 a    \n2     2 b    \n3     3 c"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#data-with-bad-names",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#data-with-bad-names",
    "title": "Importing data",
    "section": "Data with bad names",
    "text": "Data with bad names\n\nedibnb_bad_names &lt;- read_csv(\"data/edibnb-bad-names.csv\")\nnames(edibnb_bad_names)\n\n [1] \"ID\"                   \"Price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"Number of bathrooms\"  \"Number of Bedrooms\"  \n [7] \"n beds\"               \"Review Scores Rating\"\n [9] \"Number of reviews\"    \"listing_url\"         \n\n\n\n… but R doesn’t allow spaces in variable names\n\nggplot(\n  edibnb_bad_names, \n  aes(x = Number of bathrooms, y = Price)\n  ) +\n  geom_point()\n\nError: &lt;text&gt;:3:18: unexpected symbol\n2:   edibnb_bad_names, \n3:   aes(x = Number of\n                    ^"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#option-1---quote-column-names",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#option-1---quote-column-names",
    "title": "Importing data",
    "section": "Option 1 - Quote column names",
    "text": "Option 1 - Quote column names\n\nggplot(\n  edibnb_bad_names, \n  aes(x = `Number of bathrooms`, y = Price)\n  ) +\n  geom_point()"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#option-2---define-column-names",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#option-2---define-column-names",
    "title": "Importing data",
    "section": "Option 2 - Define column names",
    "text": "Option 2 - Define column names\n\nedibnb_col_names &lt;- read_csv(\n  \"data/edibnb-bad-names.csv\",\n  col_names = c(\n    \"id\", \"price\", \"neighbourhood\", \"accommodates\", \n    \"bathroom\", \"bedroom\", \"bed\", \"review_scores_rating\", \n    \"n_reviews\", \"url\"\n  )\n)\n\n\n\nnames(edibnb_col_names)\n\n [1] \"id\"                   \"price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"bathroom\"             \"bedroom\"             \n [7] \"bed\"                  \"review_scores_rating\"\n [9] \"n_reviews\"            \"url\""
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#option-3---format-column-names-to-snake_case",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#option-3---format-column-names-to-snake_case",
    "title": "Importing data",
    "section": "Option 3 - Format column names to snake_case",
    "text": "Option 3 - Format column names to snake_case\n\nlibrary(janitor)\n\nedibnb_clean_names &lt;- read_csv(\"data/edibnb-bad-names.csv\") |&gt;\n  janitor::clean_names()\n\n\n\nnames(edibnb_clean_names)\n\n [1] \"id\"                   \"price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"number_of_bathrooms\"  \"number_of_bedrooms\"  \n [7] \"n_beds\"               \"review_scores_rating\"\n [9] \"number_of_reviews\"    \"listing_url\""
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#variable-types-1",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#variable-types-1",
    "title": "Importing data",
    "section": "Variable types",
    "text": "Variable types\n\nWhich type is x? Why?\n\n\n\n\n\n\nread_csv(\"data/df-na.csv\")\n\n# A tibble: 9 × 3\n  x     y              z     \n  &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt; \n1 1     a              hi    \n2 &lt;NA&gt;  b              hello \n3 3     Not applicable 9999  \n4 4     d              ola   \n5 5     e              hola  \n6 .     f              whatup\n7 7     g              wassup\n8 8     h              sup   \n9 9     i              &lt;NA&gt;"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#option-1.-explicit-nas",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#option-1.-explicit-nas",
    "title": "Importing data",
    "section": "Option 1. Explicit NAs",
    "text": "Option 1. Explicit NAs\n\nread_csv(\n  \"data/df-na.csv\", \n  na = c(\"\", \"NA\", \".\", \"9999\", \"Not applicable\")\n)\n\n\n\n\n\n# A tibble: 9 × 3\n      x y     z     \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1     1 a     hi    \n2    NA b     hello \n3     3 &lt;NA&gt;  &lt;NA&gt;  \n4     4 d     ola   \n5     5 e     hola  \n6    NA f     whatup\n7     7 g     wassup\n8     8 h     sup   \n9     9 i     &lt;NA&gt;"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#option-2.-specify-column-types",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#option-2.-specify-column-types",
    "title": "Importing data",
    "section": "Option 2. Specify column types",
    "text": "Option 2. Specify column types\n\nread_csv(\n  \"data/df-na.csv\", \n  col_types = list(col_double(), col_character(), col_character())\n  )\n\n\n\n\n\nWarning: One or more parsing issues, call `problems()` on your data\nframe for details, e.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\n# A tibble: 9 × 3\n      x y              z     \n  &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt; \n1     1 a              hi    \n2    NA b              hello \n3     3 Not applicable 9999  \n4     4 d              ola   \n5     5 e              hola  \n6    NA f              whatup\n7     7 g              wassup\n8     8 h              sup   \n9     9 i              &lt;NA&gt;"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#column-types-for-read_csv",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#column-types-for-read_csv",
    "title": "Importing data",
    "section": "Column types for read_csv()\n",
    "text": "Column types for read_csv()\n\n\n\ntype function\ndata type\n\n\n\ncol_character()\ncharacter\n\n\ncol_date()\ndate\n\n\ncol_datetime()\nPOSIXct (date-time)\n\n\ncol_double()\ndouble (numeric)\n\n\ncol_factor()\nfactor\n\n\ncol_guess()\nlet readr guess (default)\n\n\ncol_integer()\ninteger\n\n\ncol_logical()\nlogical\n\n\ncol_number()\nnumbers mixed with non-number characters\n\n\ncol_numeric()\ndouble or integer\n\n\ncol_skip()\ndo not read\n\n\ncol_time()\ntime"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#reading-data-2",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#reading-data-2",
    "title": "Importing data",
    "section": "Reading data",
    "text": "Reading data\n\nnobel &lt;- read_excel(path = \"data/nobel.xlsx\")\n\n\n\nnobel\n\n# A tibble: 1,000 × 19\n      id first_name     last_name  born  died               \n   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;      &lt;chr&gt; &lt;dttm&gt;             \n 1   160 Jacobus H.     van 't Ho… 1852… 1911-03-01 00:00:00\n 2   569 Sully          Prudhomme  1839… 1907-09-07 00:00:00\n 3   293 Emil           von Behri… 1854… 1917-03-31 00:00:00\n 4   462 Henry          Dunant     1828… 1910-10-30 00:00:00\n 5     1 Wilhelm Conrad Röntgen    1845… 1923-02-10 00:00:00\n 6   463 Frédéric       Passy      1822… 1912-06-12 00:00:00\n 7   464 Élie           Ducommun   1833… 1906-12-07 00:00:00\n 8   465 Albert         Gobat      1843… 1914-03-16 00:00:00\n 9   294 Ronald         Ross       1857… 1932-09-16 00:00:00\n10   161 Emil           Fischer    1852… 1919-07-15 00:00:00\n# ℹ 990 more rows\n# ℹ 14 more variables: born_country &lt;chr&gt;,\n#   born_country_code &lt;chr&gt;, born_city &lt;chr&gt;,\n#   died_country &lt;chr&gt;, died_country_code &lt;chr&gt;,\n#   died_city &lt;chr&gt;, gender &lt;chr&gt;, year &lt;dbl&gt;,\n#   category &lt;chr&gt;, overall_motivation &lt;chr&gt;,\n#   motivation &lt;chr&gt;, organization_name &lt;chr&gt;, …"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#spreadsheets-with-bad-names",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#spreadsheets-with-bad-names",
    "title": "Importing data",
    "section": "Spreadsheets with “bad” names",
    "text": "Spreadsheets with “bad” names\n\nedibnb_bad_names &lt;- read_excel(\"data/edibnb-bad-names.xlsx\")\n\nnames(edibnb_bad_names)\n\n [1] \"ID\"                   \"Price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"Number of bathrooms\"  \"Number of Bedrooms\"  \n [7] \"n beds\"               \"Review Scores Rating\"\n [9] \"Number of reviews\"    \"listing_url\""
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#option-1.-define-column-names",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#option-1.-define-column-names",
    "title": "Importing data",
    "section": "Option 1. Define column names",
    "text": "Option 1. Define column names\n\nedibnb_col_names &lt;- read_excel(\n  \"data/edibnb-bad-names.xlsx\",\n  col_names = c(\n    \"id\", \"price\", \"neighbourhood\", \"accommodates\", \"bathroom\", \n    \"bedroom\", \"bed\", \"review_scores_rating\", \"n_reviews\", \"url\"\n  )\n)\n\nnames(edibnb_col_names)\n\n [1] \"id\"                   \"price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"bathroom\"             \"bedroom\"             \n [7] \"bed\"                  \"review_scores_rating\"\n [9] \"n_reviews\"            \"url\""
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#option-2.-format-column-names-to-snake_case",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#option-2.-format-column-names-to-snake_case",
    "title": "Importing data",
    "section": "Option 2. Format column names to snake_case",
    "text": "Option 2. Format column names to snake_case\n\nedibnb_clean_names &lt;- read_excel(\"data/edibnb-bad-names.xlsx\") |&gt;\n  janitor::clean_names()\n\nnames(edibnb_clean_names)\n\n [1] \"id\"                   \"price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"number_of_bathrooms\"  \"number_of_bedrooms\"  \n [7] \"n_beds\"               \"review_scores_rating\"\n [9] \"number_of_reviews\"    \"listing_url\""
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#spreadsheets-with-nas",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#spreadsheets-with-nas",
    "title": "Importing data",
    "section": "Spreadsheets with NAs",
    "text": "Spreadsheets with NAs\n\nread_excel(\"data/df-na.xlsx\")\n\n# A tibble: 9 × 3\n  x     y              z     \n  &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt; \n1 1     a              hi    \n2 NA    b              hello \n3 3     Not applicable 9999  \n4 4     d              ola   \n5 5     e              hola  \n6 .     f              whatup\n7 7     g              wassup\n8 8     h              sup   \n9 9     i              &lt;NA&gt;"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#option-1.-explicit-nas-1",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#option-1.-explicit-nas-1",
    "title": "Importing data",
    "section": "Option 1. Explicit NAs",
    "text": "Option 1. Explicit NAs\n\nread_excel(\n  \"data/df-na.xlsx\", \n  na = c(\"\", \"NA\", \".\", \"9999\", \"Not applicable\")\n)\n\n# A tibble: 9 × 3\n      x y     z     \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1     1 a     hi    \n2    NA b     hello \n3     3 &lt;NA&gt;  &lt;NA&gt;  \n4     4 d     ola   \n5     5 e     hola  \n6    NA f     whatup\n7     7 g     wassup\n8     8 h     sup   \n9     9 i     &lt;NA&gt;"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#option-2.-specify-column-types-1",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#option-2.-specify-column-types-1",
    "title": "Importing data",
    "section": "Option 2. Specify column types",
    "text": "Option 2. Specify column types\n\nread_excel(\n  \"data/df-na.xlsx\", \n  col_types = c(\"numeric\", \"text\", \"text\")\n  )\n\nWarning: Expecting numeric in A3 / R3C1: got 'NA'\n\n\nWarning: Expecting numeric in A7 / R7C1: got '.'\n\n\n# A tibble: 9 × 3\n      x y              z     \n  &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt; \n1     1 a              hi    \n2    NA b              hello \n3     3 Not applicable 9999  \n4     4 d              ola   \n5     5 e              hola  \n6    NA f              whatup\n7     7 g              wassup\n8     8 h              sup   \n9     9 i              &lt;NA&gt;"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#column-types-for-read_excel",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#column-types-for-read_excel",
    "title": "Importing data",
    "section": "Column types for read_excel()\n",
    "text": "Column types for read_excel()\n\n\n\ntype function\ndata type\n\n\n\n\"skip\"\ndo not read\n\n\n\"guess\"\nlet readxl guess (default)\n\n\n\"logical\"\nlogical\n\n\n\"numeric\"\nnumeric\n\n\n\"date\"\nPOSIXct (date-time)\n\n\n\"text\"\ncharacter\n\n\n\"list\"\na list of length 1 vectors"
  },
  {
    "objectID": "slides/2-3-importing-data/2-3-importing-data.html#other-types-of-data-1",
    "href": "slides/2-3-importing-data/2-3-importing-data.html#other-types-of-data-1",
    "title": "Importing data",
    "section": "Other types of data",
    "text": "Other types of data\n\n\ngooglesheets4: Google Sheets\n\narrow: parquet files\n\nDBI, along with a database specific backend (e.g. RMySQL, RSQLite, RPostgreSQL etc): allows you to run SQL queries against a database and return a data frame\n\nrvest: web scraping\n\nhaven: SPSS, Stata, and SAS files\n\njsonline: JSON\n\nxml2: xml\n\nhttr: web APIs\n\nsparklyr: data loaded into spark"
  },
  {
    "objectID": "exercises/tidy_basketball.html",
    "href": "exercises/tidy_basketball.html",
    "title": "Tidy Basketball",
    "section": "",
    "text": "Important\n\n\n\nPlease reference the Meet the toolkit: Programming exercises in course 1 (or refresher) for information and instructions on how to interact with the programming exercise below."
  },
  {
    "objectID": "exercises/tidy_basketball.html#getting-started",
    "href": "exercises/tidy_basketball.html#getting-started",
    "title": "Tidy Basketball",
    "section": "Getting Started",
    "text": "Getting Started\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe Portland Trailblazers are a National Basketball Association (NBA) sports team. In this mini analysis, we will work with a dataset that has informatino of the points scored by 9 Portland Trailblazers players across the first 10 games of the 2021-2022 NBA season. If you would like to become more familiar with the game of basketball, please click here. If you would like more information on the Portland Trailblazers, please click here.\nA key to these data can be found below:\n\n\n\nvariable name\ndescription\n\n\n\n\nplayer\nname of player\n\n\ngame1_home\npoints scored on game 1 on home court\n\n\n…\n…\n\n\ngame3_away\npoints scored on game 3 on away court\n\n\n…\n…\n\n\ngame10_home\npoints scored on game 10 on home court\n\n\n\nRead in the data below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPackages\nWe’ll use tidyverse for the majority of the analysis and scales for pretty plot labels later on.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\nGet to know the data\nUse glimpse() to get an overview (or “glimpse”) of the data. How many rows and columns are in this dataset? In addition, make note of the types of variables you are working with.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nWarning\n\n\n\nIf you receive the error Error: object ‘blazer’ not found, go back and read in your data above.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nglimpse(blazer)\n\nRows: 9\nColumns: 11\n$ player      &lt;chr&gt; \"Damian Lillard\", \"CJ McCollum\", \"Norman Powell\", \"Robert …\n$ game1_home  &lt;dbl&gt; 20, 24, 14, 8, 20, 5, 11, 2, 7\n$ game2_home  &lt;dbl&gt; 19, 28, 16, 6, 9, 5, 18, 8, 11\n$ game3_away  &lt;dbl&gt; 12, 20, NA, 0, 4, 8, 12, 5, 5\n$ game4_home  &lt;dbl&gt; 20, 25, NA, 3, 17, 10, 17, 8, 9\n$ game5_home  &lt;dbl&gt; 25, 14, 12, 9, 14, 9, 5, 3, 8\n$ game6_away  &lt;dbl&gt; 14, 25, 14, 6, 13, 6, 19, 8, 8\n$ game7_away  &lt;dbl&gt; 20, 20, 22, 0, 7, 0, 17, 7, 4\n$ game8_away  &lt;dbl&gt; 26, 21, 23, 6, 6, 7, 15, 0, 0\n$ game9_home  &lt;dbl&gt; 4, 27, 25, 19, 10, 0, 16, 2, 7\n$ game10_home &lt;dbl&gt; 25, 7, 13, 12, 15, 6, 10, 4, 8\n\n\nThere are 9 rows and 11 columns in blazer dataset.\nplayer is a character variable; the remaining variables are doubles.\n\n\n\nSuppose you are asked to recreate the plot below…\n\n\n\n\n\nIdentify the variables you would need to use to recreate this plot. Can this plot be recreated with how your blazer dataset current format?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nVariables in the above plot include player, game, location, and points. This plot can not be recreated with how the blazer dataset is currently formatted.\n\n\n\nNow, think critically about how we could transform our blazer dataset to have the variables necessary to make the plot above. What would our new dataset have to look like? What R function(s) could we use to transform our data into what we need?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe have a player column in the dataset. In order to get a game, location, and points, we can use pivot_longer(), which will take this wide dataset and make it into a longer dataset. That is, we can bring the variable names of game1_home, game2_home, etc. into our dataset as values, which is needed to recreate the plot above.\n\n\n\nSee more information about pivot_longer() here. We are going to create our final dataset in steps. First use pivot_longer() to change our dataset that has 90 rows and 3 columns that are named player, game, and points.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer |&gt;\n  pivot_longer(\n    cols = -player,\n    names_to = \"game\",\n    values_to = \"points\")\n\n# A tibble: 90 × 3\n   player         game        points\n   &lt;chr&gt;          &lt;chr&gt;        &lt;dbl&gt;\n 1 Damian Lillard game1_home      20\n 2 Damian Lillard game2_home      19\n 3 Damian Lillard game3_away      12\n 4 Damian Lillard game4_home      20\n 5 Damian Lillard game5_home      25\n 6 Damian Lillard game6_away      14\n 7 Damian Lillard game7_away      20\n 8 Damian Lillard game8_away      26\n 9 Damian Lillard game9_home       4\n10 Damian Lillard game10_home     25\n# ℹ 80 more rows\n\n\n\n\n\nWhat are the next steps we need to take to change our dataset to recreate the plot above?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe still need to:\n\nremove “game” text from the game column\nseparate the numeric value of game from home/away\ncreate a location column\n\n\n\n\nRe-visit the documentation for pivot_longer(). Add the argument names_prefix to your existing code above to remove the text “game” from the game column.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer |&gt;\n  pivot_longer(\n    cols = -player,\n    names_to = \"game\",\n    values_to = \"points\",\n    names_prefix = \"game\"\n  )\n\n# A tibble: 90 × 3\n   player         game    points\n   &lt;chr&gt;          &lt;chr&gt;    &lt;dbl&gt;\n 1 Damian Lillard 1_home      20\n 2 Damian Lillard 2_home      19\n 3 Damian Lillard 3_away      12\n 4 Damian Lillard 4_home      20\n 5 Damian Lillard 5_home      25\n 6 Damian Lillard 6_away      14\n 7 Damian Lillard 7_away      20\n 8 Damian Lillard 8_away      26\n 9 Damian Lillard 9_home       4\n10 Damian Lillard 10_home     25\n# ℹ 80 more rows\n\n\n\n\n\nWe now need to separate the values away from the location in the game column. Please see the documentation on separate_wider_delim here. Add to your existing code to split the game number and game location into two columns. Call the new column location. Save and name this dataset as blazer_long to be used in the next section.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long &lt;- blazer |&gt;\n  pivot_longer(\n    cols = -player,\n    names_to = \"game\",\n    values_to = \"points\",\n    names_prefix = \"game\") |&gt;\n    separate_wider_delim(game, delim = \"_\", names = c(\"game\", \"location\"))\n\nblazer_long\n\n# A tibble: 90 × 4\n   player         game  location points\n   &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1 Damian Lillard 1     home         20\n 2 Damian Lillard 2     home         19\n 3 Damian Lillard 3     away         12\n 4 Damian Lillard 4     home         20\n 5 Damian Lillard 5     home         25\n 6 Damian Lillard 6     away         14\n 7 Damian Lillard 7     away         20\n 8 Damian Lillard 8     away         26\n 9 Damian Lillard 9     home          4\n10 Damian Lillard 10    home         25\n# ℹ 80 more rows\n\n\n\n\n\n\n\nSummary statistics\nLet’s use the new blazer_long dataset to calculate some summary statistics for the Portland Trailblazers to learn more about their performance for these 10 games!\n\nCalculate the mean points scored across all players between home and away games.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  group_by(location) |&gt;\n  summarize(mean_points = mean(points, na.rm = T))\n\n# A tibble: 2 × 2\n  location mean_points\n  &lt;chr&gt;          &lt;dbl&gt;\n1 away            10.9\n2 home            12.2\n\n\n\n\n\n\nNow, calculate the mean points scored for the player Damian Lillard for both home and away games.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  filter(player == \"Damian Lillard\") |&gt;\n  group_by(location) |&gt;\n  summarize(mean_points = mean(points, na.rm = T))\n\n# A tibble: 2 × 2\n  location mean_points\n  &lt;chr&gt;          &lt;dbl&gt;\n1 away            18  \n2 home            18.8\n\n\n\n\n\n\nNow, create a table that counts the number of times a player scored 15 points (or more) a game versus the number of times a player scored less than 15 points a game.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  mutate(points_cat = ifelse(points &gt;= 15, \"yes\", \"no\")) |&gt;\n  select(points_cat) |&gt;\n  group_by(points_cat) |&gt;\n  count()\n\n# A tibble: 3 × 2\n# Groups:   points_cat [3]\n  points_cat     n\n  &lt;chr&gt;      &lt;int&gt;\n1 no            59\n2 yes           29\n3 &lt;NA&gt;           2"
  },
  {
    "objectID": "exercises/tidy_basketball.html#bonus-challange",
    "href": "exercises/tidy_basketball.html#bonus-challange",
    "title": "Tidy Basketball",
    "section": "Bonus Challange",
    "text": "Bonus Challange\nRecreate the plot, using the blazer_long dataset!\n\n\n\n\n\nHints: The code you start with makes sure that game is appropriately treated as a quantitative variable. You will learn more about data types in the following lessons! The plot above uses theme_bw().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  mutate(game = as.numeric(game)) |&gt;\n  ggplot(\n    aes(x = game, y = points, color = location, group = player)\n  ) +\n  geom_line() +\n  geom_point(shape = \"square\") +\n  facet_wrap(~player) +\n  scale_x_continuous(breaks = c(1:10)) +\n  theme_bw() +\n  labs(\n    x = \"Game\",\n    y = \"Points Scored\",\n    title = \"Points Scored Across 10 Games\",\n    subtitle = \"Portland Trailblazers (2021-2022 Season)\",\n    caption = \"https://www.basketball-reference.com/teams/POR/2021_games.html\"\n  )\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html",
    "title": "Halving CO2 emissions (Complete)",
    "section": "",
    "text": "Visitors to Gapminder.org are welcomed with a question about common misconceptions. Here is one of them.\n\nOnce you make your selection, you are directed to a page that explains the right answer and shows a visualization of the distribution of responses from various countries.\n\nOur goal is to create a version of this visualization.\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nThe data we’re going to use is in a CSV file called co2-emissions.csv at https://data-science-with-r.github.io/data/co2-emissions.csv.\n\nco2_emissions &lt;- read_csv(\"https://data-science-with-r.github.io/data/co2-emissions.csv\")\n\nRows: 8 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): Very wrong, Wrong, Correct\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAnd let’s take a look at the data.\n\nco2_emissions\n\n# A tibble: 8 × 4\n  country        `Very wrong` Wrong Correct\n  &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Türkiye                  61    23      16\n2 Columbia                 64    16      20\n3 Sweden                   36    35      29\n4 Germany                  26    41      33\n5 United Kingdom           29    37      34\n6 United States            31    32      37\n7 Kenya                    46     8      46\n8 Pakistan                 37    13      50"
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html#packages",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html#packages",
    "title": "Halving CO2 emissions (Complete)",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html#data",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html#data",
    "title": "Halving CO2 emissions (Complete)",
    "section": "",
    "text": "The data we’re going to use is in a CSV file called co2-emissions.csv at https://data-science-with-r.github.io/data/co2-emissions.csv.\n\nco2_emissions &lt;- read_csv(\"https://data-science-with-r.github.io/data/co2-emissions.csv\")\n\nRows: 8 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): Very wrong, Wrong, Correct\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAnd let’s take a look at the data.\n\nco2_emissions\n\n# A tibble: 8 × 4\n  country        `Very wrong` Wrong Correct\n  &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Türkiye                  61    23      16\n2 Columbia                 64    16      20\n3 Sweden                   36    35      29\n4 Germany                  26    41      33\n5 United Kingdom           29    37      34\n6 United States            31    32      37\n7 Kenya                    46     8      46\n8 Pakistan                 37    13      50"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html",
    "title": "Continent populations (Complete)",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to create a bar plot of total populations of continents, where the input data are:\n\nCountries and populations\nCountries and continents\n\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\n\n\nThese data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;\n\n\n\n\n\nThese data come from Our World in Data.\n\ncontinents &lt;- read_csv(\"https://data-science-with-r.github.io/data/continents.csv\")\n\nLet’s take a look at the data.\n\ncontinents\n\n# A tibble: 285 × 4\n   entity                code      year continent    \n   &lt;chr&gt;                 &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#packages",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#packages",
    "title": "Continent populations (Complete)",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#data",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#data",
    "title": "Continent populations (Complete)",
    "section": "",
    "text": "These data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;\n\n\n\n\n\nThese data come from Our World in Data.\n\ncontinents &lt;- read_csv(\"https://data-science-with-r.github.io/data/continents.csv\")\n\nLet’s take a look at the data.\n\ncontinents\n\n# A tibble: 285 × 4\n   entity                code      year continent    \n   &lt;chr&gt;                 &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#data-prep",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#data-prep",
    "title": "Continent populations (Complete)",
    "section": "Data prep",
    "text": "Data prep\n\nFor this analysis we’ll focus on the latest available population numbers – 2023. Modify the population data frame to only include 2023 population numbers. Then, rename the column containing 2023 population numbers as population.\n\n\npopulation &lt;- population |&gt;\n  select(series_name:country_code, `2023`) |&gt;\n  rename(population = `2023`)\n\n\nWhich variable(s) will we use to join the population and continents data frames?\n\nFrom population country_code\nFrom continents code\n\nWe want to create a new data frame that keeps all rows and columns from population and brings in the corresponding information from continents. Which join function should we use?\n\nleft_join()\n\nJoin the two data frames and name assign the joined data frame to a new data frame population_continents.\n\n\npopulation_continents &lt;- population |&gt;\n  left_join(continents |&gt; select(code, continent), by = join_by(country_code == code))\n\n\nTake a look at the newly created population_continent data frame. There are some countries that were not in continents. First, identify which countries these are (they will have NA values for continent).\n\n\npopulation_continents |&gt;\n  filter(is.na(continent))\n\n# A tibble: 2 × 6\n  series_name       series_code country_name   country_code population continent\n  &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;          &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;    \n1 Population, total SP.POP.TOTL Channel Islan… CHI              175346 &lt;NA&gt;     \n2 Population, total SP.POP.TOTL Kosovo         XKX             1756374 &lt;NA&gt;     \n\n\nKosovo - OWID_KOS\nChannel Islands - OWID_CIS\n\nAll of these countries are actually in the continents data frame, but under different names. So, let’s clean that data first by updating the country names in the population data frame in a way they will match the continents data frame, and then joining them, using a case_when() statement in mutate(). At the end, check that all countries now have continent information.\n\n\npopulation_continents &lt;- population |&gt;\n  mutate(\n    country_code = case_when(\n      country_name == \"Kosovo\" ~ \"OWID_KOS\",\n      country_name == \"Channel Islands\" ~ \"OWID_CIS\",\n      .default = country_code\n    )\n  ) |&gt;\n  left_join(continents |&gt; select(code, continent), by = join_by(country_code == code))\n\npopulation_continents |&gt;\n  filter(is.na(continent))\n\n# A tibble: 0 × 6\n# ℹ 6 variables: series_name &lt;chr&gt;, series_code &lt;chr&gt;, country_name &lt;chr&gt;,\n#   country_code &lt;chr&gt;, population &lt;dbl&gt;, continent &lt;chr&gt;\n\n\n\nWhich continent do you think has the highest population? Which do you think has the second highest? The lowest?\n\nAdd response here.\n\nCreate a new data frame called population_summary that contains a row for each continent and a column for the total population for that continent, in descending order of population. Note that the function for calculating totals in R is sum().\n\n\npopulation_summary &lt;- population_continents |&gt;\n  group_by(continent) |&gt;\n  summarize(total_population = sum(population))"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#visualization",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#visualization",
    "title": "Continent populations (Complete)",
    "section": "Visualization",
    "text": "Visualization\n\nMake a bar plot with total population on the y-axis and continent on the x-axis, where the height of each bar represents the total population in that continent.\n\n\nggplot(population_summary, aes(x = continent, y = total_population)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nRecreate the following plot, which is commonly referred to as a lollipop plot. Hint: Start with the points, then try adding the segments, then add axis labels and caption, update the x scale.\n\n\n\nggplot(population_summary) +\n  geom_point(aes(y = continent, x = total_population)) +\n  geom_segment(\n    aes(\n      x = 0, xend = total_population, \n      y = continent, yend = continent)\n    ) +\n  theme_minimal() +\n  labs(\n    x = \"Total population\",\n    y = \"Continent\",\n    title = \"World population\",\n    subtitle = \"As of 2023\",\n    caption = \"Data sources: The World Bank and Our World in Data\"\n  ) +\n  scale_x_continuous(labels = label_number(scale = 1/1000000000, suffix = \" bil\"))\n\n\n\n\n\n\n\n\n\nWhat additional improvements would you like to make to this plot.\n\nAdd response here."
  },
  {
    "objectID": "code-alongs/2-1-thats-my-type/2-1-thats-my-type.html",
    "href": "code-alongs/2-1-thats-my-type/2-1-thats-my-type.html",
    "title": "That’s my type",
    "section": "",
    "text": "In the following exercises, first guess what type the vector will be coerced to, then check your intuition with the typeof() function.\n\nc(1, 1L, \"C\")\n\n\nc(1, 1L, \"C\")\n\n[1] \"1\" \"1\" \"C\"\n\n\n\n1\n\n[1] 1\n\n1L\n\n[1] 1\n\n\"C\"\n\n[1] \"C\"\n\n\nGuess: ___\n\n#typeof(c(1, 1L, \"C\"))\n\n\nc(1L / 0, \"A\")\n\n\n# add code here\n\n\n# add code here\n\nGuess: ___\n\n# add code here\n\n\nc(1:3, 5)\n\n\n# add code here\n\n\n# add code here\n\nGuess: ___\n\n# add code here\n\n\nc(3, \"3+\")\n\n\n# add code here\n\n\n# add code here\n\nGuess: ___\n\n# add code here\n\n\nc(NA, TRUE)\n\n\n# add code here\n\n\n# add code here\n\nGuess: ___\n\n# add code here"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html",
    "title": "Country populations over time (Complete)",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization.\n\n\n\n\n\n\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nThese data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#goal",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#goal",
    "title": "Country populations over time (Complete)",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization."
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#packages",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#packages",
    "title": "Country populations over time (Complete)",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#data",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#data",
    "title": "Country populations over time (Complete)",
    "section": "",
    "text": "These data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#tidying",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#tidying",
    "title": "Country populations over time (Complete)",
    "section": "Tidying",
    "text": "Tidying\n\nWhat are the aesthetic mappings in the plot shown above, i.e., what pieces of information do we need represented as columns (variables) in our data frame in order to be able to recreate this plot?\n\nx: year\ny: population\ncolor, shape: country_name\n\nReshape the population data such that it can be used to recreate the plot above. Note: For now, you can keep all the countries in the dataset.\n\n\npopulation |&gt;\n  pivot_longer(\n    cols = `2000`:`2023`,\n    names_to = \"year\",\n    values_to = \"population\"\n  )\n\n# A tibble: 5,208 × 6\n   series_name       series_code country_name country_code year  population\n   &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt;\n 1 Population, total SP.POP.TOTL Afghanistan  AFG          2000    19542982\n 2 Population, total SP.POP.TOTL Afghanistan  AFG          2001    19688632\n 3 Population, total SP.POP.TOTL Afghanistan  AFG          2002    21000256\n 4 Population, total SP.POP.TOTL Afghanistan  AFG          2003    22645130\n 5 Population, total SP.POP.TOTL Afghanistan  AFG          2004    23553551\n 6 Population, total SP.POP.TOTL Afghanistan  AFG          2005    24411191\n 7 Population, total SP.POP.TOTL Afghanistan  AFG          2006    25442944\n 8 Population, total SP.POP.TOTL Afghanistan  AFG          2007    25903301\n 9 Population, total SP.POP.TOTL Afghanistan  AFG          2008    26427199\n10 Population, total SP.POP.TOTL Afghanistan  AFG          2009    27385307\n# ℹ 5,198 more rows\n\n\n\nWhat is the type of the year variable? Why? What should it be?\n\nCharacter. It should be numeric.\n\nStart over with pivoting, and this time also make sure year is a numerical variable in the resulting data frame. Save the resulting data frame as population_longer.\n\n\npopulation_longer &lt;- population |&gt;\n  pivot_longer(\n    cols = `2000`:`2023`,\n    names_to = \"year\",\n    values_to = \"population\",\n    names_transform = as.numeric\n  )\npopulation_longer\n\n# A tibble: 5,208 × 6\n   series_name       series_code country_name country_code  year population\n   &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt;      &lt;dbl&gt;\n 1 Population, total SP.POP.TOTL Afghanistan  AFG           2000   19542982\n 2 Population, total SP.POP.TOTL Afghanistan  AFG           2001   19688632\n 3 Population, total SP.POP.TOTL Afghanistan  AFG           2002   21000256\n 4 Population, total SP.POP.TOTL Afghanistan  AFG           2003   22645130\n 5 Population, total SP.POP.TOTL Afghanistan  AFG           2004   23553551\n 6 Population, total SP.POP.TOTL Afghanistan  AFG           2005   24411191\n 7 Population, total SP.POP.TOTL Afghanistan  AFG           2006   25442944\n 8 Population, total SP.POP.TOTL Afghanistan  AFG           2007   25903301\n 9 Population, total SP.POP.TOTL Afghanistan  AFG           2008   26427199\n10 Population, total SP.POP.TOTL Afghanistan  AFG           2009   27385307\n# ℹ 5,198 more rows"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#visualization",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#visualization",
    "title": "Country populations over time (Complete)",
    "section": "Visualization",
    "text": "Visualization\n\nNow we start making our plot, but let’s not get too fancy right away. Create a line plot of populations of the United States, India, and China over the years. Represent the data with points and lines.\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\n\n\n\n\nWhat aspects of the plot need to be updated to go from the draft you created above to the goal plot at the beginning of this application exercise.\n\nx and y axis scales\nshapes\ntheme\nlabels\nplacement of legend\n\nUse different shapes for each country’s points.\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\n\n\n\n\nUpdate x-axis scale such that the years displayed go from 2000 to 2024 in increments of 4 years.\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4))\n\n\n\n\n\n\n\n\n\nUpdate the y-axis so it’s scaled to millions and uses the same breaks as the goal plot.\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(\n    breaks = seq(250000000, 1250000000, 250000000),\n    labels = label_number(scale = 1/1000000, suffix = \" mil\")\n  )\n\n\n\n\n\n\n\n\n\nUpdate colors for each country using the following level / color assignments.\n\n“United States” = “#0A3161”\n“India” = “#FF671F”\n“China” = “#EE1C25”\n\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(\n    breaks = seq(250000000, 1250000000, 250000000),\n    labels = label_number(scale = 1/1000000, suffix = \" mil\")\n  ) +\n  scale_color_manual(\n    values = c(\n      \"United States\" = \"#0A3161\",\n      \"India\" = \"#FF671F\",\n      \"China\" = \"#EE1C25\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nUpdate the plot labels (title, subtitle, x, y, and caption) and use theme_minimal().\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(\n    breaks = seq(250000000, 1250000000, 250000000),\n    labels = label_number(scale = 1/1000000, suffix = \" mil\")\n  ) +\n  scale_color_manual(\n    values = c(\n      \"United States\" = \"#0A3161\",\n      \"India\" = \"#FF671F\",\n      \"China\" = \"#EE1C25\"\n    )\n  ) +\n  theme_minimal() +\n  labs(\n    x = \"Year\",\n    y = \"Population (in millions)\",\n    title = \"Country populations over the years\",\n    subtitle = \"2000 to 2023\",\n    caption = \"Data source: The World Bank\"\n  )\n\n\n\n\n\n\n\n\n\nFinally, move the legend to the top of the plot and remove its label.\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(\n    breaks = seq(250000000, 1250000000, 250000000),\n    labels = label_number(scale = 1/1000000, suffix = \" mil\")\n  ) +\n  scale_color_manual(\n    values = c(\n      \"United States\" = \"#0A3161\",\n      \"India\" = \"#FF671F\",\n      \"China\" = \"#EE1C25\"\n    )\n  ) +\n  labs(\n    x = \"Year\",\n    y = \"Population (in millions)\",\n    color = NULL,\n    shape = NULL,\n    title = \"Country populations over the years\",\n    subtitle = \"2000 to 2023\",\n    caption = \"Data source: The World Bank\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"top\")"
  }
]