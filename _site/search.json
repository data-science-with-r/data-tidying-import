[
  {
    "objectID": "exercises/tidy_basketball.html",
    "href": "exercises/tidy_basketball.html",
    "title": "Tidy Basketball",
    "section": "",
    "text": "Important\n\n\n\nPlease reference the Meet the toolkit: Programming exercises in course 1 (or refresher) for information and instructions on how to interact with the programming exercise below."
  },
  {
    "objectID": "exercises/tidy_basketball.html#getting-started",
    "href": "exercises/tidy_basketball.html#getting-started",
    "title": "Tidy Basketball",
    "section": "Getting Started",
    "text": "Getting Started\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe Portland Trailblazers are a National Basketball Association (NBA) sports team. In this mini analysis, we will work with a dataset that has informatino of the points scored by 9 Portland Trailblazers players across the first 10 games of the 2021-2022 NBA season. If you would like to become more familiar with the game of basketball, please click here. If you would like more information on the Portland Trailblazers, please click here.\nA key to these data can be found below:\n\n\n\nvariable name\ndescription\n\n\n\n\nplayer\nname of player\n\n\ngame1_home\npoints scored on game 1 on home court\n\n\n…\n…\n\n\ngame3_away\npoints scored on game 3 on away court\n\n\n…\n…\n\n\ngame10_home\npoints scored on game 10 on home court\n\n\n\nRead in the data below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPackages\nWe’ll use tidyverse for the majority of the analysis and scales for pretty plot labels later on.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\nGet to know the data\nUse glimpse() to get an overview (or “glimpse”) of the data. How many rows and columns are in this dataset? In addition, make note of the types of variables you are working with.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nWarning\n\n\n\nIf you receive the error Error: object ‘blazer’ not found, go back and read in your data above.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nglimpse(blazer)\n\nRows: 9\nColumns: 11\n$ player      &lt;chr&gt; \"Damian Lillard\", \"CJ McCollum\", \"Norman Powell\", \"Robert …\n$ game1_home  &lt;dbl&gt; 20, 24, 14, 8, 20, 5, 11, 2, 7\n$ game2_home  &lt;dbl&gt; 19, 28, 16, 6, 9, 5, 18, 8, 11\n$ game3_away  &lt;dbl&gt; 12, 20, NA, 0, 4, 8, 12, 5, 5\n$ game4_home  &lt;dbl&gt; 20, 25, NA, 3, 17, 10, 17, 8, 9\n$ game5_home  &lt;dbl&gt; 25, 14, 12, 9, 14, 9, 5, 3, 8\n$ game6_away  &lt;dbl&gt; 14, 25, 14, 6, 13, 6, 19, 8, 8\n$ game7_away  &lt;dbl&gt; 20, 20, 22, 0, 7, 0, 17, 7, 4\n$ game8_away  &lt;dbl&gt; 26, 21, 23, 6, 6, 7, 15, 0, 0\n$ game9_home  &lt;dbl&gt; 4, 27, 25, 19, 10, 0, 16, 2, 7\n$ game10_home &lt;dbl&gt; 25, 7, 13, 12, 15, 6, 10, 4, 8\n\n\nThere are 9 rows and 11 columns in blazer dataset.\nplayer is a character variable; the remaining variables are doubles.\n\n\n\nSuppose you are asked to recreate the plot below…\n\n\n\n\n\nIdentify the variables you would need to use to recreate this plot. Can this plot be recreated with how your blazer dataset current format?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nVariables in the above plot include player, game, location, and points. This plot can not be recreated with how the blazer dataset is currently formatted.\n\n\n\nNow, think critically about how we could transform our blazer dataset to have the variables necessary to make the plot above. What would our new dataset have to look like? What R function(s) could we use to transform our data into what we need?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe have a player column in the dataset. In order to get a game, location, and points, we can use pivot_longer(), which will take this wide dataset and make it into a longer dataset. That is, we can bring the variable names of game1_home, game2_home, etc. into our dataset as values, which is needed to recreate the plot above.\n\n\n\nSee more information about pivot_longer() here. We are going to create our final dataset in steps. First use pivot_longer() to change our dataset that has 90 rows and 3 columns that are named player, game, and points.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer |&gt;\n  pivot_longer(\n    cols = -player,\n    names_to = \"game\",\n    values_to = \"points\")\n\n# A tibble: 90 × 3\n   player         game        points\n   &lt;chr&gt;          &lt;chr&gt;        &lt;dbl&gt;\n 1 Damian Lillard game1_home      20\n 2 Damian Lillard game2_home      19\n 3 Damian Lillard game3_away      12\n 4 Damian Lillard game4_home      20\n 5 Damian Lillard game5_home      25\n 6 Damian Lillard game6_away      14\n 7 Damian Lillard game7_away      20\n 8 Damian Lillard game8_away      26\n 9 Damian Lillard game9_home       4\n10 Damian Lillard game10_home     25\n# ℹ 80 more rows\n\n\n\n\n\nWhat are the next steps we need to take to change our dataset to recreate the plot above?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe still need to:\n\nremove “game” text from the game column\nseparate the numeric value of game from home/away\ncreate a location column\n\n\n\n\nRe-visit the documentation for pivot_longer(). Add the argument names_prefix to your existing code above to remove the text “game” from the game column.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer |&gt;\n  pivot_longer(\n    cols = -player,\n    names_to = \"game\",\n    values_to = \"points\",\n    names_prefix = \"game\"\n  )\n\n# A tibble: 90 × 3\n   player         game    points\n   &lt;chr&gt;          &lt;chr&gt;    &lt;dbl&gt;\n 1 Damian Lillard 1_home      20\n 2 Damian Lillard 2_home      19\n 3 Damian Lillard 3_away      12\n 4 Damian Lillard 4_home      20\n 5 Damian Lillard 5_home      25\n 6 Damian Lillard 6_away      14\n 7 Damian Lillard 7_away      20\n 8 Damian Lillard 8_away      26\n 9 Damian Lillard 9_home       4\n10 Damian Lillard 10_home     25\n# ℹ 80 more rows\n\n\n\n\n\nWe now need to separate the values away from the location in the game column. Please see the documentation on separate_wider_delim here. Add to your existing code to split the game number and game location into two columns. Call the new column location. Save and name this dataset as blazer_long to be used in the next section.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long &lt;- blazer |&gt;\n  pivot_longer(\n    cols = -player,\n    names_to = \"game\",\n    values_to = \"points\",\n    names_prefix = \"game\") |&gt;\n    separate_wider_delim(game, delim = \"_\", names = c(\"game\", \"location\"))\n\nblazer_long\n\n# A tibble: 90 × 4\n   player         game  location points\n   &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1 Damian Lillard 1     home         20\n 2 Damian Lillard 2     home         19\n 3 Damian Lillard 3     away         12\n 4 Damian Lillard 4     home         20\n 5 Damian Lillard 5     home         25\n 6 Damian Lillard 6     away         14\n 7 Damian Lillard 7     away         20\n 8 Damian Lillard 8     away         26\n 9 Damian Lillard 9     home          4\n10 Damian Lillard 10    home         25\n# ℹ 80 more rows\n\n\n\n\n\n\n\nSummary statistics\nLet’s use the new blazer_long dataset to calculate some summary statistics for the Portland Trailblazers to learn more about their performance for these 10 games!\n\nCalculate the mean points scored across all players between home and away games.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  group_by(location) |&gt;\n  summarize(mean_points = mean(points, na.rm = T))\n\n# A tibble: 2 × 2\n  location mean_points\n  &lt;chr&gt;          &lt;dbl&gt;\n1 away            10.9\n2 home            12.2\n\n\n\n\n\n\nNow, calculate the mean points scored for the player Damian Lillard for both home and away games.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  filter(player == \"Damian Lillard\") |&gt;\n  group_by(location) |&gt;\n  summarize(mean_points = mean(points, na.rm = T))\n\n# A tibble: 2 × 2\n  location mean_points\n  &lt;chr&gt;          &lt;dbl&gt;\n1 away            18  \n2 home            18.8\n\n\n\n\n\n\nNow, create a table that counts the number of times a player scored 15 points (or more) a game versus the number of times a player scored less than 15 points a game.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  mutate(points_cat = ifelse(points &gt;= 15, \"yes\", \"no\")) |&gt;\n  select(points_cat) |&gt;\n  group_by(points_cat) |&gt;\n  count()\n\n# A tibble: 3 × 2\n# Groups:   points_cat [3]\n  points_cat     n\n  &lt;chr&gt;      &lt;int&gt;\n1 no            59\n2 yes           29\n3 &lt;NA&gt;           2"
  },
  {
    "objectID": "exercises/tidy_basketball.html#bonus-challange",
    "href": "exercises/tidy_basketball.html#bonus-challange",
    "title": "Tidy Basketball",
    "section": "Bonus Challange",
    "text": "Bonus Challange\nRecreate the plot, using the blazer_long dataset!\n\n\n\n\n\nHints: The code you start with makes sure that game is appropriately treated as a quantitative variable. You will learn more about data types in the following lessons! The plot above uses theme_bw().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  mutate(game = as.numeric(game)) |&gt;\n  ggplot(\n    aes(x = game, y = points, color = location, group = player)\n  ) +\n  geom_line() +\n  geom_point(shape = \"square\") +\n  facet_wrap(~player) +\n  scale_x_continuous(breaks = c(1:10)) +\n  theme_bw() +\n  labs(\n    x = \"Game\",\n    y = \"Points Scored\",\n    title = \"Points Scored Across 10 Games\",\n    subtitle = \"Portland Trailblazers (2021-2022 Season)\",\n    caption = \"https://www.basketball-reference.com/teams/POR/2021_games.html\"\n  )\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html",
    "title": "Tidy data",
    "section": "",
    "text": "Happy families are all alike; every unhappy family is unhappy in its own way.\nLeo Tolstoy\n\n\n\nCharacteristics of tidy data:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\n\nCharacteristics of untidy data:\n!@#$%^&*()"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#tidy-data",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#tidy-data",
    "title": "Tidy data",
    "section": "",
    "text": "Happy families are all alike; every unhappy family is unhappy in its own way.\nLeo Tolstoy\n\n\n\nCharacteristics of tidy data:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\n\nCharacteristics of untidy data:\n!@#$%^&*()"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy",
    "title": "Tidy data",
    "section": "What makes this data not tidy?",
    "text": "What makes this data not tidy?\n\n\n\nSource: Army Air Forces Statistical Digest, WW II"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy-1",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy-1",
    "title": "Tidy data",
    "section": "What makes this data not tidy?",
    "text": "What makes this data not tidy?\n\n\n\nSource: Gapminder, Estimated HIV prevalence among 15-49 year olds"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy-2",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-this-data-not-tidy-2",
    "title": "Tidy data",
    "section": "What makes this data not tidy?",
    "text": "What makes this data not tidy?\n\n\n\nSource: US Census Fact Finder, General Economic Characteristics, ACS 2017"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-data-tidy",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#what-makes-data-tidy",
    "title": "Tidy data",
    "section": "What makes data tidy?",
    "text": "What makes data tidy?\n\n“Tidy datasets are easy to manipulate, model and visualise, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table.”\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\n“easy to manipulate” = “straightforward to manipulate”\n\n\n\n\nWickham, H. (2014). Tidy data. Journal of statistical software, 59, 1-23."
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#displaying-vs.-summarizing-data",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#displaying-vs.-summarizing-data",
    "title": "Tidy data",
    "section": "Displaying vs. summarizing data",
    "text": "Displaying vs. summarizing data\n\n\nDisplay\n\n\n# A tibble: 87 × 3\n   name               height  mass\n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt;\n 1 Luke Skywalker        172    77\n 2 C-3PO                 167    75\n 3 R2-D2                  96    32\n 4 Darth Vader           202   136\n 5 Leia Organa           150    49\n 6 Owen Lars             178   120\n 7 Beru Whitesun Lars    165    75\n 8 R5-D4                  97    32\n 9 Biggs Darklighter     183    84\n10 Obi-Wan Kenobi        182    77\n# ℹ 77 more rows\n\n\n\nSummarize\n\n\n# A tibble: 3 × 2\n  gender    avg_ht\n  &lt;chr&gt;      &lt;dbl&gt;\n1 feminine    167.\n2 masculine   177.\n3 &lt;NA&gt;        175"
  },
  {
    "objectID": "slides/1-2-tidy-data/1-2-tidy-data.html#displaying-vs.-summarizing-data-1",
    "href": "slides/1-2-tidy-data/1-2-tidy-data.html#displaying-vs.-summarizing-data-1",
    "title": "Tidy data",
    "section": "Displaying vs. summarizing data",
    "text": "Displaying vs. summarizing data\n\n\nDisplay\n\nstarwars |&gt;\n  select(name, height, mass)\n\n\nSummarize\n\nstarwars |&gt;\n  group_by(gender) |&gt;\n  summarize(\n    avg_ht = mean(height, na.rm = TRUE)\n  )"
  },
  {
    "objectID": "exercises/noble.html",
    "href": "exercises/noble.html",
    "title": "Nobel Prize winners & sales data",
    "section": "",
    "text": "We will use the following two packages in this application exercise.\n\ntidyverse: For data import, wrangling, and visualization.\nreadxl: For importing data from Excel."
  },
  {
    "objectID": "exercises/noble.html#packages",
    "href": "exercises/noble.html#packages",
    "title": "Nobel Prize winners & sales data",
    "section": "",
    "text": "We will use the following two packages in this application exercise.\n\ntidyverse: For data import, wrangling, and visualization.\nreadxl: For importing data from Excel."
  },
  {
    "objectID": "exercises/noble.html#nobel-prize-winners",
    "href": "exercises/noble.html#nobel-prize-winners",
    "title": "Nobel Prize winners & sales data",
    "section": "Nobel Prize winners",
    "text": "Nobel Prize winners\nFor this exercise, we are going to work with a Nobel Prize winners dataset from the years 1901 through 2018. Please read in the following data below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBased on the tibble output, what are the number of rows and columns of the nobel dataset? What types of variables are you working with?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThere are 935 rows and 26 columns in nobel dataset.\nThere are 21 character variables, 3 dbl variables, and 2 date variables\n\n\n\nNow, rerun the code above to read in the dataset, but use the argument show_col_types = FALSE to suppress the given dataset information\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nnobel &lt;- read_csv(\"nobel.csv\", show_col_types = FALSE)\n\nNotice that there is no given message when running the code. This code simply loads the dataset."
  },
  {
    "objectID": "exercises/noble.html#type-coercion",
    "href": "exercises/noble.html#type-coercion",
    "title": "Nobel Prize winners & sales data",
    "section": "Type coercion",
    "text": "Type coercion\nWe are going to use the nobel dataset to explore type coercion. Using glimpse(), identify what type of variable gender is in this dataset. Additionally, identify the levels of this variable.\n\n# add response here\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nglimpse(nobel)\n\nRows: 935\nColumns: 26\n$ id                    &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 6, 8, 9, 10, 11, 12, 13, 14, 1…\n$ firstname             &lt;chr&gt; \"Wilhelm Conrad\", \"Hendrik A.\", \"Pieter\", \"Henri…\n$ surname               &lt;chr&gt; \"Röntgen\", \"Lorentz\", \"Zeeman\", \"Becquerel\", \"Cu…\n$ year                  &lt;dbl&gt; 1901, 1902, 1902, 1903, 1903, 1903, 1911, 1904, …\n$ category              &lt;chr&gt; \"Physics\", \"Physics\", \"Physics\", \"Physics\", \"Phy…\n$ affiliation           &lt;chr&gt; \"Munich University\", \"Leiden University\", \"Amste…\n$ city                  &lt;chr&gt; \"Munich\", \"Leiden\", \"Amsterdam\", \"Paris\", \"Paris…\n$ country               &lt;chr&gt; \"Germany\", \"Netherlands\", \"Netherlands\", \"France…\n$ born_date             &lt;date&gt; 1845-03-27, 1853-07-18, 1865-05-25, 1852-12-15,…\n$ died_date             &lt;date&gt; 1923-02-10, 1928-02-04, 1943-10-09, 1908-08-25,…\n$ gender                &lt;chr&gt; \"male\", \"male\", \"male\", \"male\", \"male\", \"female\"…\n$ born_city             &lt;chr&gt; \"Remscheid\", \"Arnhem\", \"Zonnemaire\", \"Paris\", \"P…\n$ born_country          &lt;chr&gt; \"Germany\", \"Netherlands\", \"Netherlands\", \"France…\n$ born_country_code     &lt;chr&gt; \"DE\", \"NL\", \"NL\", \"FR\", \"FR\", \"PL\", \"PL\", \"GB\", …\n$ died_city             &lt;chr&gt; \"Munich\", NA, \"Amsterdam\", NA, \"Paris\", \"Sallanc…\n$ died_country          &lt;chr&gt; \"Germany\", \"Netherlands\", \"Netherlands\", \"France…\n$ died_country_code     &lt;chr&gt; \"DE\", \"NL\", \"NL\", \"FR\", \"FR\", \"FR\", \"FR\", \"GB\", …\n$ overall_motivation    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ share                 &lt;dbl&gt; 1, 2, 2, 2, 4, 4, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, …\n$ motivation            &lt;chr&gt; \"\\\"in recognition of the extraordinary services …\n$ born_country_original &lt;chr&gt; \"Prussia (now Germany)\", \"the Netherlands\", \"the…\n$ born_city_original    &lt;chr&gt; \"Lennep (now Remscheid)\", \"Arnhem\", \"Zonnemaire\"…\n$ died_country_original &lt;chr&gt; \"Germany\", \"the Netherlands\", \"the Netherlands\",…\n$ died_city_original    &lt;chr&gt; \"Munich\", NA, \"Amsterdam\", NA, \"Paris\", \"Sallanc…\n$ city_original         &lt;chr&gt; \"Munich\", \"Leiden\", \"Amsterdam\", \"Paris\", \"Paris…\n$ country_original      &lt;chr&gt; \"Germany\", \"the Netherlands\", \"the Netherlands\",…\n\nnobel |&gt;\n  group_by(gender) |&gt;\n  count(gender)\n\n# A tibble: 3 × 2\n# Groups:   gender [3]\n  gender     n\n  &lt;chr&gt;  &lt;int&gt;\n1 female    52\n2 male     856\n3 org       27\n\n\ngender is a character variable. This variable has three different genders: male, female, and org.\n\n\n\nSuppose we want to turn the three listed genders into numeric values. Run the following code. What happened?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWhen trying to change male, female and org into numbers from characters, each value became an NA.\n\n\n\nIf we want the function as.numeric() to coerce these values into numbers, we need to change them to be a factor first. Run the following code, and compare the results. What values were assigned to which group? How do you think R determined this?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nR assigned male = 2; female = 1; and org = 3. These were assigned alpha-numerically.\n\n\n\nNote, that you can also avoid type coercion by manually setting values (see example code below).\n\nnobel |&gt;\n  mutate(gender_num = case_when(\n    gender == \"female\" ~ 1,\n    gender == \"male\" ~ 2,\n    gender == \"org\" ~ 3\n  )) |&gt;\n  select(gender, gender_num) |&gt;\n  unique()\n\n# A tibble: 3 × 2\n  gender gender_num\n  &lt;chr&gt;       &lt;dbl&gt;\n1 male            2\n2 female          1\n3 org             3\n\n\nSuppose you wanted to make this change to the nobel dataset, and export a new csv to your current working directory on your local installment. This can be accomplished using write_csv(). See the help file here."
  },
  {
    "objectID": "exercises/noble.html#sales",
    "href": "exercises/noble.html#sales",
    "title": "Nobel Prize winners & sales data",
    "section": "Sales",
    "text": "Sales\nFor the remaining part of this exercise, we are going to learn how to read in and clean up data that come from excel. The messy data that we are going to work with can be seen in below.\n\n\n\n\n\nWe are going to use read_excel() to read in a xlsx excel file. Read in the file and take a glimpse of these data. Why can we not work with these data in their current form?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThese data are not tidy. These data are read in with the text as a column name, and creates another column name called ...2.\n\n\n\nSee the help file for read_excel() here. Notice that, in the current sales dataset, we want to skip 3 rows (the first row acts as a header for the column names). We can do this using the skip argument. At the same time, we can specify names for each column by giving the argument col_names a character vector. Use these arguments and add to the code below to skip 3 lines and name the columns id and n.\nsales &lt;- read_excel(\n  \"sales.xlsx\", \n# add code here\n)\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nsales &lt;- read_excel(\n  \"sales.xlsx\",\n  skip = 3,\n  col_names = c(\"id\", \"n\")\n)\n\nsales"
  },
  {
    "objectID": "exercises/noble.html#putting-it-all-together",
    "href": "exercises/noble.html#putting-it-all-together",
    "title": "Nobel Prize winners & sales data",
    "section": "Putting it all together",
    "text": "Putting it all together\nManipulate the sales data such such that it looks like the following using functions you have learned from the tidyverse to transform data.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nsales |&gt;\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    brand = if_else(is_brand_name, id, NA)\n  ) |&gt;\n  fill(brand) |&gt;\n  filter(!is_brand_name) |&gt;\n  select(brand, id, n)\n\n# A tibble: 7 × 3\n  brand   id    n    \n  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;\n1 Brand 1 1234  8    \n2 Brand 1 8721  2    \n3 Brand 1 1822  3    \n4 Brand 2 3333  1    \n5 Brand 2 2156  3    \n6 Brand 2 3987  6    \n7 Brand 2 3216  5    \n\n\n\n\n\nTakeaway We should write code to manipulate data instead of opening Excel and editing the data in there because it allows us to re-use the data multiple times, and leaves a transparent trail of any modifications done while manipulating the data. Changing data in Excel is neither reproducible nor reusable."
  }
]