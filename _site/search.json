[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": " Data tidying and importing",
    "section": "",
    "text": "Title\n\n\n\n\n\n\nWelcome\n\n\n\n\nTidy data\n\n\n\n\nTidying data\n\n\n\n\nJoining data\n\n\n\n\nData types\n\n\n\n\nData classes\n\n\n\n\nImporting data\n\n\n\n\nWeb scraping\n\n\n\n\nWeb scraping considerations\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": " Data tidying and importing",
    "section": "",
    "text": "Title\n\n\n\n\n\n\nWelcome\n\n\n\n\nTidy data\n\n\n\n\nTidying data\n\n\n\n\nJoining data\n\n\n\n\nData types\n\n\n\n\nData classes\n\n\n\n\nImporting data\n\n\n\n\nWeb scraping\n\n\n\n\nWeb scraping considerations\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#code-alongs",
    "href": "index.html#code-alongs",
    "title": " Data tidying and importing",
    "section": "Code alongs",
    "text": "Code alongs\n\n\n\n\n\nTitle\n\n\n\n\n\n\nCountry populations over time (Complete)\n\n\n\n\nCountry populations over time\n\n\n\n\nContinent populations (Complete)\n\n\n\n\nContinent populations\n\n\n\n\nThat’s my type (Complete)\n\n\n\n\nThat’s my type\n\n\n\n\nHalving CO2 emissions (Complete)\n\n\n\n\nHalving CO2 emissions\n\n\n\n\nStudent survey\n\n\n\n\nStudent survey\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#exercises",
    "href": "index.html#exercises",
    "title": " Data tidying and importing",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\nTitle\n\n\n\n\n\n\nNobel Prize winners & sales data\n\n\n\n\nTidy Basketball\n\n\n\n\nScraping Star Wars movies and an E-Commerce website\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exercises/nobel.html#packages",
    "href": "exercises/nobel.html#packages",
    "title": "Nobel Prize winners & sales data",
    "section": "Packages",
    "text": "Packages\nWe will use the following two packages in this application exercise.\n\ntidyverse: For data import, wrangling, and visualization.\nreadxl: For importing data from MS Excel.\n\nLet’s first load the packages."
  },
  {
    "objectID": "exercises/nobel.html#nobel-prize-winners",
    "href": "exercises/nobel.html#nobel-prize-winners",
    "title": "Nobel Prize winners & sales data",
    "section": "Nobel Prize winners",
    "text": "Nobel Prize winners\nFor this exercise, we are going to work with a data on Nobel Prize winners from the years 1901 through 2018, called nobel.csv.\nLoad the dataset with read_csv() and save it as a data frame (a tibble) called nobel. How many rows are there in nobel and what does each row represent? How many columns are there in nobel?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nRead in the data with read_csv() and pass the name of the data file, \"nobel.csv\" as the argument of this funtion.\n___ &lt;- read_csv(\"nobel.csv\")\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nAssign the result of read_csv(\"nobel.csv\") to nobel.\nnobel &lt;- read_csv(\"nobel.csv\")\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnobel &lt;- read_csv(\"nobel.csv\")\nThere are 935 rows and 26 columns in nobel data frame. Each row represents a Nobel prize winner.\n\n\n\n\nNow, read the data in again, but this time add the argument show_col_types to the read_csv() function and set it to `FALSE. This will suppress the information on column specifications (what type each column is).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnobel &lt;- read_csv(\"nobel.csv\", show_col_types = FALSE)\nNotice that the column specification is no longer printed."
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html",
    "title": "Country populations over time (Complete)",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization.\n\n\n\n\n\n\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nThese data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#goal",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#goal",
    "title": "Country populations over time (Complete)",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization."
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#packages",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#packages",
    "title": "Country populations over time (Complete)",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#data",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#data",
    "title": "Country populations over time (Complete)",
    "section": "",
    "text": "These data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#tidying",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#tidying",
    "title": "Country populations over time (Complete)",
    "section": "Tidying",
    "text": "Tidying\n\nWhat are the aesthetic mappings in the plot shown above, i.e., what pieces of information do we need represented as columns (variables) in our data frame in order to be able to recreate this plot?\n\nx: year\ny: population\ncolor, shape: country_name\n\nReshape the population data such that it can be used to recreate the plot above. Note: For now, you can keep all the countries in the dataset.\n\n\npopulation |&gt;\n  pivot_longer(\n    cols = `2000`:`2023`,\n    names_to = \"year\",\n    values_to = \"population\"\n  )\n\n# A tibble: 5,208 × 6\n   series_name       series_code country_name country_code year  population\n   &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt;\n 1 Population, total SP.POP.TOTL Afghanistan  AFG          2000    19542982\n 2 Population, total SP.POP.TOTL Afghanistan  AFG          2001    19688632\n 3 Population, total SP.POP.TOTL Afghanistan  AFG          2002    21000256\n 4 Population, total SP.POP.TOTL Afghanistan  AFG          2003    22645130\n 5 Population, total SP.POP.TOTL Afghanistan  AFG          2004    23553551\n 6 Population, total SP.POP.TOTL Afghanistan  AFG          2005    24411191\n 7 Population, total SP.POP.TOTL Afghanistan  AFG          2006    25442944\n 8 Population, total SP.POP.TOTL Afghanistan  AFG          2007    25903301\n 9 Population, total SP.POP.TOTL Afghanistan  AFG          2008    26427199\n10 Population, total SP.POP.TOTL Afghanistan  AFG          2009    27385307\n# ℹ 5,198 more rows\n\n\n\nWhat is the type of the year variable? Why? What should it be?\n\nCharacter. It should be numeric.\n\nStart over with pivoting, and this time also make sure year is a numerical variable in the resulting data frame. Save the resulting data frame as population_longer.\n\n\npopulation_longer &lt;- population |&gt;\n  pivot_longer(\n    cols = `2000`:`2023`,\n    names_to = \"year\",\n    values_to = \"population\",\n    names_transform = as.numeric\n  )\npopulation_longer\n\n# A tibble: 5,208 × 6\n   series_name       series_code country_name country_code  year population\n   &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt;      &lt;dbl&gt;\n 1 Population, total SP.POP.TOTL Afghanistan  AFG           2000   19542982\n 2 Population, total SP.POP.TOTL Afghanistan  AFG           2001   19688632\n 3 Population, total SP.POP.TOTL Afghanistan  AFG           2002   21000256\n 4 Population, total SP.POP.TOTL Afghanistan  AFG           2003   22645130\n 5 Population, total SP.POP.TOTL Afghanistan  AFG           2004   23553551\n 6 Population, total SP.POP.TOTL Afghanistan  AFG           2005   24411191\n 7 Population, total SP.POP.TOTL Afghanistan  AFG           2006   25442944\n 8 Population, total SP.POP.TOTL Afghanistan  AFG           2007   25903301\n 9 Population, total SP.POP.TOTL Afghanistan  AFG           2008   26427199\n10 Population, total SP.POP.TOTL Afghanistan  AFG           2009   27385307\n# ℹ 5,198 more rows"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#visualization",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations-complete.html#visualization",
    "title": "Country populations over time (Complete)",
    "section": "Visualization",
    "text": "Visualization\n\nNow we start making our plot, but let’s not get too fancy right away. Create a line plot of populations of the United States, India, and China over the years. Represent the data with points and lines.\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\n\n\n\n\nWhat aspects of the plot need to be updated to go from the draft you created above to the goal plot at the beginning of this application exercise.\n\nx and y axis scales\nshapes\ntheme\nlabels\nplacement of legend\n\nUse different shapes for each country’s points.\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\n\n\n\n\nUpdate x-axis scale such that the years displayed go from 2000 to 2024 in increments of 4 years.\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4))\n\n\n\n\n\n\n\n\n\nUpdate the y-axis so it’s scaled to millions and uses the same breaks as the goal plot.\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(\n    breaks = seq(250000000, 1250000000, 250000000),\n    labels = label_number(scale = 1/1000000, suffix = \" mil\")\n  )\n\n\n\n\n\n\n\n\n\nUpdate colors for each country using the following level / color assignments.\n\n“United States” = “#0A3161”\n“India” = “#FF671F”\n“China” = “#EE1C25”\n\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(\n    breaks = seq(250000000, 1250000000, 250000000),\n    labels = label_number(scale = 1/1000000, suffix = \" mil\")\n  ) +\n  scale_color_manual(\n    values = c(\n      \"United States\" = \"#0A3161\",\n      \"India\" = \"#FF671F\",\n      \"China\" = \"#EE1C25\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nUpdate the plot labels (title, subtitle, x, y, and caption) and use theme_minimal().\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(\n    breaks = seq(250000000, 1250000000, 250000000),\n    labels = label_number(scale = 1/1000000, suffix = \" mil\")\n  ) +\n  scale_color_manual(\n    values = c(\n      \"United States\" = \"#0A3161\",\n      \"India\" = \"#FF671F\",\n      \"China\" = \"#EE1C25\"\n    )\n  ) +\n  theme_minimal() +\n  labs(\n    x = \"Year\",\n    y = \"Population (in millions)\",\n    title = \"Country populations over the years\",\n    subtitle = \"2000 to 2023\",\n    caption = \"Data source: The World Bank\"\n  )\n\n\n\n\n\n\n\n\n\nFinally, move the legend to the top of the plot and remove its label.\n\n\npopulation_longer |&gt;\n  filter(country_name %in% c(\"United States\", \"India\", \"China\")) |&gt;\n  ggplot(aes(x = year, y = population, color = country_name, shape = country_name)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2024), breaks = seq(2000, 2024, 4)) +\n  scale_y_continuous(\n    breaks = seq(250000000, 1250000000, 250000000),\n    labels = label_number(scale = 1/1000000, suffix = \" mil\")\n  ) +\n  scale_color_manual(\n    values = c(\n      \"United States\" = \"#0A3161\",\n      \"India\" = \"#FF671F\",\n      \"China\" = \"#EE1C25\"\n    )\n  ) +\n  labs(\n    x = \"Year\",\n    y = \"Population (in millions)\",\n    color = NULL,\n    shape = NULL,\n    title = \"Country populations over the years\",\n    subtitle = \"2000 to 2023\",\n    caption = \"Data source: The World Bank\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"top\")"
  },
  {
    "objectID": "code-alongs/2-1-thats-my-type/2-1-thats-my-type.html",
    "href": "code-alongs/2-1-thats-my-type/2-1-thats-my-type.html",
    "title": "That’s my type",
    "section": "",
    "text": "In the following exercises, first guess what type the vector will be coerced to, then check your intuition with the typeof() function.\n\nc(1, 1L, \"C\")\n\n\nc(1, 1L, \"C\")\n\n[1] \"1\" \"1\" \"C\"\n\n\n\n1\n\n[1] 1\n\n1L\n\n[1] 1\n\n\"C\"\n\n[1] \"C\"\n\n\nGuess: ___\n\n#typeof(c(1, 1L, \"C\"))\n\n\nc(1L / 0, \"A\")\n\n\n# add code here\n\n\n# add code here\n\nGuess: ___\n\n# add code here\n\n\nc(1:3, 5)\n\n\n# add code here\n\n\n# add code here\n\nGuess: ___\n\n# add code here\n\n\nc(3, \"3+\")\n\n\n# add code here\n\n\n# add code here\n\nGuess: ___\n\n# add code here\n\n\nc(NA, TRUE)\n\n\n# add code here\n\n\n# add code here\n\nGuess: ___\n\n# add code here"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html",
    "title": "Continent populations (Complete)",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to create a bar plot of total populations of continents, where the input data are:\n\nCountries and populations\nCountries and continents\n\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\n\n\nThese data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;\n\n\n\n\n\nThese data come from Our World in Data.\n\ncontinents &lt;- read_csv(\"https://data-science-with-r.github.io/data/continents.csv\")\n\nLet’s take a look at the data.\n\ncontinents\n\n# A tibble: 285 × 4\n   entity                code      year continent    \n   &lt;chr&gt;                 &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#packages",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#packages",
    "title": "Continent populations (Complete)",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#data",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#data",
    "title": "Continent populations (Complete)",
    "section": "",
    "text": "These data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;\n\n\n\n\n\nThese data come from Our World in Data.\n\ncontinents &lt;- read_csv(\"https://data-science-with-r.github.io/data/continents.csv\")\n\nLet’s take a look at the data.\n\ncontinents\n\n# A tibble: 285 × 4\n   entity                code      year continent    \n   &lt;chr&gt;                 &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#data-prep",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#data-prep",
    "title": "Continent populations (Complete)",
    "section": "Data prep",
    "text": "Data prep\n\nFor this analysis we’ll focus on the latest available population numbers – 2023. Modify the population data frame to only include 2023 population numbers. Then, rename the column containing 2023 population numbers as population.\n\n\npopulation &lt;- population |&gt;\n  select(series_name:country_code, `2023`) |&gt;\n  rename(population = `2023`)\n\n\nWhich variable(s) will we use to join the population and continents data frames?\n\nFrom population country_code\nFrom continents code\n\nWe want to create a new data frame that keeps all rows and columns from population and brings in the corresponding information from continents. Which join function should we use?\n\nleft_join()\n\nJoin the two data frames and name assign the joined data frame to a new data frame population_continents.\n\n\npopulation_continents &lt;- population |&gt;\n  left_join(continents |&gt; select(code, continent), by = join_by(country_code == code))\n\n\nTake a look at the newly created population_continent data frame. There are some countries that were not in continents. First, identify which countries these are (they will have NA values for continent).\n\n\npopulation_continents |&gt;\n  filter(is.na(continent))\n\n# A tibble: 2 × 6\n  series_name       series_code country_name   country_code population continent\n  &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;          &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;    \n1 Population, total SP.POP.TOTL Channel Islan… CHI              175346 &lt;NA&gt;     \n2 Population, total SP.POP.TOTL Kosovo         XKX             1756374 &lt;NA&gt;     \n\n\nKosovo - OWID_KOS\nChannel Islands - OWID_CIS\n\nAll of these countries are actually in the continents data frame, but under different names. So, let’s clean that data first by updating the country names in the population data frame in a way they will match the continents data frame, and then joining them, using a case_when() statement in mutate(). At the end, check that all countries now have continent information.\n\n\npopulation_continents &lt;- population |&gt;\n  mutate(\n    country_code = case_when(\n      country_name == \"Kosovo\" ~ \"OWID_KOS\",\n      country_name == \"Channel Islands\" ~ \"OWID_CIS\",\n      .default = country_code\n    )\n  ) |&gt;\n  left_join(continents |&gt; select(code, continent), by = join_by(country_code == code))\n\npopulation_continents |&gt;\n  filter(is.na(continent))\n\n# A tibble: 0 × 6\n# ℹ 6 variables: series_name &lt;chr&gt;, series_code &lt;chr&gt;, country_name &lt;chr&gt;,\n#   country_code &lt;chr&gt;, population &lt;dbl&gt;, continent &lt;chr&gt;\n\n\n\nWhich continent do you think has the highest population? Which do you think has the second highest? The lowest?\n\nAdd response here.\n\nCreate a new data frame called population_summary that contains a row for each continent and a column for the total population for that continent, in descending order of population. Note that the function for calculating totals in R is sum().\n\n\npopulation_summary &lt;- population_continents |&gt;\n  group_by(continent) |&gt;\n  summarize(total_population = sum(population))"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#visualization",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations-complete.html#visualization",
    "title": "Continent populations (Complete)",
    "section": "Visualization",
    "text": "Visualization\n\nMake a bar plot with total population on the y-axis and continent on the x-axis, where the height of each bar represents the total population in that continent.\n\n\nggplot(population_summary, aes(x = continent, y = total_population)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nRecreate the following plot, which is commonly referred to as a lollipop plot. Hint: Start with the points, then try adding the segments, then add axis labels and caption, update the x scale.\n\n\n\nggplot(population_summary) +\n  geom_point(aes(y = continent, x = total_population)) +\n  geom_segment(\n    aes(\n      x = 0, xend = total_population, \n      y = continent, yend = continent)\n    ) +\n  theme_minimal() +\n  labs(\n    x = \"Total population\",\n    y = \"Continent\",\n    title = \"World population\",\n    subtitle = \"As of 2023\",\n    caption = \"Data sources: The World Bank and Our World in Data\"\n  ) +\n  scale_x_continuous(labels = label_number(scale = 1/1000000000, suffix = \" bil\"))\n\n\n\n\n\n\n\n\n\nWhat additional improvements would you like to make to this plot.\n\nAdd response here."
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html",
    "title": "Halving CO2 emissions (Complete)",
    "section": "",
    "text": "Visitors to Gapminder.org are welcomed with a question about common misconceptions. Here is one of them.\n\nOnce you make your selection, you are directed to a page that explains the right answer and shows a visualization of the distribution of responses from various countries.\n\nOur goal is to create a version of this visualization.\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nThe data we’re going to use is in a CSV file called co2-emissions.csv at https://data-science-with-r.github.io/data/co2-emissions.csv.\n\nco2_emissions &lt;- read_csv(\"https://data-science-with-r.github.io/data/co2-emissions.csv\")\n\nRows: 8 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): Very wrong, Wrong, Correct\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAnd let’s take a look at the data.\n\nco2_emissions\n\n# A tibble: 8 × 4\n  country        `Very wrong` Wrong Correct\n  &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Türkiye                  61    23      16\n2 Columbia                 64    16      20\n3 Sweden                   36    35      29\n4 Germany                  26    41      33\n5 United Kingdom           29    37      34\n6 United States            31    32      37\n7 Kenya                    46     8      46\n8 Pakistan                 37    13      50"
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html#packages",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html#packages",
    "title": "Halving CO2 emissions (Complete)",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html#data",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions-complete.html#data",
    "title": "Halving CO2 emissions (Complete)",
    "section": "",
    "text": "The data we’re going to use is in a CSV file called co2-emissions.csv at https://data-science-with-r.github.io/data/co2-emissions.csv.\n\nco2_emissions &lt;- read_csv(\"https://data-science-with-r.github.io/data/co2-emissions.csv\")\n\nRows: 8 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): Very wrong, Wrong, Correct\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAnd let’s take a look at the data.\n\nco2_emissions\n\n# A tibble: 8 × 4\n  country        `Very wrong` Wrong Correct\n  &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Türkiye                  61    23      16\n2 Columbia                 64    16      20\n3 Sweden                   36    35      29\n4 Germany                  26    41      33\n5 United Kingdom           29    37      34\n6 United States            31    32      37\n7 Kenya                    46     8      46\n8 Pakistan                 37    13      50"
  },
  {
    "objectID": "code-alongs/2-3-student-survey/2-3-student-survey.html",
    "href": "code-alongs/2-3-student-survey/2-3-student-survey.html",
    "title": "Student survey",
    "section": "",
    "text": "In this code along we’ll work with a small but pretty “messy” survey data on favorite foods and some other information on school aged children.\n\n\nWe will use the tidyverse for our analysis.\n\nlibrary(tidyverse)\n\n\n\n\nThe data are synthetic, so we ca make a few important points quickly."
  },
  {
    "objectID": "code-alongs/2-3-student-survey/2-3-student-survey.html#packages",
    "href": "code-alongs/2-3-student-survey/2-3-student-survey.html#packages",
    "title": "Student survey",
    "section": "",
    "text": "We will use the tidyverse for our analysis.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "code-alongs/2-3-student-survey/2-3-student-survey.html#data",
    "href": "code-alongs/2-3-student-survey/2-3-student-survey.html#data",
    "title": "Student survey",
    "section": "",
    "text": "The data are synthetic, so we ca make a few important points quickly."
  },
  {
    "objectID": "exercises/web_scraping.html",
    "href": "exercises/web_scraping.html",
    "title": "Scraping Star Wars movies and an E-Commerce website",
    "section": "",
    "text": "We’ll use the following packages for this programming exercise:"
  },
  {
    "objectID": "exercises/web_scraping.html#star-wars",
    "href": "exercises/web_scraping.html#star-wars",
    "title": "Scraping Star Wars movies and an E-Commerce website",
    "section": "Star Wars",
    "text": "Star Wars\nScraping data is defined as extracting data from one source to another. We are going to use the following website to practice scraping data; taking data on the website and transporting it into a more workable format with R code.\n\nScraping titles\nPlease visit the website and identify the movie titles. What are they?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThere are seven movie titles on this page. They include:\n– The Phantom Menace\n– Attack of the Clones\n– Revenge of the Sith\n– A New Hope\n– The Empire Strikes Back\n– Return of the Jedi\n– The Force Awakens\n\n\n\nThe next step is to identify the html element that is associated with each title. To help us, we can use Selector Gadget. Selector Gadget is an open source Chrome Extension that helps users find elements of an html page easier. This demonstration will use Selector Gadget. To install Selector Gadget, please go to the following page. When the Selector Gadget is installed, you should see  in your task bar.\n\nStart by reading a HTML page with read_html()\nFirst, we need to reference the website. We can do this by using read_html() from the rvest package. Run the following code below to do so.\n\n\n\n\n\n\n\n\n\n\nFind the element\nNext, we need to find the element that is associated with the titles of each Star Wars movie. Click the  icon and click on one of the titles. Click on another one.\n\nNotice that the next you click on (that you wish to scrape) is highlighted in green. Text in yellow show what else has the same element tag as the text you are clicking on.\nWe can see that the text in green/yellow include the seven titles, and the “ON THIS PAGE” text. If we don’t want to scrape certain text (e.g., the menu title), we can click it, changing the yellow box to red.\n\nNow, we have our seven titles in green/yellow that we want to scrape. In the bottom right corner, we can see the element associated with just these seven titles. We will use this element information to scrape the titles below.\n\n\n\n\n\n\n\n\nChange the above code from html_text2() to html_text() to best understand the difference between these two functions.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSee the help file for each function here.\nhtml_text() returns raw underlying text, including white pace and other symbols. html_text2() tries to simulate how the text is displayed.\n\n\n\n\n\n\nScraping release dates\nSuppose now we want to scrape release dates instead. We can follow the same process as above.\nClick on a released date that you hope to scrape. Click on any yellow text you wish to exclude that has the same element tag. Click on a second released date. Again, click on any yellow text you wish to exclude.\nOnce you completed this process, you should see an element tag for just the released dates of section &gt; p:nth-child(2). Use this information to scrape the seven released dates below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nstarwars |&gt;\n  html_elements(\"section &gt; p:nth-child(2)\") |&gt;\n  html_text2()\n\n[1] \"Released: 1999-05-19\" \"Released: 2002-05-16\" \"Released: 2005-05-19\"\n[4] \"Released: 1977-05-25\" \"Released: 1980-05-17\" \"Released: 1983-05-25\"\n[7] \"Released: 2015-12-11\""
  },
  {
    "objectID": "exercises/web_scraping.html#working-with-scraped-ecommerce-pages",
    "href": "exercises/web_scraping.html#working-with-scraped-ecommerce-pages",
    "title": "Scraping Star Wars movies and an E-Commerce website",
    "section": "Working with scraped eCommerce pages",
    "text": "Working with scraped eCommerce pages\n\n\n\n\n\n\n\n\nIn the last code along activity, you wrote a function to scrape eCommerce data from multiple pages. Here, we are going to practice working with numerical and text data. The data set name is called ecomm.\nTake a glimpse at the ecomm data set below to familiarize yourself with the variables. What are they?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nglimpse(ecomm)\n\nRows: 80\nColumns: 3\n$ title &lt;chr&gt; \"Abominable Hoodie\", \"Adrienne Trek Jacket\", \"Aeon Capri\", \"Aero…\n$ url   &lt;chr&gt; \"https://www.scrapingcourse.com/ecommerce/product/abominable-hoo…\n$ price &lt;dbl&gt; 69.0, 57.0, 48.0, 24.0, 74.0, 7.0, 45.0, 69.0, 40.0, 42.0, 34.0,…\n\n\nThere is a title, url and price variable.\n\n\n\nNow, let’s start by making a histogram of price using tools from the ggplot package in the tidyverse. Hint: Use the functions ggplot() and geom_histogram() to make your visualization below. Note: Play around with the binwidth, and add appropriate labels if able!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(ecomm, aes(x = price)) +\n  geom_histogram(binwidth = 5) + \n  labs(\n    title = \"Price of eCommerse scraped data\",\n    x = \"Price\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nNow, let’s work with some of the text data to discover more patterns. Suppose you wonder if an eCommerce business that sells shorts is cheaper than others. First, we need to find how many listings contain the word “short”. We can do this using str_detect() from the stringR package. Run the following code. What is it doing?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis code is using mutate() to create a new dummy variable called dummy. It is using a combination of ifelse() and str_detect() to look into the title column, and see if the string “Short” was detected or not. If yes, the new variable dummy will contain “short” for that row. If no, the new variable will contain “else”.\n\n\n\nWe just made a dummy (or indicator) variable! This is going to help us see if eCommerce businesses that sell shorts are, on average, more or less expensive than others. Use this variable, along with the dplyr functions of group_by() and summarize(). Then, answer the question of if shorts are, on average, cheaper than other businesses for these data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\necomm |&gt;\n  group_by(dummy) |&gt;\n  summarize(mean_price = mean(price))\n\n# A tibble: 2 × 2\n  dummy mean_price\n  &lt;chr&gt;      &lt;dbl&gt;\n1 else        43.7\n2 short       35.7\n\n\nIt appears that an eCommerce business that sells shorts was, on average, 8 dollars cheaper than other stores for these data."
  },
  {
    "objectID": "exercises/web_scraping.html#asking-permission",
    "href": "exercises/web_scraping.html#asking-permission",
    "title": "Scraping Star Wars movies and an E-Commerce website",
    "section": "Asking Permission",
    "text": "Asking Permission\nJust because you can use rvest tools to scrape data doesn’t mean you should or have permission to do so. We will use the bow() function from the polite package in R to introduce the client to the host and ask for permission to scrape. Use the following code to ensure that we had permission to scrape Star Wars! Note that the input for bow() is a character URL.\n\nhost &lt;- \"https://rvest.tidyverse.org/articles/starwars.html\"\n\nbow(host)\n\n&lt;polite session&gt; https://rvest.tidyverse.org/articles/starwars.html\n    User-agent: polite R package\n    robots.txt: 1 rules are defined for 1 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n\n\nIndeed, we had permission to scrape that website!\nLet’s check out four more websites:\n\nespn.com\nx.com\nbettycrocker.com\nzillow.com\n\n\nhost1 &lt;- \"https://espn.com\"\nhost2 &lt;- \"https://x.com/home\"\nhost3 &lt;- \"https://www.bettycrocker.com\"\nhost4 &lt;- \"https://www.zillow.com\"\n\nbow(host1)\n\n&lt;polite session&gt; https://espn.com\n    User-agent: polite R package\n    robots.txt: 114 rules are defined for 11 bots\n   Crawl delay: 5 sec\n  The path is not scrapable for this user-agent\n\nbow(host2)\n\n&lt;polite session&gt; https://x.com/home\n    User-agent: polite R package\n    robots.txt: 24 rules are defined for 7 bots\n   Crawl delay: 5 sec\n  The path is not scrapable for this user-agent\n\nbow(host3)\n\n&lt;polite session&gt; https://www.bettycrocker.com\n    User-agent: polite R package\n    robots.txt: 15 rules are defined for 1 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n\nbow(host4)\n\n&lt;polite session&gt; https://www.zillow.com\n    User-agent: polite R package\n    robots.txt: 244 rules are defined for 8 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n\n\nWe do not have permission to scrape espn.com or x.com. We do have permission to scrape bettycrocker.com and zillow.com.\nThe takeaway is that, just because you can doesn’t mean you should scrape the data!"
  },
  {
    "objectID": "exercises/tidy_basketball.html",
    "href": "exercises/tidy_basketball.html",
    "title": "Tidy Basketball",
    "section": "",
    "text": "Important\n\n\n\nPlease reference the Meet the toolkit: Programming exercises in course 1 (or refresher) for information and instructions on how to interact with the programming exercise below."
  },
  {
    "objectID": "exercises/tidy_basketball.html#getting-started",
    "href": "exercises/tidy_basketball.html#getting-started",
    "title": "Tidy Basketball",
    "section": "Getting Started",
    "text": "Getting Started\n\n\n\n\n\n\nThe Portland Trailblazers are a National Basketball Association (NBA) sports team. In this mini analysis, we will work with a dataset that has information on the points scored by 9 Portland Trailblazers players across the first 10 games of the 2021-2022 NBA season. If you would like to become more familiar with the game of basketball, please click here. If you would like more information on the Portland Trailblazers, please click here.\nA key to these data can be found below:\n\n\n\nvariable name\ndescription\n\n\n\n\nplayer\nname of player\n\n\ngame1_home\npoints scored on game 1 on home court\n\n\n…\n…\n\n\ngame3_away\npoints scored on game 3 on away court\n\n\n…\n…\n\n\ngame10_home\npoints scored on game 10 on home court\n\n\n\nRead in the data below.\n\n\n\n\n\n\n\nPackages\nWe’ll use tidyverse for the majority of the analysis and scales for pretty plot labels later on.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\nGet to know the data\nUse glimpse() to get an overview (or “glimpse”) of the data. How many rows and columns are in this dataset? In addition, make note of the types of variables you are working with.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you receive the error Error: object ‘blazer’ not found, go back and read in your data above.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nglimpse(blazer)\n\nRows: 9\nColumns: 11\n$ player      &lt;chr&gt; \"Damian Lillard\", \"CJ McCollum\", \"Norman Powell\", \"Robert …\n$ game1_home  &lt;dbl&gt; 20, 24, 14, 8, 20, 5, 11, 2, 7\n$ game2_home  &lt;dbl&gt; 19, 28, 16, 6, 9, 5, 18, 8, 11\n$ game3_away  &lt;dbl&gt; 12, 20, NA, 0, 4, 8, 12, 5, 5\n$ game4_home  &lt;dbl&gt; 20, 25, NA, 3, 17, 10, 17, 8, 9\n$ game5_home  &lt;dbl&gt; 25, 14, 12, 9, 14, 9, 5, 3, 8\n$ game6_away  &lt;dbl&gt; 14, 25, 14, 6, 13, 6, 19, 8, 8\n$ game7_away  &lt;dbl&gt; 20, 20, 22, 0, 7, 0, 17, 7, 4\n$ game8_away  &lt;dbl&gt; 26, 21, 23, 6, 6, 7, 15, 0, 0\n$ game9_home  &lt;dbl&gt; 4, 27, 25, 19, 10, 0, 16, 2, 7\n$ game10_home &lt;dbl&gt; 25, 7, 13, 12, 15, 6, 10, 4, 8\n\n\nThere are 9 rows and 11 columns in blazer dataset.\nplayer is a character variable; the remaining variables are doubles.\n\n\n\nSuppose you are asked to recreate the plot below…\n\n\n\n\n\nIdentify the variables you would need to use to recreate this plot. Can this plot be recreated with how the blazer dataset is currently formatted?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nVariables in the above plot include player, game, location, and points. This plot can not be recreated with how the blazer dataset is currently formatted.\n\n\n\nNow, think critically about how we could transform our blazer dataset to have the variables necessary to make the plot above. What would our new dataset have to look like? What R function(s) could we use to transform our data into what we need?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe have a player column in the dataset. In order to get a game, location, and points, we can use pivot_longer(), which will take this wide dataset and make it into a longer dataset. That is, we can bring the variable names of game1_home, game2_home, etc. into our dataset as values, which is needed to recreate the plot above.\n\n\n\nSee more information about pivot_longer() here. We are going to create our final dataset in steps. First use pivot_longer() to change our dataset that has 90 rows and 3 columns that are named player, game, and points.\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer |&gt;\n  pivot_longer(\n    cols = -player,\n    names_to = \"game\",\n    values_to = \"points\")\n\n# A tibble: 90 × 3\n   player         game        points\n   &lt;chr&gt;          &lt;chr&gt;        &lt;dbl&gt;\n 1 Damian Lillard game1_home      20\n 2 Damian Lillard game2_home      19\n 3 Damian Lillard game3_away      12\n 4 Damian Lillard game4_home      20\n 5 Damian Lillard game5_home      25\n 6 Damian Lillard game6_away      14\n 7 Damian Lillard game7_away      20\n 8 Damian Lillard game8_away      26\n 9 Damian Lillard game9_home       4\n10 Damian Lillard game10_home     25\n# ℹ 80 more rows\n\n\n\n\n\nWhat are the next steps we need to take to change our dataset to recreate the plot above?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe still need to:\n\nremove “game” text from the game column\nseparate the numeric value of game from home/away\ncreate a location column\n\n\n\n\nRevisit the documentation for pivot_longer(). Add the argument names_prefix to your existing code above to remove the text “game” from the game column.\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer |&gt;\n  pivot_longer(\n    cols = -player,\n    names_to = \"game\",\n    values_to = \"points\",\n    names_prefix = \"game\"\n  )\n\n# A tibble: 90 × 3\n   player         game    points\n   &lt;chr&gt;          &lt;chr&gt;    &lt;dbl&gt;\n 1 Damian Lillard 1_home      20\n 2 Damian Lillard 2_home      19\n 3 Damian Lillard 3_away      12\n 4 Damian Lillard 4_home      20\n 5 Damian Lillard 5_home      25\n 6 Damian Lillard 6_away      14\n 7 Damian Lillard 7_away      20\n 8 Damian Lillard 8_away      26\n 9 Damian Lillard 9_home       4\n10 Damian Lillard 10_home     25\n# ℹ 80 more rows\n\n\n\n\n\nWe now need to separate the values away from the location in the game column. Please see the documentation on separate_wider_delim here. Add to your existing code to split the game number and game location into two columns. Call the new column location. Save and name this dataset as blazer_long to use in the next section.\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long &lt;- blazer |&gt;\n  pivot_longer(\n    cols = -player,\n    names_to = \"game\",\n    values_to = \"points\",\n    names_prefix = \"game\") |&gt;\n    separate_wider_delim(game, delim = \"_\", names = c(\"game\", \"location\"))\n\nblazer_long\n\n# A tibble: 90 × 4\n   player         game  location points\n   &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1 Damian Lillard 1     home         20\n 2 Damian Lillard 2     home         19\n 3 Damian Lillard 3     away         12\n 4 Damian Lillard 4     home         20\n 5 Damian Lillard 5     home         25\n 6 Damian Lillard 6     away         14\n 7 Damian Lillard 7     away         20\n 8 Damian Lillard 8     away         26\n 9 Damian Lillard 9     home          4\n10 Damian Lillard 10    home         25\n# ℹ 80 more rows\n\n\n\n\n\n\n\nSummary statistics\nLet’s use the new blazer_long dataset to calculate some summary statistics for the Portland Trailblazers to learn more about their performance for these 10 games!\n\nCalculate the mean points scored across all players between home and away games.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  group_by(location) |&gt;\n  summarize(mean_points = mean(points, na.rm = T))\n\n# A tibble: 2 × 2\n  location mean_points\n  &lt;chr&gt;          &lt;dbl&gt;\n1 away            10.9\n2 home            12.2\n\n\n\n\n\n\nNow, calculate the mean points scored for the player Damian Lillard for both home and away games.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  filter(player == \"Damian Lillard\") |&gt;\n  group_by(location) |&gt;\n  summarize(mean_points = mean(points, na.rm = T))\n\n# A tibble: 2 × 2\n  location mean_points\n  &lt;chr&gt;          &lt;dbl&gt;\n1 away            18  \n2 home            18.8\n\n\n\n\n\n\nNow, create a table that counts the number of times a player scored 15 points (or more) a game versus the number of times a player scored less than 15 points a game.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  mutate(points_cat = ifelse(points &gt;= 15, \"yes\", \"no\")) |&gt;\n  select(points_cat) |&gt;\n  group_by(points_cat) |&gt;\n  count()\n\n# A tibble: 3 × 2\n# Groups:   points_cat [3]\n  points_cat     n\n  &lt;chr&gt;      &lt;int&gt;\n1 no            59\n2 yes           29\n3 &lt;NA&gt;           2"
  },
  {
    "objectID": "exercises/tidy_basketball.html#bonus-challange",
    "href": "exercises/tidy_basketball.html#bonus-challange",
    "title": "Tidy Basketball",
    "section": "Bonus Challange",
    "text": "Bonus Challange\nRecreate the plot, using the blazer_long dataset!\n\n\n\n\n\nHints: The code you start with makes sure that game is appropriately treated as a quantitative variable. You will learn more about data types in the following lessons! The plot above uses theme_bw().\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nblazer_long |&gt;\n  mutate(game = as.numeric(game)) |&gt;\n  ggplot(\n    aes(x = game, y = points, color = location, group = player)\n  ) +\n  geom_line() +\n  geom_point(shape = \"square\") +\n  facet_wrap(~player) +\n  scale_x_continuous(breaks = c(1:10)) +\n  theme_bw() +\n  labs(\n    x = \"Game\",\n    y = \"Points Scored\",\n    title = \"Points Scored Across 10 Games\",\n    subtitle = \"Portland Trailblazers (2021-2022 Season)\",\n    caption = \"https://www.basketball-reference.com/teams/POR/2021_games.html\"\n  )\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "code-alongs/2-3-student-survey/2-3-student-survey-complete.html",
    "href": "code-alongs/2-3-student-survey/2-3-student-survey-complete.html",
    "title": "Student survey",
    "section": "",
    "text": "In this code along we’ll work with a small but pretty “messy” survey data on favorite foods and some other information on school aged children.\n\n\nWe will use the tidyverse for our analysis.\n\nlibrary(tidyverse)\nlibrary(janitor)\n\n\n\n\nThe data are synthetic, so we can make a few important points quickly."
  },
  {
    "objectID": "code-alongs/2-3-student-survey/2-3-student-survey-complete.html#packages",
    "href": "code-alongs/2-3-student-survey/2-3-student-survey-complete.html#packages",
    "title": "Student survey",
    "section": "",
    "text": "We will use the tidyverse for our analysis.\n\nlibrary(tidyverse)\nlibrary(janitor)"
  },
  {
    "objectID": "code-alongs/2-3-student-survey/2-3-student-survey-complete.html#data",
    "href": "code-alongs/2-3-student-survey/2-3-student-survey-complete.html#data",
    "title": "Student survey",
    "section": "",
    "text": "The data are synthetic, so we can make a few important points quickly."
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html",
    "title": "Halving CO2 emissions",
    "section": "",
    "text": "Visitors to Gapminder.org are welcomed with a question about common misconceptions. Here is one of them.\n\nOnce you make your selection, you are directed to a page that explains the right answer and shows a visualization of the distribution of responses from various countries.\n\nOur goal is to create a version of this visualization.\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nThe data we’re going to use is in a CSV file called co2-emissions.csv at https://data-science-with-r.github.io/data/co2-emissions.csv.\n\nco2_emissions &lt;- read_csv(\"https://data-science-with-r.github.io/data/co2-emissions.csv\")\n\nRows: 8 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): Very wrong, Wrong, Correct\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAnd let’s take a look at the data.\n\nco2_emissions\n\n# A tibble: 8 × 4\n  country        `Very wrong` Wrong Correct\n  &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Türkiye                  61    23      16\n2 Columbia                 64    16      20\n3 Sweden                   36    35      29\n4 Germany                  26    41      33\n5 United Kingdom           29    37      34\n6 United States            31    32      37\n7 Kenya                    46     8      46\n8 Pakistan                 37    13      50"
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html#packages",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html#packages",
    "title": "Halving CO2 emissions",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html#data",
    "href": "code-alongs/2-2-co2-emissions/2-2-co2-emissions.html#data",
    "title": "Halving CO2 emissions",
    "section": "",
    "text": "The data we’re going to use is in a CSV file called co2-emissions.csv at https://data-science-with-r.github.io/data/co2-emissions.csv.\n\nco2_emissions &lt;- read_csv(\"https://data-science-with-r.github.io/data/co2-emissions.csv\")\n\nRows: 8 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): Very wrong, Wrong, Correct\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAnd let’s take a look at the data.\n\nco2_emissions\n\n# A tibble: 8 × 4\n  country        `Very wrong` Wrong Correct\n  &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Türkiye                  61    23      16\n2 Columbia                 64    16      20\n3 Sweden                   36    35      29\n4 Germany                  26    41      33\n5 United Kingdom           29    37      34\n6 United States            31    32      37\n7 Kenya                    46     8      46\n8 Pakistan                 37    13      50"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations.html",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations.html",
    "title": "Continent populations",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to create a bar plot of total populations of continents, where the input data are:\n\nCountries and populations\nCountries and continents\n\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\n\n\nThese data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;\n\n\n\n\n\nThese data come from Our World in Data.\n\ncontinents &lt;- read_csv(\"https://data-science-with-r.github.io/data/continents.csv\")\n\nLet’s take a look at the data.\n\ncontinents\n\n# A tibble: 285 × 4\n   entity                code      year continent    \n   &lt;chr&gt;                 &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#packages",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#packages",
    "title": "Continent populations",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#data",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#data",
    "title": "Continent populations",
    "section": "",
    "text": "These data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;\n\n\n\n\n\nThese data come from Our World in Data.\n\ncontinents &lt;- read_csv(\"https://data-science-with-r.github.io/data/continents.csv\")\n\nLet’s take a look at the data.\n\ncontinents\n\n# A tibble: 285 × 4\n   entity                code      year continent    \n   &lt;chr&gt;                 &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;        \n 1 Abkhazia              OWID_ABK  2015 Asia         \n 2 Afghanistan           AFG       2015 Asia         \n 3 Akrotiri and Dhekelia OWID_AKD  2015 Asia         \n 4 Aland Islands         ALA       2015 Europe       \n 5 Albania               ALB       2015 Europe       \n 6 Algeria               DZA       2015 Africa       \n 7 American Samoa        ASM       2015 Oceania      \n 8 Andorra               AND       2015 Europe       \n 9 Angola                AGO       2015 Africa       \n10 Anguilla              AIA       2015 North America\n# ℹ 275 more rows"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#data-prep",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#data-prep",
    "title": "Continent populations",
    "section": "Data prep",
    "text": "Data prep\n\nFor this analysis we’ll focus on the latest available population numbers – 2023. Modify the population data frame to only include 2023 population numbers. Then, rename the column containing 2023 population numbers as population.\n\n\n# add code here\n\n\nWhich variable(s) will we use to join the population and continents data frames?\n\nAdd response here.\n\nWe want to create a new data frame that keeps all rows and columns from population and brings in the corresponding information from continents. Which join function should we use?\n\nAdd response here.\n\nJoin the two data frames and name assign the joined data frame to a new data frame population_continents.\n\n\n# add code here\n\n\nTake a look at the newly created population_continent data frame. There are some countries that were not in continents. First, identify which countries these are (they will have NA values for continent).\n\n\n# add code here\n\n\nAll of these countries are actually in the continents data frame, but under different names. So, let’s clean that data first by updating the country names in the population data frame in a way they will match the continents data frame, and then joining them, using a case_when() statement in mutate(). At the end, check that all countries now have continent information.\n\n\n# add code here\n\n\nWhich continent do you think has the highest population? Which do you think has the second highest? The lowest?\n\nAdd response here.\n\nCreate a new data frame called population_summary that contains a row for each continent and a column for the total population for that continent, in descending order of population. Note that the function for calculating totals in R is sum().\n\n\n# add code here"
  },
  {
    "objectID": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#visualization",
    "href": "code-alongs/1-4-continent-populations/1-4-continent-populations.html#visualization",
    "title": "Continent populations",
    "section": "Visualization",
    "text": "Visualization\n\nMake a bar plot with total population on the y-axis and continent on the x-axis, where the height of each bar represents the total population in that continent.\n\n\n# add code here\n\n\nRecreate the following plot, which is commonly referred to as a lollipop plot. Hint: Start with the points, then try adding the segments, then add axis labels and caption, update the x scale.\n\n\n\n# add code here\n\n\nWhat additional improvements would you like to make to this plot.\n\nAdd response here."
  },
  {
    "objectID": "code-alongs/2-1-thats-my-type/2-1-thats-my-type-complete.html",
    "href": "code-alongs/2-1-thats-my-type/2-1-thats-my-type-complete.html",
    "title": "That’s my type (Complete)",
    "section": "",
    "text": "In the following exercises, first guess what type the vector will be coerced to, then check your intuition with the typeof() function.\n\nc(1, 1L, \"C\")\n\n\nc(1, 1L, \"C\")\n\n[1] \"1\" \"1\" \"C\"\n\n\n\n1\n\n[1] 1\n\n1L\n\n[1] 1\n\n\"C\"\n\n[1] \"C\"\n\n\nGuess: ___\n\ntypeof(c(1, 1L, \"C\"))\n\n[1] \"character\"\n\n\n\nc(1L / 0, \"A\")\n\n\nc(1L / 0, \"A\")\n\n[1] \"Inf\" \"A\"  \n\n\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(0)\n\n[1] \"double\"\n\ntypeof(1L/0)\n\n[1] \"double\"\n\ntypeof(\"A\")\n\n[1] \"character\"\n\n\nGuess: ___\n\ntypeof(c(1L / 0, \"A\"))\n\n[1] \"character\"\n\n\n\nc(1:3, 5)\n\n\nc(1:3, 5)\n\n[1] 1 2 3 5\n\n\n\ntypeof(1:3)\n\n[1] \"integer\"\n\ntypeof(5)\n\n[1] \"double\"\n\n\nGuess: ___\n\ntypeof(c(1:3, 5))\n\n[1] \"double\"\n\n\n\nc(3, \"3+\")\n\n\nc(3, \"3+\")\n\n[1] \"3\"  \"3+\"\n\n\n\ntypeof(3)\n\n[1] \"double\"\n\ntypeof(\"3+\")\n\n[1] \"character\"\n\n\nGuess: ___\n\ntypeof(c(3, \"3+\"))\n\n[1] \"character\"\n\n\n\nc(NA, TRUE)\n\n\nc(NA, TRUE)\n\n[1]   NA TRUE\n\n\n\ntypeof(NA)\n\n[1] \"logical\"\n\ntypeof(TRUE)\n\n[1] \"logical\"\n\n\nGuess: ___\n\ntypeof(c(NA, TRUE))\n\n[1] \"logical\""
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html",
    "title": "Country populations over time",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization.\n\n\n\n\n\n\n\n\nWe will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nThese data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html#goal",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html#goal",
    "title": "Country populations over time",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization."
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html#packages",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html#packages",
    "title": "Country populations over time",
    "section": "",
    "text": "We will use the tidyverse and scales packages for data wrangling and visualization.\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html#data",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html#data",
    "title": "Country populations over time",
    "section": "",
    "text": "These data come from The World Bank and reflect population counts for the years 2000 to 2023. The populations given are mid-year estimates.\n\npopulation &lt;- read_csv(\"https://data-science-with-r.github.io/data/population.csv\")\n\nLet’s take a look at the data.\n\npopulation\n\n# A tibble: 217 × 28\n   series_name series_code country_name country_code `2000` `2001` `2002` `2003`\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Population… SP.POP.TOTL Afghanistan  AFG          1.95e7 1.97e7 2.10e7 2.26e7\n 2 Population… SP.POP.TOTL Albania      ALB          3.09e6 3.06e6 3.05e6 3.04e6\n 3 Population… SP.POP.TOTL Algeria      DZA          3.08e7 3.12e7 3.16e7 3.21e7\n 4 Population… SP.POP.TOTL American Sa… ASM          5.82e4 5.83e4 5.82e4 5.79e4\n 5 Population… SP.POP.TOTL Andorra      AND          6.61e4 6.78e4 7.08e4 7.39e4\n 6 Population… SP.POP.TOTL Angola       AGO          1.64e7 1.69e7 1.75e7 1.81e7\n 7 Population… SP.POP.TOTL Antigua and… ATG          7.51e4 7.62e4 7.72e4 7.81e4\n 8 Population… SP.POP.TOTL Argentina    ARG          3.71e7 3.75e7 3.79e7 3.83e7\n 9 Population… SP.POP.TOTL Armenia      ARM          3.17e6 3.13e6 3.11e6 3.08e6\n10 Population… SP.POP.TOTL Aruba        ABW          8.91e4 9.07e4 9.18e4 9.27e4\n# ℹ 207 more rows\n# ℹ 20 more variables: `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;,\n#   `2008` &lt;dbl&gt;, `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt;,\n#   `2013` &lt;dbl&gt;, `2014` &lt;dbl&gt;, `2015` &lt;dbl&gt;, `2016` &lt;dbl&gt;, `2017` &lt;dbl&gt;,\n#   `2018` &lt;dbl&gt;, `2019` &lt;dbl&gt;, `2020` &lt;dbl&gt;, `2021` &lt;dbl&gt;, `2022` &lt;dbl&gt;,\n#   `2023` &lt;dbl&gt;"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html#tidying",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html#tidying",
    "title": "Country populations over time",
    "section": "Tidying",
    "text": "Tidying\n\nWhat are the aesthetic mappings in the plot shown above, i.e., what pieces of information do we need represented as columns (variables) in our data frame in order to be able to recreate this plot?\n\nAdd response here.\n\nReshape the population data such that it can be used to recreate the plot above. Note: For now, you can keep all the countries in the dataset.\n\n\n# add code here\n\n\nWhat is the type of the year variable? Why? What should it be?\n\nAdd response here.\n\nStart over with pivoting, and this time also make sure year is a numerical variable in the resulting data frame. Save the resulting data frame as population_longer.\n\n\n# add code here"
  },
  {
    "objectID": "code-alongs/1-3-country-populations/1-3-country-populations.html#visualization",
    "href": "code-alongs/1-3-country-populations/1-3-country-populations.html#visualization",
    "title": "Country populations over time",
    "section": "Visualization",
    "text": "Visualization\n\nNow we start making our plot, but let’s not get too fancy right away. Create a line plot of populations of the United States, India, and China over the years. Represent the data with points and lines.\n\n\n# add code here\n\n\nWhat aspects of the plot need to be updated to go from the draft you created above to the goal plot at the beginning of this application exercise.\n\nAdd response here.\n\nUse different shapes for each country’s points.\n\n\n# add code here\n\n\nUpdate x-axis scale such that the years displayed go from 2000 to 2024 in increments of 4 years.\n\n\n# add code here\n\n\nUpdate the y-axis so it’s scaled to millions and uses the same breaks as the goal plot.\n\n\n# add code here\n\n\nUpdate colors for each country using the following level / color assignments.\n\n“United States” = “#0A3161”\n“India” = “#FF671F”\n“China” = “#EE1C25”\n\n\n\n# add code here\n\n\nUpdate the plot labels (title, subtitle, x, y, and caption) and use theme_minimal().\n\n\n# add code here\n\n\nFinally, move the legend to the top of the plot and remove its label.\n\n\n# add code here"
  },
  {
    "objectID": "exercises/nobel.html#type-coercion",
    "href": "exercises/nobel.html#type-coercion",
    "title": "Nobel Prize winners & sales data",
    "section": "Type coercion",
    "text": "Type coercion\nWe are going to use the nobel dataset to explore type coercion.\nUsing glimpse(), identify what type of variable gender is in the nobel data frame. Additionally, identify the levels of this variable.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nglimpse(nobel)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nglimpse(nobel)\n\nnobel |&gt;\n  distinct(gender)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nglimpse(nobel)\n\nnobel |&gt;\n  distinct(gender)\ngender is a character variable. This variable has three different genders: male, female, and org.\n\n\n\n\nSuppose we want to convert the the levels of gender into numeric values. Run the following code. What happens?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWhen trying to convert male, female and org from characters into numbers, each value became an NA. And we got a warning that says NAs introduced by coercion.\n\n\n\n\nIt makes sense that R can’t just represent character strings as numbers. Instead of converting a character variable to a numeric, we might consider converting it to a factor variable instead – how R represents categorical data.\nConvert gender to factor and save it in the nobel data frame. Then, report its levels.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nnobel &lt;- nobel |&gt;\n  ___(___)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nnobel &lt;- nobel |&gt;\n  mutate(___ = as.factor(___))\n\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\nnobel &lt;- nobel |&gt;\n  mutate(gender = as.factor(gender))\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnobel &lt;- nobel |&gt;\n  mutate(gender = as.factor(gender))\n  \nlevels(nobel$gender)\nThe levels are female, male, and org."
  },
  {
    "objectID": "exercises/nobel.html#variable-types-and-classes",
    "href": "exercises/nobel.html#variable-types-and-classes",
    "title": "Nobel Prize winners & sales data",
    "section": "Variable types and classes",
    "text": "Variable types and classes\nWe are going to use the nobel dataset to explore how to change types of variables and what can go wrong along the way.\nUsing glimpse(), identify what type of variable category is in the nobel data frame. Additionally, identify the values this variable takes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nglimpse(nobel)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nglimpse(nobel)\n\nnobel |&gt;\n  distinct(category)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nglimpse(nobel)\n\nnobel |&gt;\n  distinct(category)\ncategory is a character variable. This variable takes on the following values: Physics, Chemistry, Peace, Medicine, Literature, and Economics.\n\n\n\n\nSuppose we want to convert the the levels of category into numeric values. Run the following code. What happens?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWhen trying to convert the values of caegory from characters into numbers, each value became an NA. And we got a warning that says NAs introduced by coercion.\n\n\n\n\nIt makes sense that R can’t just represent character strings as numbers. Instead of converting a character variable to a numeric, we might consider converting it to a factor variable instead – how R represents categorical data.\nConvert category to factor and save it in the nobel data frame. Then, report its levels.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nnobel &lt;- nobel |&gt;\n  ___(___)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nnobel &lt;- nobel |&gt;\n  mutate(___ = as.factor(___))\n\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\nnobel &lt;- nobel |&gt;\n  mutate(category = as.factor(category))\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnobel &lt;- nobel |&gt;\n  mutate(category = as.factor(category))\n  \nlevels(nobel$category)\nThe levels are Physics, Chemistry, Peace, Medicine, Literature, and Economics."
  },
  {
    "objectID": "exercises/nobel.html#reading-csv-files",
    "href": "exercises/nobel.html#reading-csv-files",
    "title": "Nobel Prize winners & sales data",
    "section": "Reading CSV files",
    "text": "Reading CSV files\nFor this programming exercise, we are going to work with a data on Nobel Prize winners from the years 1901 through 2018, called nobel.csv.\nLoad the dataset with read_csv() and save it as a data frame (a tibble) called nobel. How many rows are there in nobel and what does each row represent? How many columns are there in nobel?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nRead in the data with read_csv() and pass the name of the data file, \"nobel.csv\" as the argument of this funtion.\n___ &lt;- read_csv(\"nobel.csv\")\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nAssign the result of read_csv(\"nobel.csv\") to nobel.\nnobel &lt;- read_csv(\"nobel.csv\")\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnobel &lt;- read_csv(\"nobel.csv\")\nThere are 935 rows and 26 columns in nobel data frame. Each row represents a Nobel prize winner.\n\n\n\n\nNow, read the data in again, but this time add the argument show_col_types to the read_csv() function and set it to `FALSE. This will suppress the information on column specifications (what type each column is).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnobel &lt;- read_csv(\"nobel.csv\", show_col_types = FALSE)\nNotice that the column specification is no longer printed."
  },
  {
    "objectID": "exercises/nobel.html#reading-excel-files",
    "href": "exercises/nobel.html#reading-excel-files",
    "title": "Nobel Prize winners & sales data",
    "section": "Reading Excel files",
    "text": "Reading Excel files\nFor the remainder of this programming exercise, we are going read in data from an Excel file and then clean it up.\n\n\n\n\n\nFirst, read the data in with read_excel from the Excel file called \"sales.xlsx\" and print the data to screen. Is this a tidy data frame?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n___ &lt;- read_excel(\"___\")\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nsales &lt;- read_excel(\"sales.xlsx\")\n\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\nsales &lt;- read_excel(\"sales.xlsx\")\nsales\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nsales &lt;- read_excel(\"sales.xlsx\")\nsales\nNo, this is not a tidy data frame. These data are read in with the text as a column name, and creates another column name called ...2.\n\n\n\n\nSee the help file for read_excel() here. Notice that, in the current sales dataset, we want to skip 3 rows (the first row acts as a header for the column names). We can do this using the skip argument. At the same time, we can specify names for each column by giving the argument col_names a character vector. Use these arguments and add to the code below to skip 3 lines and name the columns id and n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n___ &lt;- read_excel(\n  \"sales.xlsx\",\n  ___,\n  ___\n)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\n___ &lt;- read_excel(\n  \"sales.xlsx\",\n  skip = 3,\n  ___\n)\n\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\n___ &lt;- read_excel(\n  \"sales.xlsx\",\n  skip = 3,\n  col_names = c(\"id\", \"n\")\n)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nsales &lt;- read_excel(\n  \"sales.xlsx\",\n  skip = 3,\n  col_names = c(\"id\", \"n\")\n)\n\nsales"
  },
  {
    "objectID": "exercises/nobel.html#putting-it-all-together",
    "href": "exercises/nobel.html#putting-it-all-together",
    "title": "Nobel Prize winners & sales data",
    "section": "Putting it all together",
    "text": "Putting it all together\nManipulate the sales data such such that it looks like the following using functions you have learned from the tidyverse to transform data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nsales |&gt;\n  mutate(\n    ___,\n    ___\n  ) |&gt;\n  ___\n  ___\n  ___\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nsales |&gt;\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    ___\n  ) |&gt;\n  ___\n  ___\n  ___\n\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\nsales |&gt;\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    brand = if_else(is_brand_name, id, NA)\n  ) |&gt;\n  ___\n  ___\n  ___\n\n\n\n\n\n\n\n\n\n\n\nHint 4\n\n\n\n\n\nsales |&gt;\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    brand = if_else(is_brand_name, id, NA)\n  ) |&gt;\n  fill(brand) |&gt;\n  ___\n  ___\n\n\n\n\n\n\n\n\n\n\n\nHint 5\n\n\n\n\n\nsales |&gt;\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    brand = if_else(is_brand_name, id, NA)\n  ) |&gt;\n  fill(brand) |&gt;\n  filter(!is_brand_name) |&gt;\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nsales |&gt;\n  mutate(\n    is_brand_name = str_detect(id, \"Brand\"),\n    brand = if_else(is_brand_name, id, NA)\n  ) |&gt;\n  fill(brand) |&gt;\n  filter(!is_brand_name) |&gt;\n  select(brand, id, n)\n\nsales\n\n\n\n\nTakeaway: We should write code to manipulate data instead of opening Excel and editing the data in there because it leaves a transparent trail of any modifications done while manipulating the data. Changing data in Excel is neither reproducible nor reusable."
  }
]