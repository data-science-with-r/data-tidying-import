---
title: "NYC flights + data wrangling"
toc: true
webr:
  packages: ['tidyverse', 'scales', 'nycflights13']
filters:
  - webr
---

::: callout-important
Please reference the `webR-intro` programming exercise for information and instructions on how to interact with the programming exercise below.
:::

## Getting started

In this exercise, we will be exploring the `flights` data set, which contains information about all flights that departed from NYC to destinations in the United States, Puerto Rico, and the American Virgin Islands in 2013. A data key can be found below:

::: {.callout-note collapse="true"}
## data key

| Variable       | Description                                                            |
|----------------|------------------------------------------------------------------------|
| year           | year of departure                                                      |
| month          | month of departure                                                     |
| day            | day of departure                                                       |
| dep_time       | departure time                                                         |
| arr_time       | arrival time                                                           |
| sched_dep_time | scheduled departure time                                               |
| sched_arr_time | scheduled arrival time                                                 |
| dep_delay      | departure delays in minutes. Negative times represent early departures in minutes |
| arr_delay      | arrival delays in minutes. Negative times represent early arrivals in minutes     |
| carrier        | two letter carrier abbreviation                                        |
| tailnum        | plane tail number                                                      |
| orgin          | origin                                                                 |
| dest           | destination                                                            |
| air_time       | amount of time spent in the air in minutes                             |
| distance       | distance between airports in miles                                     |
| hour           | the hour of time scheduled departure                                   |
| minutes        | the minutes of time of scheduled departure                             |
| time_hour      | scheduled date and hour of the flight as a POSIXct date.            |
:::
### Packages

We'll use: **tidyverse** for majority of the exploration. Section headers of this exercise refer to the function we will be practicing with. Each header is hyperlinked to their associated help file if you would like to further explore each function. 

These data we are using are in the **nycflights13** package. These are ready to use for you in this programming exercise!

```{r}
#| label: load-packages
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(scales)
library(nycflights13)
```

## Data wrangling 

Data wrangling is the process of transforming or reshaping data into a form that is more suitable for analysis. In this exercise, we will practice with a variety of functions used to wrangle data. 

Before we begin, use `glimpse` to report how many rows the `flights` data frame has. What does each row represent? 

```{webr-r}
# add code here
```

<br>
```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
glimpse(flights)
```

There are 336,776 rows in the `flights` data set. Each observation represents a **flight**.
:::

## [`select()`](https://dplyr.tidyverse.org/reference/select.html)

The `select()` function makes it easy to select variable(s) in your data set based on their name or position. 

Using `select()`, make a data frame that only contains the variables `dep_delay` and `arr_delay`.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  select(dep_delay, arr_delay)
```
:::

Make a data frame that keeps every variable except `dep_delay`.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  select(-dep_delay)
```
:::

Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.

```{webr-r}
# add code here
```


::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  select(year:dep_delay)
```
:::

Use the select helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `arr_` in the name.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  select(contains("arr_"))
```
:::

## [`slice()`](https://dplyr.tidyverse.org/reference/slice.html)

The [`slice()`] function lets you index rows by their name or (integer) locations. Other common uses of `slice()` include selecting and removing rows.

Display the first five rows of the `flights` data frame.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  slice(1:5)
```
:::

We can use the function `n()`to reference the total number of rows in a data frame. Using this with slice, display the last two rows of the flights data frame.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  slice((n()-1):n())
```
:::

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

We can use `arrange()` to order rows of a data frame by the values of selected columns.

Letâ€™s arrange the data by `dep_delay`, so the flights with the shortest departure delays will be at the top of the data frame.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  arrange(dep_delay)
```
:::

We can use the helper `desc()` to arrange the the data by descending departure delay. Do so below. 

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  arrange(desc(dep_delay))
```
:::

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

The function `filter()` is used to subset a data frame, retaining all rows that satisfy your conditions. 

Filter the data frame by selecting the rows where the destination airport is `RDU`.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  filter(dest == "RDU")
```
:::

We can also filter using more than one condition. Here we select all rows where the destination airport is RDU and the arrival delay is less than 0.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  filter(dest == "RDU", arr_delay < 0)
```
:::

Describe what the code is doing in words.

```{webr-r}
flights |>
  filter(
    dest %in% c("RDU", "GSO"),
    arr_delay < 0 | dep_delay < 0
    )
```

<br>
```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

::: {.callout-tip collapse="true"}
## Solution
We are piping the flights data set into the function filter, where we want to keep all rows where destination has the value of RDU or GSO, and where arrival delay is less than 0 or departure delay is less than 0.
:::

::: {.callout-tip collapse="true"}
## more operators

| operator      | definition                                               |
|:--------------|:---------------------------------------------------------|
| `<`           | is less than?                                            |
| `<=`          | is less than or equal to?                                |
| `>`           | is greater than?                                         |
| `>=`          | is greater than or equal to?                             |
| `==`          | is exactly equal to?                                     |
| `!=`          | is not equal to?                                         |
| `x & y`       | is x AND y?                                              |
| `x \| y`      | is x OR y?                                               |
| `is.na(x)`    | is x NA?                                                 |
| `!is.na(x)`   | is x not NA?                                             |
| `x %in% y`    | is x in y?                                               |
| `!(x %in% y)` | is x not in y?                                           |
| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |
:::

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)

We can use the `count()` function to create frequency tables of selected variables.

Create a frequency table of the destination locations for flights from New York.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution
```{r}
flights |>
  count(dest)
```
:::

In which month was there the fewest number of flights? How many flights were there in that month?

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  count(month) |>
  filter(n == min(n))
```
:::

On which date (month + day) was there the largest number of flights? How many flights were there on that day?

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  count(month, day) |>
  filter(n == max(n))
```
:::

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

We can use the `mutate()` function to create new columns or modify existing columns in your data set.

Convert air_time (minutes in the air) to hours and then create a new variable, `mph`, the miles per hour of the flight

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  mutate(
    hours = air_time / 60,
    mph = distance / hours
    ) |>
  select(air_time, distance, hours, mph)
```
:::

Create a new variable, `rdu_bound`, which indicates whether the flight is to RDU or not. Then, for each departure airport `(origin)`, calculate what proportion of flights originating from that airport are to RDU.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  mutate(rdu_bound = if_else(dest == "RDU", "Yes", "No")) |>
  count(origin, rdu_bound) |>
  group_by(origin) |>
  mutate(prop = n / sum(n)) |>
  filter(rdu_bound == "Yes")
```
:::

## [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html) & [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html)

We can use the function `summarize()` to calculate summary statistics for a selected column. `summarize()` is often accompanied by `group_by()`, which converts a data frame into a grouped tibble where operations (like `summarize()`) are performed for each group.

Find the mean arrival delay for all flights.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  summarize(mean_dep_delay = mean(dep_delay))
```
:::

Find the mean arrival delay for for each month.

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  group_by(month) |>
  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE))
```
:::


## Additional Practice 

Create a data frame that only includes the plane tail number (tailnum), carrier (carrier), and departure delay for the flight with the longest departure delay. What is the plane tail number (tailnum) for this flight?

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  select(tailnum, carrier, dep_delay) %>%
  arrange(dep_delay) |>
  slice(1)
```
:::

On which date (month + day) was there the largest number of flights? How many flights were there on that day?

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  count(month, day) |>
  filter(n == max(n))
```
:::

Create a new variable to calculate the percentage of flights in each month. What percentage of flights were in July?

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  count(month) |>
  mutate(perc = n / sum(n) * 100)
```
:::

What is the median departure delay for each airports around NYC (origin)? Which airport has the shortest median departure delay?

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  group_by(origin) |>
  summarize(med_dep_delay = median(dep_delay, na.rm = TRUE))
```
:::

Create a new dataset that only contains flights that do not have a missing departure time. Include the columns `year`, `month`, `day`, `dep_time`, `dep_delay`, and `dep_delay_hours` (the departure delay in hours). Hint: Note you may need to use `mutate()` to make one or more of these variables.

```{webr-r}

```

::: {.callout-tip collapse="true"}
## Solution

```{r}
flights |>
  filter(!is.na(dep_time)) |>
  select(year, month, day, dep_time, dep_delay) |>
  mutate(dep_delay_hours = dep_delay / 60)
```
:::

{{< include _reflection_question.qmd >}}
