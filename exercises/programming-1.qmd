---
title: "NYC flights + data wrangling"
webr:
  packages: ['tidyverse', 'scales', 'nycflights13']
filters:
  - webr
---

::: callout-important
Please reference the `webR-intro` programming exercise for information and instructions on how to interact with the programming exercise below.
:::

## Getting started

In this exercise, we will be exploring the `flights` data set, containing information about all flights that departed from NYC to destinations in the United States, Puerto Rico, and the American Virgin Island in 2013. A data key can be found below:

::: {.callout-note collapse="true"}
## data key

| Variable       | Description                                                            |
|----------------|------------------------------------------------------------------------|
| year           | year of departure                                                      |
| month          | month of departure                                                     |
| day            | day of departure                                                       |
| dep_time       | departure time                                                         |
| arr_time       | arrival time                                                           |
| sched_dep_time | scheduled departure time                                               |
| sched_arr_time | scheduled arrival time                                                 |
| dep_delay      | departure delays in minutes. Negative times represent early departures |
| arr_delay      | arrival delays in minutes. Negative times represent early arrivals     |
| carrier        | two letter carrier abbreviation                                        |
| tailnum        | plane tail number                                                      |
| orgin          | origin                                                                 |
| dest           | destination                                                            |
| air_time       | amount of time spent in the air in minutes                             |
| distance       | distance between airports in miles                                     |
| hour           | the hour of time scheduled departure                                   |
| minutes        | the minutes of time of scheduled departure                             |
| time_hour      | scheduled date and hour of the flight as a POSIXct date.            |
:::
### Packages

We'll use: **tidyverse** for majority of the analysis and **scales** for pretty plot labels later on. These data we are using are in the **nycflights13** package. These are ready to use for you in this programming exercise!

```{r}
#| label: load-packages
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(scales)
library(nycflights13)
```

## Data wrangling 

Data wrangling is the process of transforming or reshaping data into a form that is more suitable for analysis. In this exercise, we will practice with a variety of functions used to wrangle data. 

## Exercise 1

Before we begin, use `glimpse` to report how many rows the `flights` data frame has. What does each row represent? 

```{webr-r}
# add code here
```

<br>
```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
glimpse(flights)
```

There are 336,776 rows in the `flights` data set. Each observation represents a **flight**.
:::

## Exercise 2 - `select()`

Make a data frame that only contains the variables `dep_delay` and `arr_delay`.

```{webr-r}

```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  select(dep_delay, arr_delay)
```
:::

Make a data frame that keeps every variable except `dep_delay`.

```{webr-r}

```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  select(-dep_delay)
```
:::

Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.

```{webr-r}

```


::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  select(year:dep_delay)
```
:::

Use the select helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `arr_` in the name.

```{r}

```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  select(contains("arr_"))
```
:::

## Exercise 3 - `slice()`

Display the first five rows of the `flights` data frame.

```{r}

```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  slice(1:5)
```
:::

We can use the function `n()`to reference the total number of rows in a data frame. Using this with slice, display the last two rows of the flights data frame.

```{r}

```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  slice((n()-1):n())
```
:::

## Exercise 4 - `arrange()`

Letâ€™s arrange the data by `dep_delay`, so the flights with the shortest departure delays will be at the top of the data frame.

```{r}

```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  arrange(dep_delay)
```
:::

We can use the helper `desc` to arrange the the data by descending departure delay. Do so below. 

```{r}

```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  arrange(desc(dep_delay))
```
:::

## Exercise 5 - `filter()`

Filter the data frame by selecting the rows where the destination airport is `RDU`.

```{r}

```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  filter(dest == "RDU")
```
:::

We can also filter using more than one condition. Here we select all rows where the destination airport is RDU and the arrival delay is less than 0.

```{r}

```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
flights |>
  filter(dest == "RDU", arr_delay < 0)
```
:::

Describe what the code is doing in words.

```{r}
flights |>
  filter(
    dest %in% c("RDU", "GSO"),
    arr_delay < 0 | dep_delay < 0
    )
```

<br>
```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

::: {.callout-tip collapse="true"}
## Solution


:::

::: {.callout-tip collapse="true"}
## more operators

| operator      | definition                                               |
|:--------------|:---------------------------------------------------------|
| `<`           | is less than?                                            |
| `<=`          | is less than or equal to?                                |
| `>`           | is greater than?                                         |
| `>=`          | is greater than or equal to?                             |
| `==`          | is exactly equal to?                                     |
| `!=`          | is not equal to?                                         |
| `x & y`       | is x AND y?                                              |
| `x \| y`      | is x OR y?                                               |
| `is.na(x)`    | is x NA?                                                 |
| `!is.na(x)`   | is x not NA?                                             |
| `x %in% y`    | is x in y?                                               |
| `!(x %in% y)` | is x not in y?                                           |
| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |

:::


## Your turn 

Create a data frame that only includes the plane tail number (tailnum), carrier (carrier), and departure delay for the flight with the longest departure delay. What is the plane tail number (tailnum) for this flight?

```{r}
flights |>
  select(tailnum, carrier, dep_delay) %>%
  arrange(dep_delay) |>
  slice(1)
```

{{< include _reflection_question.qmd >}}
